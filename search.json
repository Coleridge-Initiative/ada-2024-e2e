[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Enrollment to Employment Applied Data Analytics 2024 Class",
    "section": "",
    "text": "Preface\nThis e-book contains the class notebooks for the Coleridge Initiative 2024 Arkansas Applied Data Analytics Suite of Classes Examining Enrollment to Employment Trajectories in Arkansas.\n\nPlease be aware that links pointing to other sections within a specific notebook are operational. Links directing to sections or other references outside of the notebook will not be functional.\n\n© 2023 The Coleridge Initiative, Inc\n\n\nArkansas ADA 2024 class\nThe U.S. Department of Labor’s Employment and Training Administration funded a suite of Applied Data Analytics training classes delivered by the Coleridge Initiative, in partnership with the state of Arkansas and the National Association of State Workforce Agencies (NASWA). The training classes focused on the cross-section of Workforce Innovation and Opportunity Act (WIOA), Supplemental Nutrition Assistance Program (SNAP), and Temporary Assistance for Needy Families (TANF) programs and services linked to employment and wage outcomes. Accepted class participants learned and applied data analytic approaches to linked Arkansas SNAP, TANF, WIOA, and Unemployment Insurance (UI) employment and wage data to better understand the impacts of these programs on individuals, families, and communities.\nThis repository contains the class materials for the Arkansas Applied Data Analytics training program.\nData Sources Used for the Class:\n\nArkansas Office of Skills Development\nArkansas Department of Human Services\nArkansas Department of Workforce Services\nArkansas Department of Higher Education\n\nClass Program\nDay 1 - Overview, Project Scoping, and Privacy, Confidentiality, and Ethics\nDay 2 - Dataset Introductions and Project Scoping\nDay 3 - Exploratory Data Analysis\nDay 4 - Record Linkage and Data Model\nDay 5 - Cross-Sectional Analysis\nDay 6 - Cohort Analysis\nDay 7 - Measurement\nDay 8 - Project Status Presentations\nDay 9 - Missingness and Inference\nDay 10 - Contextualizing Employment\nDay 11 - Visualization\nDay 12 - Communicating Results and Exporting Data",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01_EDA.html",
    "href": "01_EDA.html",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "",
    "text": "2 Introduction\nWelcome to the first workbook for Module 2 of this course, covering Exploratory Data Analysis, or EDA.\nIn the Foundations Module, we introduced EDA within the larger process of data discovery. EDA helps you ensure that the provided data suits your desired analysis and that you have the necessary understanding to make informed analytic decisions as you work through your project. In this workbook, we’re going to be discovering the primary employment outcome-focused datasets we will use in this course: the Arkansas Unemployment Insurance (UI) wage records and the Arkansas Quarterly Census of Employment and Wages (QCEW) data. Both datasets are available in standard formats across states, so any code introduced in this notebook should be portable to your own state data. As you know, there are many other data sources available for you as part of this training - we will walk through the primary ones in optional supplemental sections. For each dataset, we will work to answer the following key data discovery questions:",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#the-purpose-of-these-workbooks",
    "href": "01_EDA.html#the-purpose-of-these-workbooks",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "The purpose of these workbooks",
    "text": "The purpose of these workbooks\nYou will now have the opportunity to apply the skills covered in both modules thus far to restricted use Arkansas data. With your team, you will carry out a detailed analysis of this data and prepare a final project showcasing your results.\nThese workbooks are here to help you along in this project development by showcasing how to apply the techniques discussed in class to the Arkansas microdata. Part of this workbook will be technical - providing basic code snippets your team can modify to begin parsing through the data. But, as always, there will also be an applied data literacy component of these workbooks, and it should help you develop a better understanding of the structure and use of the underlying data even if you never write a line of code.\nThe timeline for completing these workbooks will be provided on the training website and communicated to you in class.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#installing-packages",
    "href": "01_EDA.html#installing-packages",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Installing packages",
    "text": "Installing packages\nBecause we have left the world of the Foundations Module and entered a new workspace, we need to re-install the Coleridge Initiative package (which will then help us install several of the other packages we will use in these notebooks).\nTo install the package, at the Console in RStudio\n\ntype (or copy) the following:\n\ninstall.packages('P:/tr-enrollment-to-employment/packages/ColeridgeInitiative_0.1.0.tar.gz', type = 'source', repos = NULL)\n\nThe package will install and when it is finished , you should see:\n\nNext, load the package by running\n\nlibrary(ColeridgeInitiative)\n\nNext, to install the basic packages needed for the course, run the following command in the console:\n\ninstall_new()\n\nThis will take a minute or so, but when it is done, you should see the prompt returned to you\n\nNow you can use the packages as you would normally use them. For example. to load the dplyr package, simply type (at the console, or in a script)\n\nlibrary(dplyr)\n\nand the functions in that package will be available to you.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#load-libraries",
    "href": "01_EDA.html#load-libraries",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Load libraries",
    "text": "Load libraries\nJust like we did in the Foundations Module, in running SQL and R code together through R, we need to load the RJDBC package. In addition, we will load the tidyverse suite of packages, as they will help us implement some of our fundamental data operations while maintaining a consistent syntax. Lastly, to enable an option discussed in the coming sections, we will load a new package for working with databases in R, dbplyr.\n\nEvery time you create a new R file, you should copy and run the following code snippet. You can easily copy the entire snippet by hovering over the cell and clicking the clipboard icon on the top-right edge.\n\n\noptions(scipen = 999) # avoid scientific notation\nlibrary(RJDBC)\nlibrary(tidyverse)\nlibrary(dbplyr)\nlibrary(zoo) # time/date manipulations",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#establish-database-connection",
    "href": "01_EDA.html#establish-database-connection",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Establish Database Connection",
    "text": "Establish Database Connection\nTo load data from the Redshift server into R, we need to first set up a connection to the database. The following set of commands accomplish this:\n\ndbusr=Sys.getenv(\"DBUSER\")\ndbpswd=Sys.getenv(\"DBPASSWD\")\n\nurl &lt;- \"jdbc:redshift:iam://adrf-redshift11.cdy8ch2udktk.us-gov-west-1.redshift.amazonaws.com:5439/projects;loginToRp=urn:amazon:webservices:govcloud;ssl=true;AutoCreate=true;idp_host=adfs.adrf.net;idp_port=443;ssl_insecure=true;plugin_name=com.amazon.redshift.plugin.AdfsCredentialsProvider\"\n\ndriver &lt;- JDBC(\n  \"com.amazon.redshift.jdbc42.Driver\",\n  classPath = \"C:\\\\drivers\\\\redshift_withsdk\\\\redshift-jdbc42-2.1.0.12\\\\redshift-jdbc42-2.1.0.12.jar\",\n  identifier.quote=\"`\"\n)\n\ncon &lt;- dbConnect(driver, url, dbusr, dbpswd)\n\nAs a reminder, don’t worry too much about the details of this connection - you can simply copy and paste this code each time you want to connect your R script to the Redshift database.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#new-.renviron",
    "href": "01_EDA.html#new-.renviron",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "New .Renviron",
    "text": "New .Renviron\nFor this code to work, you need to create a new .Renviron file in your user folder (i.e. U:\\\\John.Doe.P00002) that contains the following:\nDBUSER='adrf\\John.Doe.P00002'\nDBPASSWD='xxxxxxxxxxxx'\nwhere John.Doe.P00002 is replaced with your username and xxxxxxxxxx is replaced with your password (both still in quotes!) The setup of this code is nearly identical to that required in the Foundations Module workspace - however, DBUSER should now end with .T00113 instead of .T00112.\nA detailed video from the Foundations Module, “Introduction to RStudio,” demonstrating how to create an .Renviron file is available on the Resources page on class website in the subsection “Quick Links.”",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#structure",
    "href": "01_EDA.html#structure",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Structure",
    "text": "Structure\nLet’s begin answering our key data discovery questions. First - what is the structure of the UI wage data? There are two dimensions to this question:\n\nWhat variables are available in the UI Wage data?\nWhat does each row in the UI Wage data represent?\n\nTo start, just like in the Foundations Module, let’s glance at a few rows of the UI Wage data:\n\nNote: Because the output is easier to parse through on an HTML document, we have the SQL option written so that you can directly copy and paste them into DBeaver. If you would like to run them in RStudio, and not use the dbplyr code, you can do so by using the workflow we introduced in the Foundations Module by first running qry &lt;- \"INSERT SQL CODE\" and then dbGetQuery(con, qry).\n\n\nSQL Querydbplyr query\n\n\n\nSELECT * \nFROM ds_ar_dws.ui_wages_lehd \nLIMIT 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"ui_wages_lehd\")) %&gt;%\n  head(n=5)\n\n\n\n\nWe can see that there are 16 columns available in the UI Wage data. The UI Wage data dictionary (Right-click on link to open) on the P: drive contains detailed descriptions of each variable.\nJust like with the LAUS data, the data dictionary descriptions, while helpful, do not provide the entire context for these variables. We also need to have a clear definition of what each observation - or row - in the UI wage records represents.\nTo know what we are aiming for, we can find the total number of rows in the UI Wage data:\n\nSQL querydbplyr query\n\n\n\nSELECT COUNT(*)\nFROM ds_ar_dws.ui_wages_lehd\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"ui_wages_lehd\")) %&gt;%\n  tally()\n\n\n\n\nLet’s think about the three categories of variables that might appear in our dataset to uniquely define our rows.\n\nUnit of observation\nThe first category to consider is variables that describe the unit of observation. Recall that the unit of observation refers to the type of entity or object about which data is collected. This could be a person, a organization, a state, or any other entity that is the focus of data collection.\nIn the case of the UI Wage data, our unit of observation is the person - the individual receiving wages in the dataset. Besides leveraging background information on the nature of the data, we can identify this because ssn is a person-level variable in our dataset representing the smallest single unit identified in the data.\nImportantly, recall that the unit of observation alone does not necessarily define a row for our dataset. We can test this by count the number of unique hashed social security numbers in our data relative to the total number of rows:\n\nSQL querydbplyr query\n\n\n\nSELECT COUNT(*), COUNT(DISTINCT(employee_ssn))\nFROM ds_ar_dws.ui_wages_lehd\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"ui_wages_lehd\")) %&gt;%\n  summarise(\n    n_rows = n(),\n    n_people =  n_distinct(employee_ssn)\n  )\n\n\n\n\nWe see that there are far fewer unique ssn values than total rows in the table. This indicates that ssn alone does not define a row of our data - some individuals must appear in the data more than once. Why might there be multiple observations for the same individual? One of the common reasons is what we will discuss next: time.\n\n\nPeriod of observation\nOne of the most common reasons why this might be the case is that data about each unit of observation is observed at multiple points in time, with information stored in separate rows corresponding to each distinct point in time. Recall that we can refer to the variables describing the period of observation as the time dimension(s). They represent how often the data is captured or updated. However, note that not every dataset will have variables representing the period of observation.\nIn the UI Wage data, the period of observation is represented by the variables reporting_period_year and reporting_period_quarter, which indicate the calendar year and quarter associated with the employment observation, respectively. Note that in other instances, date variables often encode information about the period of observation.\nLet’s look at the amount of unique combinations of employee_ssn, reporting_period_year, and reporting_period_quarter combined:\n\nSQL querydbplyr query\n\n\n\nWITH dis as (\n  SELECT DISTINCT reporting_period_year, reporting_period_quarter, employee_ssn\n  FROM ds_ar_dws.ui_wages_lehd\n)\nSELECT COUNT(*)\nFROM DIS\n\n\n\n\n# tally finds the number of rows\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"ui_wages_lehd\")) %&gt;%\n\n  distinct(reporting_period_year, reporting_period_quarter, employee_ssn) %&gt;% \n  tally()\n\n\n\n\nWe still see a difference here between the number of unique person-quarters and the total number of rows from our first query. Perhaps there are some other variables that help constitute a row in the data, or there may be duplicate observations.\n\n\nAttributes\nWhat about the other 13 variables described in the data dictionary?\nThese remaining variables represent the information that the wage records contains about our person-quarter observations. There are several different types of attributes that we can see in our data dictionary:\n\nIndividual attributes: nhr_ui_wage_id, employee_first_name (hashed), employee_middle_name (hashed), and employee_last_name (hashed) describe the individual associated with the employment observation\nEmployer attributes: ui_account_number, reporting_unit_number, federal_ein, and state_ein describe the employer associated with the employment observation\nEmployment attributes: employee_wage_amount, hours, and weeks describe information about the employment. hours and weeks are both not populated.\nMiscellaneous: reference_state, reporting_period (concatenated version of reporting_period_year and reporting_period_quarter)\n\nHere, with the UI wage records, since an individual could have multiple employers within our period of observation, a unique observation should also include the employer. We can verify that claim with the code below:\n\nSQL querydbplyr query\n\n\n\nWITH dis as (\n  SELECT DISTINCT reporting_period_year, reporting_period_quarter, employee_ssn, federal_ein \n  FROM ds_ar_dws.ui_wages_lehd\n)\nSELECT COUNT(*)\nFROM dis\n\n\n\n\ncon %&gt;%\n  tbl(in_schema(\n    schema = \"ds_ar_dws\",\n    table = \"ui_wages_lehd\"\n  )) %&gt;%\n  distinct(reporting_period_year, reporting_period_quarter, employee_ssn, federal_ein) %&gt;%\n  tally()\n\n\n\n\nAny duplication at this granularity should be further investigated.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#coverage",
    "href": "01_EDA.html#coverage",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Coverage",
    "text": "Coverage\nThe next step of our exploratory data analysis is to determine the data coverage: what time span, region, and other important subgroups are captured in the data? Luckily, this is pretty straightforward for the UI Wage data: we know that the geographical area is the entire state of Arkansas, and that the group covered is those employed by UI-covered employers. We can confirm this by finding unique values of reference_state in the data:\n\nSQL querydbplyr query\n\n\n\n\nSELECT DISTINCT(reference_state)\nFROM ds_ar_dws.ui_wages_lehd\n\n\n\n\ncon %&gt;%\n  tbl(in_schema(\n    schema = \"ds_ar_dws\",\n    table = \"ui_wages_lehd\"\n  )) %&gt;%\n  distinct(reference_state)\n\n\n\n\nWe can follow a similar approach for time periods - that being said, because we know the data is tracked over time, it might be helpful to find the number of rows corresponding to each time frame. To do so, we can group our data by quarter, this time using reporting_period, which combines reporting_period_year and reporting_period_quarter into a single string, and aggregate the number of rows.\n\nNote: On the SQL tab, since we are planning on reading this output into R, we have used the qry &lt;- \"INSERT SQL CODE\" and dbGetQuery(con, qry) workflow.\n\n\nSQL querydbplyr query\n\n\n\nqry &lt;- \"\nSELECT reporting_period, COUNT(*)\nFROM ds_ar_dws.ui_wages_lehd \nGROUP BY reporting_period \nORDER BY reporting_period\n\"\n\ncounts_by_qtr &lt;- dbGetQuery(con, qry)\n\ncounts_by_qtr\n\n\n\n\ncounts_by_qtr &lt;- con %&gt;%\n  tbl(in_schema(\n    schema = \"ds_ar_dws\",\n    table = \"ui_wages_lehd\"\n  )) %&gt;%\n  select(reporting_period) %&gt;%\n  group_by(reporting_period) %&gt;%\n  tally() %&gt;%\n  ungroup() %&gt;%\n  arrange(reporting_period) %&gt;%\n  collect() # extract data into memory\n\ncounts_by_qtr\n\n\n\n\nWe can read through the table above and begin to get a feeling for the number of individuals covered in each quarter, but you can also use this same summary dataset to quickly calculate our coverage:\n\ncounts_by_qtr %&gt;%\n  summarize(\n    min_qtr = min(reporting_period),\n    max_qtr = max(reporting_period)\n  )\n\nFrom this, we see that the UI Wage data begins in the Q1 2011, and ends in Q4 2022.\nWe can also find the quarter with the highest number of observations:\n\ncounts_by_qtr %&gt;%\n  filter(\n    n == max(n)\n  )",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#select-variable-distribution",
    "href": "01_EDA.html#select-variable-distribution",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Select Variable Distribution",
    "text": "Select Variable Distribution\nThe final part of data discovery is investigating the distribution of key variables in our dataset, and documenting any irregularities such as missingness, outliers, invalid values, or other issues that need to be addressed in an analysis leveraging these data components. We’ll look at a few of the variables from the UI Wage data now, but this type of exploration is more of an art than a science, and the continued exploration of these variables will be an essential component of your project in this program. As a reminder, you are encouraged to use this code as inspiration in your own exploration.\n\nreporting_period\nLet’s begin by taking the same data pull we just used to examine the data coverage, and plot the data using a simple line plot:\n\ncounts_by_qtr %&gt;%\n  ggplot(aes(\n    x = reporting_period,\n    y = as.numeric(n),\n    group = 1\n  )) +\n  geom_line() +\n  labs(x = \"Quarter\", y = \"Count\", title = \"Count of UI Wage Recipients by Quarter\") +\n  # rotate x-axis text to avoid quarter overlap\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nImmediately, we can see a seasonal pattern with higher values in Q2 & Q3 annually, and a decline in records in 2020, which should make sense given Arkansas’s economic situation at the time.\nDoes anything else catch your eye? Take some time to examine this graph.\n\n\nemployee_wage_amount\nWe can also examine the patterns in the average wage received by employee during each period. Here is a query to perform this:\n\nSQL querydbplyr query\n\n\n\nqry &lt;-  \"\nSELECT  AVG(employee_wage_amount) as avg_wage, reporting_period\nFROM ds_ar_dws.ui_wages_lehd \nGROUP BY reporting_period \nORDER BY reporting_period\n\"\n\navg_by_qtr &lt;- dbGetQuery(con, qry)\n\navg_by_qtr\n\n\n\n\navg_by_qtr &lt;- con %&gt;%\n  tbl(\n    in_schema(schema = \"ds_ar_dws\", table = \"ui_wages_lehd\")\n  ) %&gt;%\n  select(employee_wage_amount, reporting_period) %&gt;%\n  group_by(reporting_period) %&gt;%\n  summarize(\n    avg_wage = mean(employee_wage_amount)\n  ) %&gt;%\n  ungroup() %&gt;%\n  arrange(reporting_period) %&gt;%\n  collect()\n\navg_by_qtr\n\n\n\n\nAnd we can visualize the data using a simple line plot:\n\navg_by_qtr %&gt;%\n  ggplot(aes(\n    x = reporting_period,\n    y = as.numeric(avg_wage),\n    group = 1\n  )) +\n  geom_line() +\n  labs(x = \"Quarter\", y = \"Average Wage\", title = \"Average of UI Wages Received by Quarter\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nWe also see similar seasonality in average wages received, with Q4 and Q1 within each year showing higher average wages, but unlike the total number of recipients in the previous plot, we do not see any decline in 2020.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#structure-1",
    "href": "01_EDA.html#structure-1",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Structure",
    "text": "Structure\nFirst, just as we did in the previous section, we will explore the basic structure of the data by examining the first few rows of the table:\n\nSQL Querydbplyr query\n\n\n\nSELECT *\nFROM ds_ar_dws.qcew\nLIMIT 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;% \n  head(5)\n\n\n\n\nWe see there are 113 columns in the table. Consult the data dictionary for descriptions of these columns.\nSimilar to the one for the UI wage records, the QCEW data dictionary does not specifically define a row. As a reference point, we can find the total number of rows in the data:\n\nSQL querydbplyr query\n\n\n\nSELECT COUNT(*)\nFROM ds_ar_dws.qcew\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  tally()\n\n\n\n\n\nUnit of observation\nQCEW data is reported by employer, so the unit of observation is therefore the employer. The employer, though, is referenced in a handful of variables-including the federal Employer Identification Number (EIN), UI account number (or state ein), and reporting unit number-and may defined differently based on the situation. Here, we will define an employer by their federal EIN (ein in the data), as this corresponds to the employer paying into the UI trust fund and also allows for cross-state linkages. That being said, multi-unit employers may appear as separate rows with the same federal EIN but different reporting unit numbers.\nLet’s find the number of unique employers in the data and compare that to the total number of rows:\n\nSQL querydbplyr query\n\n\n\nSELECT COUNT(*), COUNT(DISTINCT(ein))\nFROM ds_ar_dws.qcew\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  summarise(\n    n_rows = n(),\n    n_employers = n_distinct(ein)\n  )\n\n\n\n\nWe can go a step further and include the reporting unit number to account for multi-unit establishments:\n\nSQL querydbplyr query\n\n\n\nWITH dis AS (\n  SELECT DISTINCT ein, reporting_unit_number\n  FROM ds_ar_dws.qcew\n)\nSELECT COUNT(*)\nFROM dis\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  distinct(ein, reporting_unit_number) %&gt;%\n  tally()\n\n\n\n\nBeyond this, based on our exploration of the UI wage records, it makes sense that a row is not solely defined by an employer or an employer unit - recall that this information is tracked over time.\n\n\nPeriod of observation\nWhereas the period of observation in the UI Wage data is represented by reporting_period_year and reporting_year_quarter, the QCEW contains reference_year and reference_quarter variables.\nWe can find the number of unique combinations of ein, reporting_unit_number, reference_year, and reference_quarter combined:\n\nSQL querydbplyr query\n\n\n\nWITH dis AS (\n  SELECT DISTINCT ein, reporting_unit_number, reference_year, reference_quarter\n  FROM ds_ar_dws.qcew\n)\nSELECT COUNT(*)\nFROM dis\n\n\n\n\ncon %&gt;%\n  tbl(in_schema(\n    schema = \"ds_ar_dws\",\n    table = \"qcew\"\n  )) %&gt;%\n  distinct(ein, reporting_unit_number, reference_year, reference_quarter) %&gt;%\n  tally()\n\n\n\n\nAs you can see, we don’t have complete de-duplication at this level. Upon further investigation, you may find some federal eins that correspond to multiple state eins, or vice versa, or some other examples of potential duplication. That is all to say that if you plan to use the QCEW data, just be careful for any misaligned duplication!\n\n\nAttributes\nAs we saw earlier, the QCEW has a large number of fields, and you should consult the data dictionary for the definitions of these fields. To see the column titles, we can use the queries below.\n\nSQL Querydbplyr query\n\n\n\nSHOW COLUMNS from table projects.ds_ar_dws.qcew\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  names()\n\n\n\n\nBetween looking at the list of column names above and the data dictionary, you can see that these other variables contain a wealth of employer-related information, such as industry, location, and employment statistics.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#coverage-1",
    "href": "01_EDA.html#coverage-1",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Coverage",
    "text": "Coverage\nWe will proceed by assessing the coverage of the QCEW data, first to confirm that all employers are located in Arkansas, which is tracked with the state_fips variable:\n\nSQL querydbplyr query\n\n\n\n\nSELECT DISTINCT(state_fips)\nFROM ds_ar_dws.qcew\n\n\n\n\ncon %&gt;%\n  tbl(in_schema(\n    schema = \"ds_ar_dws\",\n    table = \"qcew\"\n  )) %&gt;%\n  distinct(state_fips)\n\n\n\n\nYou may have noticed some other variables in the QCEW data that characterize an employer’s location, beyond the state. In fact, one of those variables is county_code, which as the name implies, contains the county of the corresponding employer. We can see if we have data on employers in each county in Arkansas by counting the number of unique counties:\n\nSQL querydbplyr query\n\n\n\n\nSELECT COUNT(DISTINCT(county_code))\nFROM ds_ar_dws.qcew\n\n\n\n\ncon %&gt;%\n  tbl(in_schema(\n    schema = \"ds_ar_dws\",\n    table = \"qcew\"\n  )) %&gt;%\n  summarise(\n    n_counties = n_distinct(county_code)\n  )\n\n\n\n\nFor reference, there are 75 counties in Arkansas, and none of the county codes have changed at least since the 1970s. But there seem to be more county codes here, so we can examine these specific codes:\n\nSQL Querydbplyr query\n\n\n\nSELECT DISTINCT(county_code)\nFROM ds_ar_dws.qcew\nGROUP BY county_code\nORDER BY county_code\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  distinct(county_code) %&gt;% \n  arrange(county_code)\n\n\n\n\nThe county_code values of 000, 900 - 999 are not real county fips codes, and employers with these codes need to be further investigated if using employer location information in your analysis.\nWe can also look at coverage from a time perspective, counting the number of observations in the QCEW file by reference_year and reference_quarter:\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\nSELECT count(*) as n,\nq.reference_year, q.reference_quarter\nFROM ds_ar_dws.qcew q\nGROUP BY q.reference_year, q.reference_quarter\nORDER BY q.reference_year, q.reference_quarter\n\"\n\ncnt_by_quarter &lt;- dbGetQuery(con, qry)\n\ncnt_by_quarter\n\n\n\n\ncnt_by_quarter &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  group_by(reference_year, reference_quarter) %&gt;% \n  summarise(n=n()) %&gt;% \n  ungroup() %&gt;% \n  arrange(reference_year, reference_quarter) %&gt;%\n  collect()\n\ncnt_by_quarter\n\n\n\n\n\ncnt_by_quarter %&gt;% \n  # combine year and quarter into one variable separated by \"-\"\n  mutate(period = paste(reference_year, reference_quarter, sep = \"-\")) %&gt;% \n  ggplot(aes(x = period, y = as.numeric(n), group = 1))+\n  geom_line()+\n  theme(axis.text.x = element_text(angle =45, hjust=1))\n\nIn this plot, we see continuous growth into 2020, when we see a large spike in the number of observations - this might indicate an underlying data quality issue in 2020.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "01_EDA.html#select-variable-distribution-1",
    "href": "01_EDA.html#select-variable-distribution-1",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Select Variable Distribution",
    "text": "Select Variable Distribution\n\nnaics_code\nOne of the commonly-used variables from the QCEW table is naics_code, which contains the North American Industry Classification System (NAICS) codes that correspond to specific industries. The codes traditionally exist at the six-digit level, and can be truncated into broader codes (ex. 624120 coverted to 62).\nAt the six-digit level, let’s see how many unique NAICS codes exist in the QCEW table:\n\nSQL Querydbplyr query\n\n\n\nSELECT COUNT(DISTINCT(naics_code))\nFROM ds_ar_dws.qcew\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  summarize(num_codes = n_distinct(naics_code))\n\n\n\n\nThat’s a lot of codes! In contrast, let’s see if working with the 2-digit codes might be a bit more feasible:\n\nSQL Querydbplyr query\n\n\n\nSELECT COUNT(DISTINCT(SUBSTRING(naics_code, 1, 2)))\nFROM ds_ar_dws.qcew\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  distinct(naics_code) %&gt;%\n  collect() %&gt;% #substring doesn't work when translating to postgresql so need to pull into R first\n  summarize(n_distinct(substring(naics_code, 1, 2)))\n\n\n\n\nThis is a bit more workable. Let’s find the most common two-digit NAICS codes across all rows:\n\nSQL Querydbplyr query\n\n\n\nSELECT SUBSTRING(naics_code, 1, 2), COUNT(*)\nFROM ds_ar_dws.qcew\nGROUP BY SUBSTRING(naics_code, 1, 2)\nORDER BY 2 DESC --2 references the second column in the sELECT statement\nLIMIT 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"qcew\")) %&gt;%\n  group_by(naics_code) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  collect() %&gt;%\n  #substring doesn't work when translating to postgresql so need to pull into R first\n  # also convert n to numeric since it pulls in as a character variable\n  mutate(\n    two_digit = substring(naics_code, 1, 2),\n    n = as.numeric(n)\n  ) %&gt;%\n  group_by(two_digit) %&gt;%\n  summarize(tot = sum(n)) %&gt;%\n  arrange(desc(tot)) %&gt;%\n  head(5)\n\n\n\n\nThere are a handful of NAICS-related lookup tables available for you in the ds_ar_dws schema. At the two-digit level, the most relevant table will be naics_sector, but just keep in mind that the current table has ranges of codes in some places (ex. 44-45), which make it a bit more complicated to join. For reference, the two-digit NAICS code of 62 corresponds to Health Care and Social Assistance.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exploratory Data Analysis (EDA)</span>"
    ]
  },
  {
    "objectID": "02_data_model_motivation.html",
    "href": "02_data_model_motivation.html",
    "title": "Module 2: Notebook 2Data Model Motivation",
    "section": "",
    "text": "3 Introduction\nHi all, and welcome to the second notebook of Module 2! This notebook is intended to be relatively brief, and provide a few motivating examples to show how the data model we learned about in class this week can make our lives much easier when it comes to manipulating and combining the raw data we have available to us in this class.\nOur hope is that this notebook can provide a jumping off place as you begin to explore the data model, which should be the primary data source you use for the rest of your team’s analysis. With that in mind, we also encourage you to examine a few of the data model tables yourselves, and to review the Fact Table Explainers available on the resources page of the class website. These will help provide a broader overview of the decisions rules that go into fitting the raw data you began to explore in the EDA notebook into the structure of the data model.\nDon’t worry if all of this data model material feels confusing - over the next several notebooks, you will see plenty of examples of how you can use the data model’s tables in practice to answer questions relevant to your projects. In fact, in this notebook, we won’t even dive very far into understanding the structure of the data model or its nuances. Instead, we just want to show a few simple examples that should help clarify why it’s worth going through the trouble of building a data model in the first place, and how we can understand and interpret the results that the data model gives us.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Module 2: Notebook 2Data Model Motivation</span>"
    ]
  },
  {
    "objectID": "02_data_model_motivation.html#program_participation_start_end",
    "href": "02_data_model_motivation.html#program_participation_start_end",
    "title": "Module 2: Notebook 2Data Model Motivation",
    "section": "program_participation_start_end",
    "text": "program_participation_start_end\nThere are two primary data model fact tables that we will use in this class. The first one we will look at is the program_participation_start_end table. As the name suggests, this table gives individual’s start and end dates for participation in each of our main programs. Let’s take a look at this table here:\n\nSQL querydbplyr query\n\n\n\nselect * \nfrom tr_e2e.fact_person_program_start_end\nlimit 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_program_start_end\")) %&gt;%\n  head(n = 5) %&gt;%\n  collect()\n\n\n\n\nWe have the following columns:\n\nperson_program_start_end_id: a unique ID for each row of the fact table\nperson_key: A unique person identifier that links to social security number\nprogram_key: A unique identifier for each program (e.g. SNAP = 9, Adult WIOA = 1)\nentry_year_quarter_key and exit_year_quarter_key: Unique identifier for the quarters the individual entered and exited the program\n\nYou might be wondering why we have all of these keys, instead of, for example, just the actual social security number, or name of the program. These keys actually, hold all the power of the dimensional model. With them, we are able to store lots and lots of observations in our main fact table very easily (numbers are quick to store), and then link those to further information in our dimension tables that actually tell us what each key corresponds to.\nIf that still feels confusing, then feel free to refer back to the lecture slides for the data model introduction available on the class website for a little bit more of an explanation of fact and dimension tables. But don’t worry about it too much - you’ll get plenty of practice using and interpreting the data model over the next few notebooks.\nTurning back to the problem at hand, we can deduce that this table shows program participation at the person-program-spell level - i.e., there is one row for each unique person/program/start-date combination. This is just what we learned in class, but it’s good to see it here in practice.\nLet’s attempt to use this table to answer a simple question: how many individuals started an Adult WIOA benefit spell in 2019 Q4. To do so is actually pretty simple with the data model - we can limit the above table to observations with program_key = 1 (Adult WIOA) and entry_year_quarter_key = 40 (2019-Q4). Remember that to determine the actual ids we wanted we needed to consult the dim_program and dim_year_quarter tables - but since this is just an example, we’re not too worried about that.\nLet’s use these limitations now, and count the number of rows:\n\nSQL querydbplyr query\n\n\n\nselect count(*) \nfrom tr_e2e.fact_person_program_start_end\nwhere program_key = 1 and entry_year_quarter_key = 40\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_program_start_end\")) %&gt;%\n  filter(program_key == 1 & entry_year_quarter_key == 40) %&gt;%\n  tally() %&gt;%\n  collect()\n\n\n\n\nWe can also count the number of unique individuals, instead of the number of rows, but because our observations are already unique at the person/program/start-date level, we should get the same number. Let’s verify that here:\n\nSQL querydbplyr query\n\n\n\nselect count(distinct person_key) \nfrom tr_e2e.fact_person_program_start_end\nwhere program_key = 1 and entry_year_quarter_key = 40\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_program_start_end\")) %&gt;%\n  filter(program_key == 1 & entry_year_quarter_key == 40) %&gt;%\n  select(person_key) %&gt;% \n  distinct() %&gt;%\n  tally() %&gt;%\n  collect()\n\n\n\n\nNow, let’s turn back to the PIRL data to get a better understanding of where these numbers come from. As expected, if we just count all observations in the PIRL with a program start falling in Q4 of 2019 we get a much larger number:\n\nSQL querydbplyr query\n\n\n\nselect count(*) \nfrom ds_ar_dws.pirl \nwhere \n  adult_wioa != 0 and \n  date_of_program_entry_wioa &gt;= '2019-10-01' and \n  date_of_program_entry_wioa &lt;= '2020-01-01'\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"pirl\")) %&gt;%\n  filter(\n    adult_wioa != '0' &\n    date_of_program_entry_wioa &gt;= '2019-10-01' &\n    date_of_program_entry_wioa &lt;= '2020-01-01'\n  ) %&gt;%\n  tally() %&gt;%\n  collect()\n\n\n\n\nBut, again, here we’re not really concerned among the variation between these duplicated rows. We just want a count of the number of individuals who started on the WIOA Adult program in this quarter. Let’s therefore count only the unique social security numbers from the list above:\n\nSQL querydbplyr query\n\n\n\nselect count(distinct social_security_number) \nfrom ds_ar_dws.pirl \nwhere \n  adult_wioa != 0 and \n  date_of_program_entry_wioa &gt;= '2019-10-01' and \n  date_of_program_entry_wioa &lt;= '2020-01-01'\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"pirl\")) %&gt;%\n  filter(\n    adult_wioa != '0' &\n    date_of_program_entry_wioa &gt;= '2019-10-01' &\n    date_of_program_entry_wioa &lt;= '2020-01-01'\n  ) %&gt;%\n  select(social_security_number) %&gt;%\n  distinct() %&gt;%\n  tally() %&gt;%\n  collect()\n\n\n\n\nNow we see that the count aligns with that presented in the data model. Hopefully, this highlights what the data model is intended to do - rather than capturing all of the variation and detail separate observations contain in the underlying data table. Instead, it is helping us prepare in advance a mastered down list of individual participation spells, which can provide a starting point for understanding program enrollment.\nIf you did want to capture additional information from the underlying PIRL data (for example, the job center at which individuals received their services), then you might need to add additional decision rules to your analysis to handle potential issue cases where, for example, multiple jobs centers are reported for the same person-program-spell combination. Even in this case, however, the data model should still be able to provide a valuable jumping off point for getting the underlying list of program participants that you need to create that mastered data for.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Module 2: Notebook 2Data Model Motivation</span>"
    ]
  },
  {
    "objectID": "02_data_model_motivation.html#fact_person_quarterly_program_enrollment",
    "href": "02_data_model_motivation.html#fact_person_quarterly_program_enrollment",
    "title": "Module 2: Notebook 2Data Model Motivation",
    "section": "fact_person_quarterly_program_enrollment",
    "text": "fact_person_quarterly_program_enrollment\nThe second fact table that we want to look at is the fact_person_quarterly_program_enrollment table. The purpose of this table is similar to the start and end date table we saw above: we want to reduce the variation and duplication in our different underlying data sources to a simplified table that helps us parse program participation over time. The difference is that the table above had one row per person-program-spell, where as this fact table is at the person-program-quarter level.\nTo understand this difference, consider an individual who has an Adult WIOA benefit spell beginning in April 2019 and ending in December of the same year. In the start and end date table above, this would represent a single observation, with the entry quarter marked as 2019-Q1 and the exit quarter marked as 2019-Q4. In this second fact table, however, this same spell would translate into three observations - one each for 2019-Q1, 2019-Q2, and 2019-Q3. This allows us to explicitly and easily see all the individuals enrolled in a program in a given quarter. Let’s see what it looks like now:\n\nSQL querydbplyr query\n\n\n\nselect * \nfrom tr_e2e.fact_person_quarterly_program_enrollment\norder by person_key, program_key, enrollment_quarter_key\nlimit 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\")) %&gt;%\n  arrange(person_key, program_key, enrollment_quarter_key) %&gt;%\n  head(n = 5) %&gt;%\n  collect()\n\n\n\n\nIn the output above, we see the person_key and program_key variables just as were in the prior fact table. Now, however, instead of having quarter keys for the start and end quarters, we have just one variable: enrollment_quarter_key. This captures each quarter that the individual described by person_key was enrolled in the program described by program_key. The remaining variables provide additional context for if the individual was enrolled the entire quarter.\nTo see the power of this, let’s first try to identify all the Adult WIOA participants (rather than just entrants) in 2019-Q4. To change things up, let’s start this time by first doing this using the underlying PIRL data. This seems like it should be pretty easy - we just need to select the distinct count of social security numbers reported where:\n\nThe adult_wioa field is not equal to zero (Adult WIOA participants)\nThe date of program entry is before January of 2020 (entered before or during 2019-Q4)\nThe date of program exit is after September of 2019 (exited during or after 2019-Q4)\n\nThat logic alone is a little complicated, but things actually get even worse. One tricky aspect of working with the PIRL data is that an individual’s data will first show up in the PIRL file when they first enroll in a WIOA program. The problem is that at this point, that individual hasn’t exited the program yet, so their program exit date is going to be missing!\nLet’s see an example of this:\n\nSQL querydbplyr query\n\n\n\nselect\n  social_security_number,\n  adult_wioa,\n  date_of_program_entry_wioa,\n  date_of_program_exit_wioa\nfrom ds_ar_dws.pirl \nwhere \n  social_security_number = 'REDACTED'\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"pirl\")) %&gt;%\n  filter(social_security_number == 'REDACTED') %&gt;%\n  select(\n    social_security_number, \n    adult_wioa, \n    date_of_program_entry_wioa, \n    date_of_program_exit_wioa\n  ) %&gt;%\n  collect()\n\n\n\n\nWe see that this individual has three records in the PIRL file, all corresponding to an Adult WIOA program enrollment. On the first observation, we see that the date_of_program_exit_wioa variable is missing - they haven’t yet exited the program! Then, later on, when the data is updated, another record is generated for this individual, showing their true exit date.\nThe problem here arises because sometimes this missing value is valid - an individual still actually is on the program! For example, if the individual from the example above had only the first row, then we would want to consider them as a valid participant for 2019-Q4, since as far as we would know, they would not have exited the program.\nThus to truly get the count of all participants for 2019-Q4 we need to take all individuals where:\n\nThe adult_wioa field is not equal to zero (Adult WIOA participants)\nThe date of program entry is before January of 2020 (entered before or during 2019-Q4)\nThe date of program exit is after September of 2019 (exited during or after 2019-Q4)\n\nOR the only reported date of program exit for a given start date is missing\n\n\nWe can implement that in code here, but it’s a bit of a mess:\n\nSQL querydbplyr query\n\n\n\nwith correctEndDates as (\n  select distinct \n    social_security_number, \n    date_of_program_entry_wioa, \n    max(date_of_program_exit_wioa) as date_of_program_exit_wioa\n  from ds_ar_dws.pirl \n  where adult_wioa != 0 \n  group by social_security_number,  date_of_program_entry_wioa \n)\nselect count(distinct social_security_number)\nfrom correctEndDates\nwhere \n  date_of_program_entry_wioa &lt;= '2019-12-31' and \n  (date_of_program_exit_wioa &gt;= '2019-10-01' or date_of_program_exit_wioa is NULL)\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dws\",\n                table = \"pirl\")) %&gt;% \n  filter(adult_wioa != '0 ') %&gt;%\n  group_by(social_security_number, date_of_program_entry_wioa) %&gt;%\n  summarize(\n    date_of_program_exit_wioa = max(date_of_program_exit_wioa, na.rm = TRUE)\n  ) %&gt;%\n  ungroup() %&gt;%\n  filter(\n    date_of_program_entry_wioa &lt;= '2019-12-31' &\n    (date_of_program_exit_wioa &gt;= '2019-10-01' | is.na(date_of_program_exit_wioa))\n  ) %&gt;%\n  select(social_security_number) %&gt;%\n  distinct() %&gt;%\n  tally() %&gt;%\n  collect()\n\n\n\n\nNow, in contrast, let’s try to find the same count using the data model. Here we just need to count the number of rows where program_key = 1 (Adult WIOA) and enrollment_quarter_key = 40 (2019-Q4).\n\nSQL querydbplyr query\n\n\n\nselect count(*)\nfrom tr_e2e.fact_person_quarterly_program_enrollment\nwhere \n  program_key = 1 and\n  enrollment_quarter_key = 40 \n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\")) %&gt;%\n  filter(program_key == 1 & enrollment_quarter_key == 40) %&gt;%\n  tally() %&gt;%\n  collect()\n\n\n\n\nSo, so much simpler.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Module 2: Notebook 2Data Model Motivation</span>"
    ]
  },
  {
    "objectID": "02_data_model_motivation.html#and-so-much-more",
    "href": "02_data_model_motivation.html#and-so-much-more",
    "title": "Module 2: Notebook 2Data Model Motivation",
    "section": "And so much more…",
    "text": "And so much more…\nAll of the examples we’ve seen above have used the PIRL data and been focused on Adult WIOA, and that provides a great motivating example for the power of the data model. But as a final piece of our motivation, we should also at least preview how much easier this data model makes our lives when it comes to record linkage as well.\nLet’s say we wanted to modify our example above to look at how many individuals participated in either Adult WIOA or SNAP in 2019-Q4. We won’t even begin to present here how you would handle this question without the data model - roughly, you would have to repeat all the calculations we did above on the raw SNAP file (dealing with any weird cases that arose there as well) and then try to combine that with our PIRL calculations to find the individuals that were in either. Using the data model, things are much simpler:\n\nSQL querydbplyr query\n\n\n\nselect count(distinct person_key)\nfrom tr_e2e.fact_person_quarterly_program_enrollment\nwhere \n  (program_key = 1 or program_key = 9)  and\n  enrollment_quarter_key = 40 \n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\")) %&gt;%\n  filter((program_key == 1 | program_key == 9) & enrollment_quarter_key == 40) %&gt;%\n  select(person_key) %&gt;% \n  distinct() %&gt;%\n  tally() %&gt;%\n  collect()",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Module 2: Notebook 2Data Model Motivation</span>"
    ]
  },
  {
    "objectID": "03_cross_section.html",
    "href": "03_cross_section.html",
    "title": "Module 2: Notebook 3Cross-Sectional Analysis",
    "section": "",
    "text": "4 Introduction\nWelcome to the third notebook for Module 2 of this course. This notebook will build on the data coverage and structure discussion in the exploratory data analysis notebook to a method rooted in a specific moment in time, a cross-section analysis, while presenting a component of the data model. A cross-section allows us to look at a slice of our data at a specific moment in time so we can evaluate the stock of observations, just at that particular snapshot. Through the remainder of the class notebooks, we will apply each topic to the same focused research topic, all aimed at identifying promising pathways for a specific set of TANF-enrolled individuals before COVID-imposed restrictions were enforced in the state.\nComposing a cross-section enables for broad understandings of volume and in this context, TANF recipient compositions. In addition, within this point in time, we can evaluate the prevalence of participation in multiple benefit programs and drill down into specific combinations. Especially from a benefit provider standpoint, it can be useful to understand common characteristics and situations of those receiving TANF benefits, regardless of benefit duration, particularly in evaluating scenarios that might lead to employment and self-sufficiency.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 2: Notebook 3Cross-Sectional Analysis</span>"
    ]
  },
  {
    "objectID": "03_cross_section.html#person-dimension-dim-person",
    "href": "03_cross_section.html#person-dimension-dim-person",
    "title": "Module 2: Notebook 3Cross-Sectional Analysis",
    "section": "Person Dimension: DIM Person",
    "text": "Person Dimension: DIM Person\nThe person table, located at tr_e2e.dim_person, stores information on the characteristics of people, including date of birth, gender, and race/ethnicity. Although it has two separate individual identifiers, person_key and person_uid, person_key is the only one to exist in other tables in the data model. person_key is a simplified version of person_uid, which refers to the hashed SSN of the individual and can be used to link to the various raw data tables.\nWe can take a look at a small subset of the table:\n\nSQL Querydbplyr query\n\n\n\nSELECT *\nFROM tr_e2e.dim_person\nORDER BY person_key\nLIMIT 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_person\")) %&gt;%\n  arrange(person_key) %&gt;%\n  head(5)\n\n\n\n\nNULL values refer to missing values or information not captured across the various data sources.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 2: Notebook 3Cross-Sectional Analysis</span>"
    ]
  },
  {
    "objectID": "03_cross_section.html#time-dimension-dim-year-quarter",
    "href": "03_cross_section.html#time-dimension-dim-year-quarter",
    "title": "Module 2: Notebook 3Cross-Sectional Analysis",
    "section": "Time Dimension: DIM Year Quarter",
    "text": "Time Dimension: DIM Year Quarter\nThe time dimension table is located at tr_e2e.dim_year_quarter and stores information about specific time periods. The surrogate key is the year_quarter_key, which is a simplified version of a specific year/quarter combination. The following query shows the fields in the table:\n\nSQL Querydbplyr query\n\n\n\nSELECT *\nFROM tr_e2e.dim_year_quarter\nORDER BY year_quarter_key\nLIMIT 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_year_quarter\")) %&gt;%\n  arrange(year_quarter_key) %&gt;%\n  head(5)\n\n\n\n\nWe see here that year_quarter_key 0 is associated with a nonsensical date in the year 9999, which suggests this is a missing data code.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 2: Notebook 3Cross-Sectional Analysis</span>"
    ]
  },
  {
    "objectID": "03_cross_section.html#program-dimension-dim-program",
    "href": "03_cross_section.html#program-dimension-dim-program",
    "title": "Module 2: Notebook 3Cross-Sectional Analysis",
    "section": "Program Dimension: DIM Program",
    "text": "Program Dimension: DIM Program\nThe program dimension table, tr_e2e.dim_program, is a reference table mapping the surrogate identifier in the fact table, program_key, to its longer program name. We can see the complete table with the following query:\n\nSQL Querydbplyr query\n\n\n\nSELECT *\nFROM tr_e2e.dim_program\nORDER BY program_key\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_program\")) %&gt;%\n  arrange(program_key)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 2: Notebook 3Cross-Sectional Analysis</span>"
    ]
  },
  {
    "objectID": "03_cross_section.html#fact-quarterly-enrollment-by-person-and-program",
    "href": "03_cross_section.html#fact-quarterly-enrollment-by-person-and-program",
    "title": "Module 2: Notebook 3Cross-Sectional Analysis",
    "section": "Fact: Quarterly Enrollment by Person and Program",
    "text": "Fact: Quarterly Enrollment by Person and Program\nAs mentioned above, the quarterly enrollment information by person and program is available in tr_e2e.fact_person_quarterly_program_enrollment. Each row is a unique combination of person, program, and enrollment, meaning that not only may a person in a program have potentially multiple rows in the data (one for each quarter they are enrolled), but they may also have multiple rows in a given quarter if they are enrolled in multiple programs at the same time. This table actually makes it very easy to examine concurrent participation across programs, as we will demonstrate later in this notebook.\n\nSQL Querydbplyr query\n\n\n\nSELECT *\nFROM tr_e2e.fact_person_quarterly_program_enrollment\nLIMIT 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\")) %&gt;%\n  head(5)\n\n\n\n\nNote the presence of the three surrogate columns linking to each of the dimension tables: person_key, program_key, and enrollment_quarter_key. Beyond this information, the table contains indicators denoting the enrollment patterns within the quarter, as most program information is tracked at least at the monthly level.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 2: Notebook 3Cross-Sectional Analysis</span>"
    ]
  },
  {
    "objectID": "03_cross_section.html#creating-a-cross-section",
    "href": "03_cross_section.html#creating-a-cross-section",
    "title": "Module 2: Notebook 3Cross-Sectional Analysis",
    "section": "Creating a Cross-section",
    "text": "Creating a Cross-section\nThe specific pre-COVID time frame we will focus on in this notebook is the first quarter of 2019. For context, in the EDA notebook, we graphed the number of observations over time for the person-level file, ds_ar_dhs.tanf_member. The blue area in the line plot below highlights the observations that will define our cross-section.\n\nNote: We are using tanf_member instead of tanf_case because our population of interest is individuals, not cases.\n\nOur cross-section comes roughly a year and a half after the peak in observations in the person-level TANF file. Looking forward, the number of rows continues to decrease over time, losing roughly half of the total number of observations by the start of the 2022 calendar year.\n\nUsing the original data source\nWe can define and derive our cross-section solely from the original person-level TANF data source. Before we do so, let’s remind ourselves of the basic layout of the file:\n\nSQL Querydbplyr query\n\n\n\nSELECT *\nFROM ds_ar_dhs.tanf_member\nLIMIT 5\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  head(5)\n\n\n\n\nSince the file contains observations at the social_security_number/reporting_month level, we should have enough information just using this table to define our cross-section by limiting reporting_month:\n\nSQL Querydbplyr query\n\n\n\nSELECT COUNT(*) as num_rows, COUNT(DISTINCT(social_security_number)) as num_ppl\nFROM ds_ar_dhs.tanf_member\nWHERE reporting_month in ('201901', '201902', '201903')\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(reporting_month %in% c(\"201901\", \"201902\", \"201903\")) %&gt;%\n  summarize(\n    num_rows = n(),\n    num_ppl = n_distinct(social_security_number)\n  )\n\n\n\n\nFor consistency with future work, where we will link observations across data sources by their hashed social security numbers, we will only consider observations with a validated hashed social security number as part of the cross-section. You may have noticed the column valid_ssn_format. It contains two values, either Y or N. We can add this condition to our pre-existing query:\n\nSQL Querydbplyr query\n\n\n\nSELECT COUNT(*) as num_rows, COUNT(DISTINCT(social_security_number)) as num_ppl\nFROM ds_ar_dhs.tanf_member\nWHERE reporting_month in ('201901', '201902', '201903') AND \n  valid_ssn_format = 'Y'\n\n\n\n\ncon %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(\n    reporting_month %in% c(\"201901\", \"201902\", \"201903\"),\n    valid_ssn_format == 'Y'\n  ) %&gt;%\n  summarize(\n    num_rows = n(),\n    num_ppl = n_distinct(social_security_number)\n  )\n\n\n\n\nNote that even though we have attempted to remove the time dimension by limiting our focus to TANF recipients in 2019Q1, since the TANF data is recorded at the monthly grain, and not quarterly, there may be some individuals appearing in the data during multiple months within the quarter. This is indicated by comparing the difference in the number of rows and unique individuals.\nWe can then read this into R for further analysis:\n\nThe code in the SQL query can be run in DBeaver by pasting just the code inside the quotations after qry &lt;-\n\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\nSELECT *\nFROM ds_ar_dhs.tanf_member\nWHERE reporting_month in ('201901', '201902', '201903') AND\n  valid_ssn_format = 'Y'\n\"\ncross_section_ods &lt;- dbGetQuery(con, qry)\n\nhead(cross_section_ods)\n\n\n\n\ncross_section_ods &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(\n    reporting_month %in% c(\"201901\", \"201902\", \"201903\"),\n    valid_ssn_format == 'Y'\n  ) %&gt;% \n  # bring into R \n  collect()\n\nhead(cross_section_ods)\n\n\n\n\n\n\nUsing the fact table\nSince the fact_person_quarterly_program_enrollment table already separates out information by person, program, and quarter, our query for identifying TANF recipients in 2019Q1 only requires two inner joins to the dim_program and dim_year_quarter dimension tables:\n\nSQL Querydbplyr query\n\n\n\nSELECT COUNT(*) as num_rows, COUNT(DISTINCT(fact.person_key)) as num_ppl\nFROM tr_e2e.fact_person_quarterly_program_enrollment fact \n--INNER JOIN WORKS BECAUSE DIM TABLES CONTAIN ALL POSSIBLE VALUES IN FACT\nJOIN tr_e2e.dim_program dp ON (dp.program_key = fact.program_key)\nJOIN tr_e2e.dim_year_quarter dyq ON \n  (fact.enrollment_quarter_key = dyq.year_quarter_key)\n--WHERE IS OKAY TO USE BECAUSE AN INNER JOIN\n--BE CAREFUL USING 'WHERE' WITH A LEFT OR OUTER JOIN\nWHERE dp.program_name = 'Temporary Assistance for Needy Families (TANF)' AND \n  dyq.calendar_year = '2019' AND dyq.calendar_quarter = '1'\n\n\n\n\nfact &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\"))\n\ndp &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_program\")) %&gt;%\n  filter(program_name == \"Temporary Assistance for Needy Families (TANF)\")\n\ndyq &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_year_quarter\")) %&gt;%\n  filter(calendar_year == '2019', calendar_quarter == '1')\n\nfact %&gt;%\n  inner_join(dp, by = \"program_key\") %&gt;%\n  inner_join(dyq, by = c(\"enrollment_quarter_key\" = \"year_quarter_key\")) %&gt;%\n  summarize(\n    num_rows = n(),\n    num_ppl = n_distinct(person_key)\n  )\n\n\n\n\nIn fact, if you compare the number of unique people retrieved in this query to that using the original data source, you will see we have the same number of people! Additionally, since the fact table stores observations quarterly, and not monthly, we only have one row per person. If you refer to the “Fact Table Explainers” guide available on the Class Resources page of the website, you will see that we adhered to the same rules in working with the tanf_member file that were used to populate this fact table. Let’s take a look at the resulting structure of the merged table:\n\nSQL Querydbplyr query\n\n\n\nSELECT fact.*, dp.program_name, dyq.quarter_start_date, dyq.quarter_end_date\nFROM tr_e2e.fact_person_quarterly_program_enrollment fact \nJOIN tr_e2e.dim_program dp ON (dp.program_key = fact.program_key)\nJOIN tr_e2e.dim_year_quarter dyq ON \n  (fact.enrollment_quarter_key = dyq.year_quarter_key)\nWHERE dp.program_name = 'Temporary Assistance for Needy Families (TANF)' AND \n  dyq.calendar_year = '2019' AND dyq.calendar_quarter = '1'\nLIMIT 5\n\n\n\n\nfact &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\"))\n\ndp &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_program\")) %&gt;%\n  filter(program_name == \"Temporary Assistance for Needy Families (TANF)\")\n\ndyq &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_year_quarter\")) %&gt;%\n  filter(calendar_year == '2019', calendar_quarter == '1') %&gt;%\n  # don't need these variables\n  select(-c(calendar_year, calendar_quarter))\n\nfact %&gt;%\n  inner_join(dp, by = \"program_key\") %&gt;%\n  inner_join(dyq, by = c(\"enrollment_quarter_key\" = \"year_quarter_key\")) %&gt;%\n  head(5)\n\n\n\n\nWith a join to the person dimension table, little bit of date manipulation, and logic for aggregating the different race/ethnicity columns into one larger variable, we can pull in a data frame to facilitate our next goal, evaluating the race/ethnicity and age compositions of the cross-section:\n\nNote: We are calculating age relative to the start of the quarter.\n\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\nSELECT fact.*\n, dp.program_name\n, dyq.quarter_start_date\n, dyq.quarter_end_date\n, dper.date_of_birth\n--DATEDIFF FINDS DIFFERENCE BETWEEN TWO DATES, AND REDSHIFT ROUNDS DOWN\n, DATEDIFF(quarter, dper.date_of_birth, dyq.quarter_start_date)/4 as age \n, CASE\n    WHEN dper.ethnicity_american_indian_or_alaska_native = 'Yes' THEN 'AIAN' \n    WHEN dper.ethnicity_black_or_african_american = 'Yes' THEN 'AfAm'\n    WHEN dper.ethnicity_hispanic_or_latino= 'Yes' THEN 'Hisp'\n    WHEN dper.ethnicity_asian = 'Yes' THEN 'Asian'\n    WHEN dper.ethnicity_white = 'Yes' THEN 'Wht'\n    WHEN dper.ethnicity_other ='Yes' THEN 'Other' \n    ELSE 'Missing' \n END AS eth_recode\nFROM tr_e2e.fact_person_quarterly_program_enrollment fact\nJOIN tr_e2e.dim_program dp ON (dp.program_key = fact.program_key)\nJOIN tr_e2e.dim_year_quarter dyq \n    ON (fact.enrollment_quarter_key = dyq.year_quarter_key)\nJOIN tr_e2e.dim_person dper ON (dper.person_key = fact.person_key)\nWHERE dp.program_name = 'Temporary Assistance for Needy Families (TANF)' AND\n  dyq.calendar_year = '2019' AND dyq.calendar_quarter = '1'\nORDER BY dper.person_key\n\"\n\ncross_section_fact &lt;- dbGetQuery(con, qry) %&gt;%\n# redshift using SQL code converts to character automatically, so need to recast as numeric\n  mutate(\n    age = as.numeric(age)\n  )\n\nhead(cross_section_fact)\n\n\n\n\nfact &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\"))\n\ndp &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_program\")) %&gt;%\n  filter(program_name == \"Temporary Assistance for Needy Families (TANF)\")\n\ndyq &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_year_quarter\")) %&gt;%\n  filter(calendar_year == '2019', calendar_quarter == '1') %&gt;%\n  # don't need these variables\n  select(-c(calendar_year, calendar_quarter))\n\ndper &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_person\")) %&gt;%\n  mutate(\n    eth_recode = case_when(\n      ethnicity_american_indian_or_alaska_native == 'Yes' ~ 'AIAN',\n      ethnicity_black_or_african_american == 'Yes' ~ 'AfAm',\n        ethnicity_hispanic_or_latino == 'Yes' ~ 'Hisp',\n        ethnicity_asian == 'Yes' ~ 'Asian',\n        ethnicity_white == 'Yes' ~ 'Wht',\n        ethnicity_other == 'Yes' ~ 'Other', \n        TRUE ~ 'Missing'\n    )\n  ) %&gt;%\n  # keep only relevant columns\n  select(person_key, date_of_birth, eth_recode)\n\ncross_section_fact &lt;- fact %&gt;%\n  inner_join(dp, by = \"program_key\") %&gt;%\n  inner_join(dyq, by = c(\"enrollment_quarter_key\" = \"year_quarter_key\")) %&gt;%\n  inner_join(dper, by = \"person_key\") %&gt;%\n  arrange(person_key) %&gt;%\n  # take floor to round down to integer like redshift using SQL code \n  mutate(age = floor(datediff(sql(\"QUARTER\"), date_of_birth, quarter_start_date)/4)) %&gt;%\n  collect() \n\nhead(cross_section_fact)\n\n\n\n\nWhile we could proceed with our cross_section_ods file, using the data model allows us to leverage the dim_person table containing our golden records of time invariant variables, as opposed to working with the separate TANF microdata, which may contain some discrepancies across months for the same person. We read the results of the resulting query into R since moving forward, the methods we will apply require manipulation and visualization either not easily executable or not accessible in SQL relative to R.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 2: Notebook 3Cross-Sectional Analysis</span>"
    ]
  },
  {
    "objectID": "03_cross_section.html#analysis",
    "href": "03_cross_section.html#analysis",
    "title": "Module 2: Notebook 3Cross-Sectional Analysis",
    "section": "Analysis",
    "text": "Analysis\nWith our cross-section identified, we can proceed with our analysis. Keep in mind that the variables we explore in the following subsections represent only a subset of possible comparison groups.\n\nRace/Ethnicity\nWe can start by looking at our combined race/ethnicity variable, eth_recode.\n\nNote: CASE WHEN in SQL (case_when() in R) will stop evaluating the row after the first WHEN clause to return TRUE. In the code, for example, if ethnicity_asian and ethnicity_white were both 'yes', the individual will be assigned an eth_recode value of Asian.\n\n\ncross_section_fact %&gt;% \n  group_by(eth_recode) %&gt;% \n  summarise(npersons = n_distinct( person_key )) %&gt;% \n  # ungroup so we can take the percentage with denominator as all in next step\n  ungroup() %&gt;% \n  mutate(pct = 100 * (npersons / sum( npersons )))\n\nInstead of visualizing this distribution using a common bar plot, we can opt for the more adventurous lollipop plot, which uses the geom_point and geom_segment geometries.\n\ncross_section_fact %&gt;% \n  group_by(eth_recode) %&gt;% \n  summarise(npersons = n_distinct( person_key )) %&gt;% \n  ungroup() %&gt;% \n  mutate(pct = 100 * (npersons / sum( npersons ))) %&gt;% \n  ggplot(aes(y =pct,\n             x=eth_recode))+\n  geom_point() +\n  # line should go from 0 to the percentage for each group\n  geom_segment(aes(y = 0, yend = pct, x = eth_recode, xend = eth_recode)) +\n  # x- and y-axes are flipped\n  coord_flip() +\n  labs(title = \"Percentage of TANF Recipients by Race/Ethnicity\",\n       subtitle = \"Cross-section of participants in Q1 2019\")\n\nWe can see that the vast majority of TANF recipients in the first quarter of 2019 were categorized as either African American or White.\n\n\nAge\nWe can treat age as a continuous variable, visualizing the distribution using a histogram:\n\ncross_section_fact %&gt;%\n  ggplot(aes(x=age)) +\n  geom_histogram()\n\nWhile this distribution plot is somewhat useful, we can get a more exact understanding of the distribution by grouping age into separate 5-year intervals:\n\ncross_section_fact %&gt;% \n  # chose range greater than overall distribution to ensure all are captured\n  mutate(age_group = cut(age, breaks = seq(0, 110, 5), include.lowest = T)) %&gt;% \n  group_by(age_group) %&gt;% \n  summarise(npersons = n_distinct( person_key )) %&gt;% \n  ungroup() %&gt;% \n  mutate(pct = 100 * (npersons / sum( npersons ))) \n\nFrom this we see the highest percentage of recipients in this quarter is between 25 and 30 years of age. Since we plan on eventually analyzing workforce outcomes, let’s get a sense of the youngest and oldest individuals in the cross-section:\n\ncross_section_fact %&gt;%\n  summarize(\n    youngest = min(age),\n    oldest = max(age)\n  )\n\nJust from an age standpoint, the cross-section seems to be satisfactory from a workforce-eligibility standpoint on the lower end. However, moving forward, we might want to add an additional condition to narrow in on only those deemed workforce-eligible.\n\n\nConcurrent Participation\nAbove, we developed a cross-section just focusing on TANF recipients. But what if we are interested in looking at concurrent participation across multiple programs within our cross-section of TANF recipients?\nWe can do so leveraging the fact_person_quarterly_program_enrollment table. In the following query, we restrict all potential observations those in the 2019Q1 TANF cross-section, adding additional information if they were enrolled in SNAP or Adult Education at the same time. We could expand this to include all other programs, but for the ease of interpretation, we will just focus on these programs in this example. This is where we really get to witness the power of the data model. Imagine if we had to do all of this linkage across the original SNAP and PIRL data sources!\n\nThere are two program_name values pertaining to Adult Education in the fact table. We will only focus on program_name = Adult Education (JOINT) because the Joint PIRL table is more complete than the Adult Education information tracked in the regular PIRL file. The Adult Education information from the PIRL file is accessible in the data model by setting program_name = Adult Education (WIOA).\n\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\nWITH tanf AS (\n  --CROSS SECTION OF 2019Q1 TANF PARTICIPANTS\n    SELECT dper.person_key\n    FROM tr_e2e.fact_person_quarterly_program_enrollment fact\n  JOIN tr_e2e.dim_program dp ON (dp.program_key = fact.program_key)\n  JOIN tr_e2e.dim_year_quarter dyq \n    ON (fact.enrollment_quarter_key = dyq.year_quarter_key)\n  JOIN tr_e2e.dim_person dper ON (dper.person_key = fact.person_key)\n  WHERE dp.program_name = 'Temporary Assistance for Needy Families (TANF)' AND\n    dyq.calendar_year = '2019' AND dyq.calendar_quarter = '1'\n),\nadult_snap AS (\n  --CROSS SECTION OF 2019Q1 SNAP AND ADULT EDUCATION PARTICIPANTS\n    SELECT dper.person_key,\n    fact.program_key \n    FROM tr_e2e.fact_person_quarterly_program_enrollment fact\n  JOIN tr_e2e.dim_program dp ON (dp.program_key = fact.program_key)\n  JOIN tr_e2e.dim_year_quarter dyq \n    ON (fact.enrollment_quarter_key = dyq.year_quarter_key)\n  JOIN tr_e2e.dim_person dper ON (dper.person_key = fact.person_key)\n    WHERE dp.program_name IN ('Supplemental Nutrition Assistance Program (SNAP)', 'Adult Education (JOINT)') AND \n    dyq.calendar_year = '2019' AND dyq.calendar_quarter = '1'\n)\nSELECT tanf.*, adult_snap.program_key \nFROM tanf \n--LEFT JOIN KEEPS EVERYONE FROM TANF. IF THEY DON'T JOIN THEY HAVE NA PROGRAM_KEY\nLEFT JOIN adult_snap \n  ON (tanf.person_key = adult_snap.person_key)\nORDER BY tanf.person_key, program_key\n\"\n\nco_xsection &lt;- dbGetQuery(con, qry)\n\nhead(co_xsection)\n\n\n\n\nfact &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\"))\n\ndp &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_program\")) %&gt;%\n  filter(program_name == \"Temporary Assistance for Needy Families (TANF)\")\n\ndyq &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_year_quarter\")) %&gt;%\n  filter(calendar_year == '2019', calendar_quarter == '1') %&gt;%\n  # don't need these variables\n  select(-c(calendar_year, calendar_quarter))\n\ndper &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_person\"))\n\n# cross-section of 2019Q1 tanf participants\ntanf &lt;- fact %&gt;%\n  inner_join(dp, by = \"program_key\") %&gt;%\n  inner_join(dyq, by = c(\"enrollment_quarter_key\" = \"year_quarter_key\")) %&gt;%\n  inner_join(dper, by = \"person_key\") %&gt;%\n  select(person_key)\n\ndp_as &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_program\")) %&gt;%\n  filter(program_name %in% c(\"Supplemental Nutrition Assistance Program (SNAP)\", \"Adult Education (JOINT)\"))\n\n# cross-section of 2019Q1 snap and adult education participants\nadult_snap &lt;- fact %&gt;%\n  inner_join(dp_as, by = \"program_key\") %&gt;%\n  inner_join(dyq, by = c(\"enrollment_quarter_key\" = \"year_quarter_key\")) %&gt;%\n  inner_join(dper, by = \"person_key\") %&gt;%\n  select(person_key, program_key)\n\nco_xsection &lt;- tanf %&gt;%\n  # left_join keeps everyone from tanf. if they don't join they have NA program_key\n  left_join(adult_snap, by = \"person_key\") %&gt;%\n  arrange(person_key, program_key) %&gt;%\n  collect()\n\nhead(co_xsection)\n\n\n\n\nWe can confirm that our join worked as intended by comparing the number of unique person_key values in co_xsection to that of cross_section_fact.\n\nco_xsection %&gt;%\n  summarize(\n    n_rows = n(), \n    n_people = n_distinct(person_key)\n  )\n\nWe can see that we have the same number of people as before, which aligns with the logic of our left join. Additionally, we see that we do not have exactly one row per person - and that is okay! We may have multiple rows per person_key if the individual is concurrently participating in all three programs in 2019Q1. In fact, the structure of co_xsection may not be as clear as we would like, but it does adhere to the rules of the joining mechanism. Let’s take a look at the possible values of program_key:\n\nco_xsection %&gt;%\n  distinct(program_key)\n\nGiven that TANF corresponds to program_key = 10, it may be surprising to see that there are not any observations with this value. But again, this is due to the nature of the join - every individual in co_xsection is enrolled in TANF! This means that if they have a NULL program_key value, the individual only received TANF benefits in 2019Q1. Otherwise, if they have a non-null program_key, then in addition to receiving TANF benefits, they also participated in a separate benefit program.\nWith some manipulation, we can aggregate this table to categorize the nature of concurrent participation, or lack thereof:\n\n# identify those in all three programs\n# will have two rows in data frame\nall_three &lt;- co_xsection %&gt;%\n  group_by(person_key) %&gt;%\n  summarize(\n    n = n()\n  ) %&gt;%\n  filter(n &gt; 1) %&gt;%\n  ungroup()\n\n# of all either in just TANF or TANF + either SNAP or Adult Ed\nnot_three &lt;- co_xsection %&gt;%\n  # anti_join ignores all observations in all_three\n  anti_join(all_three, by = 'person_key') %&gt;%\n  group_by(program_key) %&gt;%\n  summarize(\n    n = n_distinct(person_key)\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    program_name = case_when(\n      program_key == 9 ~ \"TANF + SNAP\",\n      program_key == 12 ~ \"TANF + Adult ED Joint\",\n      is.na(program_key) ~ \"TANF\",\n      TRUE ~ \"missing\"\n    )\n  ) %&gt;%\n  select(-program_key)\n\nnot_three %&gt;%\n  add_row(\n    # each person is a row in all_three\n    n = nrow(all_three), \n    program_name = \"TANF + SNAP + Adult ED Joint\"\n  ) %&gt;%\n  mutate(perc = 100*n/sum(n)) %&gt;%\n  arrange(desc(perc)) %&gt;%\n  # rearrange columns to bring program name to front\n  select(program_name, everything())\n\nWe can visualize this output using a treemap. Unfortunately, a treemap is not a default geometry available in ggplot2 (loaded with library(tidyverse)), but there are thankfully other libraries available in R to create them. In fact, besides the treemap package we will be using below, there is a separate treemapify package that integrates with the overall ggplot2 framework. We will be using treemap because the default image is a tad cleaner. That being said, the treemapify approach may be a bit more flexible.\n\n#load treemap package\nlibrary(treemap)\n\n# if using treemapify \n#library(treemapify)\n\nnot_three %&gt;%\n  add_row(\n    # each person is a row in all_three\n    n = nrow(all_three), \n    program_name = \"TANF + SNAP + Adult ED Joint\"\n  ) %&gt;%\n  treemap(index = \"program_name\", vSize = \"n\")\n\nInteresting! Between the output table and treemap, we can see that the majority of individuals receiving TANF benefits in 2019Q1 were also participating in SNAP at the same time as well.\n\n\n\n\n\n\nCheckpoint\n\n\n\nNow that we have demonstrated a use case of the quarterly program participation fact table, think about how your team may use this table in your project. Are there particular programs that you are interested in? How could you modify the code in this notebook to suit the time period, demographic group, and set of participants in which you are interested?",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 2: Notebook 3Cross-Sectional Analysis</span>"
    ]
  },
  {
    "objectID": "04_longitudinal_analysis.html",
    "href": "04_longitudinal_analysis.html",
    "title": "Longitudinal Analysis",
    "section": "",
    "text": "5 Introduction\nWelcome to the fourth notebook of Module 2, where will expand our focus to a framework that facilitates longitudinal investigations, a cohort analysis. In doing so, we will reintroduce a fact table initially discussed in the second notebook that tracks individuals at the program level by their spells, or episodes of service. Here, we will develop a cohort analysis to help address our same focused research topic introduced in the previous notebook, which is aimed at identifying promising pathways for a specific set of TANF-enrolled individuals before COVID-imposed restrictions were enforced in the state.\nPreviously, we applied a cross-sectional analysis to the TANF data, which allowed us to better understand the volume of individuals enrolled in TANF at a specific moment in time. Since cross-sections are restricted to particular snapshots, and do not account for shocks though, they are limited in providing a framework for tracking experiences over time. Contrast this approach to that of a cohort analysis. In creating a cohort, we will denote a reference point where each member of our cohort experienced a common event - this could be entry into a program, exit from a program, or any other shared experience across a set of observations. With this setup, we can better understand and compare the experiences of those encountering the same policies and economic shocks at the same time, especially across different subgroups, or even cohorts.\nWhereas a cross-section evaluates a stock, a cohort lets us look at flows. Within the context of our research topic, focusing on flows will help us identify promising pathways for TANF recipients by evaluating the outcomes of those previously receiving TANF benefits, which gets at the goal of our mini research project.\nHere, we will reintroduce the code required to set up our R environment to connect to the proper database and load certain packages. If you would rather plan on running the SQL code separately, instructions for creating a .sql script and running the code directly in DBeaver are also available allow.\nCode chunks in this notebook will be given in both SQL and R, so follow the setup that applies to your preferred language below.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Longitudinal Analysis</span>"
    ]
  },
  {
    "objectID": "04_longitudinal_analysis.html#cohort-creation",
    "href": "04_longitudinal_analysis.html#cohort-creation",
    "title": "Longitudinal Analysis",
    "section": "Cohort Creation",
    "text": "Cohort Creation\nBefore writing code for creating and exploring our cohort, it is crucial to think through the decisions from a data literacy standpoint. Again, the key idea here is to define a set of individuals with a consistent “anchor point” in the data so we can follow them longitudinally. Specifically, given our aim in the notebook series, we want to identify a group of TANF recipients before COVID-imposed restrictions were enforced in the state so we can track them over time.\nFirst, we have to think through the underlying set of observations we want to track over time and where they exist. Fundamentally, this ties back to identifying our original population of interest.\n\nPrimary Data Source(s)\nIn this class, we luckily have a bunch of options for tracking individuals longitudinally (PIRL, Joint PIRL, TANF, SNAP, Higher Education, etc.). In any case, if we choose to focus on one base dataset, it will limit the scope of potential observations. For instance, if we develop our cohort on the PIRL data, then each member of our cohort must have been involved in a WIOA Title I or III program at some point in time. In revisiting our research question, it seems that our population of interest should be rooted in the TANF data. More specifically, the tanf_member file is most appropriate, since our focus is on individuals, not cases.\n\nNote: In this class, since we have access to many potentially overlapping longitudinal datasets, you might want to develop a cohort based on multiple sources. For example, if you are interested in those co-enrolled in SNAP and TANF, your data will rely on the intersection of the SNAP and TANF data.\n\n\n\nDefining Characteristics: General\nNow that we have identified our primary data source, we next need to decide how we are going to filter the millions of observations in our TANF data to a useful subset for analysis. The decision rules for your cohort will vary based on your population of interest and research question, but generally, could include:\n\nCategorical decisions: You might focus on certain characteristics. Some may be based on already provided categorical variables (like filtering for only work-eligible recipients), with others on certain conditions derived from numeric variables (like filtering for only recipients on cases receiving child care support over a certain amount)\nTime-based decisions: Because a cohort is defined by a timetable, you will need to limit your cohort to only a particular starting period or periods. You might also want to include a cutoff date for observations, or add other time-based controls to your cohort. As you are considering a cutoff date, you should consider the measures you would like to apply to your cohort, and the data coverage required to support them. For example, if you wanted to look at a more recent set of TANF recipients, you will be limited by the range of UI wage records in evaluating future employment outcomes.\n\nIn addition to these types of decisions, you might also need to exclude certain individuals from your cohort based on issues or inaccuracies in the underlying data. These could include inaccuracies in something like birth dates or missing data. We will talk more specifically about how to handle these inaccuracies later, but it is something to keep in mind as you begin planning your cohort with your team.\n\n\nDefining Characteristics: Applying them to our Data\nSince we will eventually want to explore employment pathways of TANF recipients, we will filter the TANF data in the ways described below to develop our cohort. Note that some of these constraints are only able to be executed on the original data sources (tanf_member unless otherwise designated), and not in the data model, since the data model does not the entire set of attributes available in the TANF file.\n\nNote: We will demonstrate how to link the original data source table to the data model later on in this notebook.\n\n\nCategorical decision rules:\n\nValidated hashed social security numbers, valid_ssn_format = 'Y'\nNot a child-only case, child_only_case = FALSE in tanf_case\nIndividual is eligible for work, `work_eligible_individual in ‘(’1’, ‘2’, ‘3’, ‘4’, ‘5’)’\nIndividual is included in the work participation rate, cast(work_participation_status as numeric) between 12 and 98\n\nTime-based decision rules:\n\nRecipients who completed their TANF spell, tanf_end_of_spell = 'TRUE', in the first quarter of 2019, reporting_month in ('201901', '201902', '201903')\n\n\nBy limiting our cohort to TANF exiters in 2019Q1, we ensure that all individuals completed a spell before COVID-imposed restrictions were enforced in the state. In addition, we will be able to evaluate subsequent short-term employment outcomes before COVID-imposed restrictions were enforced in the state. Note that this cohort makes up a portion of the overall cross-section we analyzed in the previous notebook.\n\nNote: Alternatively, we could define a cohort of TANF recipients based on their start date. This would result in different implications for outcome measures.\n\nLet’s apply these decision rules to the TANF data, joining the tanf_case and tanf_member data on common case_id and reporting_month values, and see how many people and rows we return:\n\nSQL Querydbplyr query\n\n\n\nSELECT COUNT(tm.*) AS num_rows, COUNT(DISTINCT(tm.social_security_number)) AS num_ppl\nFROM ds_ar_dhs.tanf_member tm \nJOIN ds_ar_dhs.tanf_case tc ON \n  (tm.case_id = tc.case_id AND tm.reporting_month = tc.reporting_month)\nWHERE tm.valid_ssn_format = 'Y' AND\n  tc.child_only_case = 'FALSE' AND \n    tm.work_eligible_individual IN ('1', '2', '3', '4', '5') AND \n    CAST(work_participation_status AS NUMERIC) BETWEEN 12 AND 98 AND\n    tm.tanf_end_of_spell = 'TRUE' AND\n    tm.reporting_month IN ('201901', '201902', '201903')\n\n\n\n\ntm &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(\n    valid_ssn_format == 'Y',\n    work_eligible_individual %in% c('1', '2', '3', '4', '5'),\n    between(as.numeric(work_participation_status), 12, 98),\n    tanf_end_of_spell == \"TRUE\",\n    reporting_month %in% c(\"201901\", \"201902\", \"201903\")\n  )\n\ntc &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_case\")) %&gt;%\n  filter(child_only_case == \"FALSE\")\n\ntm %&gt;%\n  inner_join(tc, by = c(\"case_id\", \"reporting_month\")) %&gt;%\n  summarize(\n    num_rows = n(),\n    num_ppl = n_distinct(social_security_number)\n  )\n\n\n\n\nRecall that we encountered a similar issue in developing our cross-section with the original data source, because the TANF data is recorded monthly, and not quarterly. Here, we see some instances of an individual having multiple spell exits within this quarter. Even though the fact table records information at the quarterly grain, we would still see multiple rows for an individual if they had different spells within the same quarter. To make sure we are not overweighting our analysis and accounting for individuals who have multiple spells, we will focus on an individual’s last, or most recent, spell within this time frame.\nWe can isolate the most recent spell per individual this time frame by assigning a sequential integer to each row based on the order of reporting_month for each social_security_number, and then take the most recent one. Let’s confirm this logic:\n\nSQL Querydbplyr query\n\n\n\n--USE CTE, FIRST ASSIGNING EACH OBSERVATION BY PERSON BASED ON ORDER\n--THEN SELECT ONLY MOST RECENT OBSERVATION PER PERSON\nWITH ordering AS (\n  SELECT tm.*, \n    --ROW_NUMBER() ASSIGNS A SEQUENTIAL INTEGER WITHIN EACH PARTITION (social_security_number)\n    --ORDERING IS DETERMINED BY THE ORDER BY (tm.reporting_month DESC)\n    ROW_NUMBER() OVER (PARTITION BY tm.social_security_number ORDER BY tm.reporting_month DESC) AS latest_order\n  FROM ds_ar_dhs.tanf_member tm \n  JOIN ds_ar_dhs.tanf_case tc ON \n    (tm.case_id = tc.case_id AND tm.reporting_month = tc.reporting_month)\n  WHERE tm.valid_ssn_format = 'Y' AND\n    tc.child_only_case = 'FALSE' AND \n    tm.work_eligible_individual IN ('1', '2', '3', '4', '5') AND \n    CAST(work_participation_status AS NUMERIC) BETWEEN 12 AND 98 AND\n    tm.tanf_end_of_spell = 'TRUE' AND\n    tm.reporting_month IN ('201901', '201902', '201903')\n)\nSELECT COUNT(*) AS num_rows, COUNT(DISTINCT(social_security_number)) AS num_ppl\nFROM ordering\nWHERE latest_order = 1\n\n\n\n\n# first assign each observation by person based on order and then filter for only\n# most recent observation\ntm &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(\n    valid_ssn_format == 'Y',\n    work_eligible_individual %in% c('1', '2', '3', '4', '5'),\n    between(as.numeric(work_participation_status), 12, 98),\n    tanf_end_of_spell == \"TRUE\",\n    reporting_month %in% c(\"201901\", \"201902\", \"201903\")\n  ) %&gt;%\n  group_by(social_security_number) %&gt;%\n  # window_order() assigns ordering within each group using a SQL window function\n  window_order(desc(reporting_month)) %&gt;%\n  # row_number() assigns a sequential integer within each group (social_security_number)\n  mutate(latest_order = row_number()) %&gt;%\n  ungroup() %&gt;%\n  filter(latest_order == 1)\n\ntc &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_case\")) %&gt;%\n  filter(child_only_case == \"FALSE\")\n\ntm %&gt;%\n  inner_join(tc, by = c(\"case_id\", \"reporting_month\")) %&gt;%\n  summarize(\n    num_rows = n(),\n    num_ppl = n_distinct(social_security_number)\n  )\n\n\n\n\nFantastic! For context, in the cross-section notebook, we focused our analysis on the following amount of individuals, all of whom received TANF benefits at some point within 2019Q1:\nWith some manual math, we can see that our refined cohort of exiters represents approximately REDACTED of all TANF participants enrolled in the quarter.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Longitudinal Analysis</span>"
    ]
  },
  {
    "objectID": "04_longitudinal_analysis.html#analysis",
    "href": "04_longitudinal_analysis.html#analysis",
    "title": "Longitudinal Analysis",
    "section": "Analysis",
    "text": "Analysis\nAt this point, we have an initial cohort cross-section - that is observations for just our cohort at a single point in time. In this case, that point in time corresponds to their exit, which is in 2019Q1. Before pulling in any past observations, let’s glance at our resulting data frame, reading it into R for future use:\n\nThe code in the SQL query can be run in DBeaver by pasting just the code inside the quotations after qry &lt;-.\n\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\n--USE CTE, FIRST ASSIGNING EACH OBSERVATION BY PERSON BASED ON ORDER\n--THEN SELECT ONLY MOST RECENT OBSERVATION PER PERSON\nWITH ordering AS (\n  SELECT tm.*, \n    --ROW_NUMBER() ASSIGNS A SEQUENTIAL INTEGER WITHIN EACH PARTITION (social_security_number)\n    --ORDERING IS DETERMINED BY THE ORDER BY (tm.reporting_month DESC)\n    ROW_NUMBER() OVER (PARTITION BY tm.social_security_number ORDER BY tm.reporting_month DESC) AS latest_order\n  FROM ds_ar_dhs.tanf_member tm \n  JOIN ds_ar_dhs.tanf_case tc ON \n    (tm.case_id = tc.case_id AND tm.reporting_month = tc.reporting_month)\n  WHERE tm.valid_ssn_format = 'Y' AND\n    tc.child_only_case = 'FALSE' AND \n    tm.work_eligible_individual IN ('1', '2', '3', '4', '5') AND \n    CAST(work_participation_status AS NUMERIC) BETWEEN 12 AND 98 AND\n    tm.tanf_end_of_spell = 'TRUE' AND\n    tm.reporting_month IN ('201901', '201902', '201903')\n)\nSELECT *\nFROM ordering\nWHERE latest_order = 1\n\"\n\n# ods to designate from tanf data and not data model\ncohort_ods &lt;- dbGetQuery(con, qry) %&gt;%\n  # ignore latest_order since it's not needed anymore\n  select(-latest_order)\n\nhead(cohort_ods)\n\n\n\n\ntm &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(\n    valid_ssn_format == 'Y',\n    work_eligible_individual %in% c('1', '2', '3', '4', '5'),\n    between(as.numeric(work_participation_status), 12, 98),\n    tanf_end_of_spell == \"TRUE\",\n    reporting_month %in% c(\"201901\", \"201902\", \"201903\")\n  ) %&gt;%\n  group_by(social_security_number) %&gt;%\n  # window_order() assigns ordering within each group using a SQL window function\n  window_order(desc(reporting_month)) %&gt;%\n  # row_number() assigns a sequential integer within each group (social_security_number)\n  mutate(latest_order = row_number()) %&gt;%\n  ungroup() %&gt;%\n  filter(latest_order == 1) %&gt;%\n  select(-latest_order)\n\ntc &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_case\")) %&gt;%\n  filter(child_only_case == \"FALSE\") %&gt;%\n  # only include columns on join so only returning columns from tm in join\n  select(case_id, reporting_month)\n\n# ods to designate from tanf data and not data model\ncohort_ods &lt;- tm %&gt;%\n  inner_join(tc, by = c(\"case_id\", \"reporting_month\")) %&gt;%\n  collect()\n\nhead(cohort_ods)\n\n\n\n\nInterestingly enough, the Chapin Hall data model does include some variables accounting for cumulative time. For now, we will limit our analysis to these variables.\n\nIf you were interested in a cumulative statistic not currently tracked in the model, like total number of vocational education training hours, you would need to find all observations between the month corresponding to the end of the spell and the closest reporting_month where tanf_start_of_spell = TRUE.\n\n\nTime on TANF\nAs you might have seen, two of the cumulative variables tracked our current cohort data frame are tanf_spell_months and tanf_total_months. We can explore the distribution of both of these variables, first tabularly and then visually. We will start with tanf_spell_months:\n\nbenefit_spell_months and tanf_total_months should also be the same as tanf_spell_months and tanf_total_months, respectively, because SSP information is not tracked in this dataset.\n\n\ncohort_ods %&gt;%\n  # account for redshift reading in as character\n  mutate(tanf_spell_months = as.numeric(tanf_spell_months)) %&gt;%\n  # pull() extracts all values in the column into a single vector\n  # this ensures summary info just in this column \n  pull(tanf_spell_months) %&gt;%\n  summary()\n\nAs expected, since we had to account for individuals who had multiple spells ending in the same quarter, there are some who had a spell length of a single month.\n\ncohort_ods %&gt;%\n  # account for redshift reading in as character\n  mutate(tanf_spell_months = as.numeric(tanf_spell_months)) %&gt;%\n  ggplot(aes(x=tanf_spell_months)) +\n  geom_histogram()\n\nVisually, we can see that the majority of spells within our cohort were on the shorter side, with a few individuals pushing the distribution right-ward. Let’s see if we have similar findings when looking at tanf_total_months:\n\ncohort_ods %&gt;%\n  # account for redshift reading in as character\n  mutate(tanf_total_months = as.numeric(tanf_total_months)) %&gt;%\n  # pull() extracts all values in the column into a single vector\n  # this ensures summary info just in this column \n  pull(tanf_total_months) %&gt;%\n  summary()\n\nThe mean and median are just slightly higher here than that of tanf_spell_months.\n\ncohort_ods %&gt;%\n  # account for redshift reading in as character\n  mutate(tanf_total_months = as.numeric(tanf_total_months)) %&gt;%\n  ggplot(aes(x=tanf_total_months)) +\n  geom_histogram()\n\nThe distribution seems to be slightly more concentrated on the higher end in this graph, but the two have similar shapes. This might indicate that most of our cohort had been on one continuous spell within their particular TANF case. We can verify this by comparing tanf_spell_months with tanf_total_months for each record.\n\ncohort_ods %&gt;%\n  mutate(\n    tanf_spell_months = as.numeric(tanf_spell_months),\n    tanf_total_months = as.numeric(tanf_total_months),\n    more_than_one = tanf_spell_months &lt; tanf_total_months\n  ) %&gt;%\n  group_by(more_than_one) %&gt;%\n  summarize(\n    n_ppl = n_distinct(social_security_number)\n  )\n\n\n\nRace/Ethnicity\nWhile the TANF data in isolation (and cohort) has columns pertaining to race/ethnicity values, we can leverage the larger data infrastructure and pull in our golden records at the individual level by joining our cohort to the dim_person table in the data model. We can accomplish this in SQL or dbplyr by joining the social_security_number from the TANF data to the person_uid column in tr_e2e.dim_person and applying the same logic for combining the different race/ethnicity values as in the previous notebook.\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\n--USE CTE, FIRST ASSIGNING EACH OBSERVATION BY PERSON BASED ON ORDER\n--THEN SELECT ONLY MOST RECENT OBSERVATION PER PERSON JOINED TO PERSON TABLE\nWITH ordering AS (\n  SELECT tm.*, \n    --ROW_NUMBER() ASSIGNS A SEQUENTIAL INTEGER WITHIN EACH PARTITION (social_security_number)\n    --ORDERING IS DETERMINED BY THE ORDER BY (tm.reporting_month DESC)\n    ROW_NUMBER() OVER (PARTITION BY tm.social_security_number ORDER BY tm.reporting_month DESC) AS latest_order\n  FROM ds_ar_dhs.tanf_member tm \n  JOIN ds_ar_dhs.tanf_case tc ON \n    (tm.case_id = tc.case_id AND tm.reporting_month = tc.reporting_month)\n  WHERE tm.valid_ssn_format = 'Y' AND\n    tc.child_only_case = 'FALSE' AND \n    tm.work_eligible_individual IN ('1', '2', '3', '4', '5') AND \n    CAST(work_participation_status AS NUMERIC) BETWEEN 12 AND 98 AND\n    tm.tanf_end_of_spell = 'TRUE' AND\n    tm.reporting_month IN ('201901', '201902', '201903')\n)\nSELECT ordering.*, dp.person_key, CASE\n    WHEN dp.ethnicity_american_indian_or_alaska_native = 'Yes' THEN 'AIAN' \n    WHEN dp.ethnicity_black_or_african_american = 'Yes' THEN 'AfAm'\n    WHEN dp.ethnicity_hispanic_or_latino= 'Yes' THEN 'Hisp'\n    WHEN dp.ethnicity_asian = 'Yes' THEN 'Asian'\n    WHEN dp.ethnicity_white = 'Yes' THEN 'Wht'\n    WHEN dp.ethnicity_other ='Yes' THEN 'Other' \n    ELSE 'Missing' \n    END AS eth_recode_person\nFROM ordering\nJOIN tr_e2e.dim_person dp on ordering.social_security_number = dp.person_uid \nWHERE latest_order = 1\n\"\n\ncohort_person &lt;- dbGetQuery(con, qry) %&gt;%\n  # ignore latest_order since it's not needed anymore\n  select(-latest_order)\n\nhead(cohort_person)\n\n\n\n\ntm &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(\n    valid_ssn_format == 'Y',\n    work_eligible_individual %in% c('1', '2', '3', '4', '5'),\n    between(as.numeric(work_participation_status), 12, 98),\n    tanf_end_of_spell == \"TRUE\",\n    reporting_month %in% c(\"201901\", \"201902\", \"201903\")\n  ) %&gt;%\n  group_by(social_security_number) %&gt;%\n  # window_order() assigns ordering within each group using a SQL window function\n  window_order(desc(reporting_month)) %&gt;%\n  # row_number() assigns a sequential integer within each group (social_security_number)\n  mutate(latest_order = row_number()) %&gt;%\n  ungroup() %&gt;%\n  filter(latest_order == 1) %&gt;%\n  select(-latest_order)\n\ntc &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_case\")) %&gt;%\n  filter(child_only_case == \"FALSE\") %&gt;%\n  # only include columns on join so only returning columns from tm in join\n  select(case_id, reporting_month)\n\ndp &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_person\")) %&gt;%\n  mutate(\n    eth_recode_person = case_when(\n      ethnicity_american_indian_or_alaska_native == 'Yes' ~ 'AIAN',\n      ethnicity_black_or_african_american == 'Yes' ~ 'AfAm',\n        ethnicity_hispanic_or_latino == 'Yes' ~ 'Hisp',\n        ethnicity_asian == 'Yes' ~ 'Asian',\n        ethnicity_white == 'Yes' ~ 'Wht',\n        ethnicity_other == 'Yes' ~ 'Other', \n        TRUE ~ 'Missing'\n    )\n  ) %&gt;%\n  # keep only relevant columns\n  select(person_uid, person_key, eth_recode_person)\n\ncohort_person &lt;- tm %&gt;%\n  inner_join(tc, by = c(\"case_id\", \"reporting_month\")) %&gt;%\n  inner_join(dp, by = c(\"social_security_number\"=\"person_uid\")) %&gt;%\n  collect()\n\nhead(cohort_person)\n\n\n\n\nNow that we have our combined race/ethnicity column from our golden record pulled in, we can explore its distribution:\n\ncohort_person %&gt;%\n  group_by(eth_recode_person) %&gt;% \n  summarise(npersons = n_distinct(person_key)) %&gt;% \n  # ungroup so we can take the percentage with denominator as all in next step\n  ungroup() %&gt;% \n  mutate(pct = 100 * (npersons / sum( npersons )))\n\nRelative to the distribution of our cross-section, our cohort consists of a slightly higher percentage of those categorized as African American.\n\n\nSimultaneous Co-Enrollment\nCo-enrollment refers to instances where multiple spells, or episodes of service, occur simultaneously across programs. Some programs require 100% co-enrollment, meaning that if an individual enrolls in one program, they may be automatically enrolled in a complementary one. In Arkansas, TANF-based co-enrollment, in particular with SNAP, may occur manually, and other times it may be through a referral mechanism. While we cannot completely distinguish between the two, identifying instances where multiple program spells start in the same quarter can help us understand these cross-program dynamics.\nIn identifying cases of simultaneous co-enrollment, as discussed in the cross-section notebook, there are two options:\n\nDevelop logic for joining and matching across grains to domain-specific original data source tables\nLeverage the program participation fact tables in the dimensional data model\n\nWe will again opt for the second one, this time in the context of identifying co-enrollment at the start of the spell. The approach will require two steps: first identifying the beginning of the spell, and then finding records of concurrent spell starts across other programs of interest. Like we did in the previous notebook, we will limit the scope of co-enrollment and concurrent participation to the SNAP and Adult Education programs.\nIn doing so, we will finally bring the fact_person_program_start_end table into our analysis. Since the table already has spell start and end information, we can accomplish our first step by using our cohort table to filter the fact table just to the observations we need through an inner join. In doing so, we will take the latest entry_year_quarter_key per person associated with a TANF spell ending in 2019Q1 to ensure we are applying the same logic we did to our cohort. Let’s see if we return the same number of observations and people as before:\n\nSQL Querydbplyr query\n\n\n\n--USE CTE, FIRST IDENTIFYING COHORT BASED ON TANF DATA FOR LASTEST SPELL PER PERSON\n--THEN USE COHORT TO FILTER FACT TABLE THROUGH INNER JOIN\nWITH cohort AS (\n  SELECT tm.*, \n    ROW_NUMBER() OVER (PARTITION BY tm.social_security_number ORDER BY tm.reporting_month DESC) AS latest_order\n  FROM ds_ar_dhs.tanf_member tm \n  JOIN ds_ar_dhs.tanf_case tc ON \n    (tm.case_id = tc.case_id AND tm.reporting_month = tc.reporting_month)\n  WHERE tm.valid_ssn_format = 'Y' AND\n    tc.child_only_case = 'FALSE' AND \n    tm.work_eligible_individual IN ('1', '2', '3', '4', '5') AND \n    CAST(work_participation_status AS NUMERIC) BETWEEN 12 AND 98 AND\n    tm.tanf_end_of_spell = 'TRUE' AND\n    tm.reporting_month IN ('201901', '201902', '201903')\n),\nfact_link AS (\n  SELECT fact.person_key, MAX(fact.entry_year_quarter_key) AS entry_year_quarter_key, fact.exit_year_quarter_key\n  FROM tr_e2e.fact_person_program_start_end fact\n  JOIN tr_e2e.dim_person dp ON dp.person_key = fact.person_key\n  --join on exit to limit exit information to 2019Q1\n  JOIN cohort ON dp.person_uid = cohort.social_security_number\n  JOIN tr_e2e.dim_year_quarter dyq ON fact.exit_year_quarter_key = dyq.year_quarter_key\n  JOIN tr_e2e.dim_program dpro oN dpro.program_key = fact.program_key\n  WHERE cohort.latest_order = 1 AND\n    dyq.calendar_year = 2019 and dyq.calendar_quarter = 1 AND\n    dpro.program_name = 'Temporary Assistance for Needy Families (TANF)'\n  GROUP BY fact.person_key, fact.exit_year_quarter_key\n)\nSELECT COUNT(*) AS n_rows, COUNT(DISTINCT(person_key)) AS n_ppl\nFROM fact_link\n\n\n\n\ntm &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(\n    valid_ssn_format == 'Y',\n    work_eligible_individual %in% c('1', '2', '3', '4', '5'),\n    between(as.numeric(work_participation_status), 12, 98),\n    tanf_end_of_spell == \"TRUE\",\n    reporting_month %in% c(\"201901\", \"201902\", \"201903\")\n  ) %&gt;%\n  group_by(social_security_number) %&gt;%\n  # window_order() assigns ordering within each group using a SQL window function\n  window_order(desc(reporting_month)) %&gt;%\n  # row_number() assigns a sequential integer within each group (social_security_number)\n  mutate(latest_order = row_number()) %&gt;%\n  ungroup() %&gt;%\n  filter(latest_order == 1)\n\ntc &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_case\")) %&gt;%\n  filter(child_only_case == \"FALSE\")\n\ncohort &lt;- tm %&gt;%\n  inner_join(tc, by = c(\"case_id\", \"reporting_month\")) \n\nfact &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_program_start_end\")) \n\ndyq &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_year_quarter\")) %&gt;%\n  filter(calendar_year == '2019', calendar_quarter == '1')\n\ndpro &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_program\")) %&gt;%\n  filter(program_name == 'Temporary Assistance for Needy Families (TANF)')\n\ncon %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_person\")) %&gt;%\n  inner_join(cohort, by = c(\"person_uid\" = \"social_security_number\")) %&gt;%\n  inner_join(fact, by = c(\"person_key\" = \"person_key\")) %&gt;%\n  inner_join(dyq, by = c(\"exit_year_quarter_key\" = \"year_quarter_key\")) %&gt;%\n  inner_join(dpro, by = \"program_key\") %&gt;%\n  group_by(person_key, exit_year_quarter_key) %&gt;%\n  summarize(\n    entry_year_quarter_key = max(entry_year_quarter_key)\n  ) %&gt;%\n  ungroup() %&gt;%\n  summarize(\n    n_rows = n(),\n    n_ppl = n_distinct(person_key)\n  )\n\n\n\n\nNow that we have confirmed accurate translation to the fact table, we can link this information to identify other episodes of service records starting at the same time as the TANF spell for our cohort. We will do so using a left join to a separate version of the fact_person_program_start_end table, limiting it to SNAP and Adult Education entries (program_key = 9 or 12). At the end, we will read the results of this query into R to further explore our linked data frame.\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\nWITH cohort AS (\n  SELECT tm.*, \n    ROW_NUMBER() OVER (PARTITION BY tm.social_security_number ORDER BY tm.reporting_month DESC) AS latest_order\n  FROM ds_ar_dhs.tanf_member tm \n  JOIN ds_ar_dhs.tanf_case tc ON \n    (tm.case_id = tc.case_id AND tm.reporting_month = tc.reporting_month)\n  WHERE tm.valid_ssn_format = 'Y' AND\n    tc.child_only_case = 'FALSE' AND \n    tm.work_eligible_individual IN ('1', '2', '3', '4', '5') AND \n    CAST(work_participation_status AS NUMERIC) BETWEEN 12 AND 98 AND\n    tm.tanf_end_of_spell = 'TRUE' AND\n    tm.reporting_month IN ('201901', '201902', '201903')\n),\nfact_link AS (\n  SELECT fact.person_key, MAX(fact.entry_year_quarter_key) AS entry_year_quarter_key, fact.exit_year_quarter_key\n  FROM tr_e2e.fact_person_program_start_end fact\n  JOIN tr_e2e.dim_person dp ON dp.person_key = fact.person_key\n  --join on exit to limit exit information to 2019Q1\n  JOIN cohort ON dp.person_uid = cohort.social_security_number\n  JOIN tr_e2e.dim_year_quarter dyq ON fact.exit_year_quarter_key = dyq.year_quarter_key\n  JOIN tr_e2e.dim_program dpro oN dpro.program_key = fact.program_key\n  WHERE cohort.latest_order = 1 AND\n    dyq.calendar_year = 2019 and dyq.calendar_quarter = 1 AND\n    dpro.program_name = 'Temporary Assistance for Needy Families (TANF)'\n  GROUP BY fact.person_key, fact.exit_year_quarter_key\n)\nSELECT fact_link.*, fact_co.program_key  \nFROM fact_link \n--LEFT JOIN TO KEEP EVERYONE WHO IS NOT CO-ENROLLED WITH THESE CONSTRAINTS\n--JOIN ON ENTRY, NOT EXIT QUARTER\n--PROGRAM_KEY CONSTRAINT NEEDS TO BE INSIDE THE JOIN CONDITIONS OF LEFT JOIN\n--OTHERWISE WILL BEHAVE LIKE AN INNER JOIN IF USING WHERE\nLEFT JOIN tr_e2e.fact_person_program_start_end fact_co ON\n    (fact_link.person_key = fact_co.person_key AND fact_link.entry_year_quarter_key = fact_co.entry_year_quarter_key AND fact_co.program_key IN (9, 12))\n\"\n\ncohort_co_enroll &lt;- dbGetQuery(con, qry)\n\nhead(cohort_co_enroll)\n\n\n\n\ntm &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_member\")) %&gt;%\n  filter(\n    valid_ssn_format == 'Y',\n    work_eligible_individual %in% c('1', '2', '3', '4', '5'),\n    between(as.numeric(work_participation_status), 12, 98),\n    tanf_end_of_spell == \"TRUE\",\n    reporting_month %in% c(\"201901\", \"201902\", \"201903\")\n  ) %&gt;%\n  group_by(social_security_number) %&gt;%\n  # window_order() assigns ordering within each group using a SQL window function\n  window_order(desc(reporting_month)) %&gt;%\n  # row_number() assigns a sequential integer within each group (social_security_number)\n  mutate(latest_order = row_number()) %&gt;%\n  ungroup() %&gt;%\n  filter(latest_order == 1)\n\ntc &lt;- con %&gt;% \n  tbl(in_schema(schema = \"ds_ar_dhs\",\n                table = \"tanf_case\")) %&gt;%\n  filter(child_only_case == \"FALSE\")\n\ncohort &lt;- tm %&gt;%\n  inner_join(tc, by = c(\"case_id\", \"reporting_month\")) \n\nfact &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_program_start_end\")) \n\ndyq &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_year_quarter\")) %&gt;%\n  filter(calendar_year == '2019', calendar_quarter == '1')\n\ndpro &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_program\")) %&gt;%\n  filter(program_name == 'Temporary Assistance for Needy Families (TANF)')\n\nfact_link &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"dim_person\")) %&gt;%\n  inner_join(cohort, by = c(\"person_uid\" = \"social_security_number\")) %&gt;%\n  inner_join(fact, by = c(\"person_key\" = \"person_key\")) %&gt;%\n  inner_join(dyq, by = c(\"exit_year_quarter_key\" = \"year_quarter_key\")) %&gt;%\n  inner_join(dpro, by = \"program_key\") %&gt;%\n  group_by(person_key, exit_year_quarter_key) %&gt;%\n  summarize(\n    entry_year_quarter_key = max(entry_year_quarter_key)\n  ) %&gt;%\n  ungroup()\n\nfact_co &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_program_start_end\")) %&gt;%\n  # filter for snap and adult ed\n  filter(program_key %in% c(9, 12)) %&gt;%\n  # keep only relevant columns for join and post join\n  select(person_key, entry_year_quarter_key, program_key)\n\ncohort_co_enroll &lt;- fact_link %&gt;%\n  left_join(fact_co, by = c(\"person_key\", \"entry_year_quarter_key\")) %&gt;%\n  collect()\n\nhead(cohort_co_enroll)\n\n\n\n\nWe can confirm that we have the same number of people as before. We might have more than one row per person if an individual started separate spells in Adult Education and SNAP both in the same quarter they started their TANF episode.\n\ncohort_co_enroll %&gt;%\n  summarize(\n    n_rows = n(),\n    n_ppl = n_distinct(person_key)\n  )\n\nNow that we have the information pulled in, we can take a similar approach in working with our cohort relative to that of our cross-section. Here, instead of assigning individuals to different groups of concurrent participation, we will designate their group of initial simultaneous co-enrollment relative to their TANF spell. Since we plan on leveraging this information in the future, we will hold off on aggregating counts until the groups are added to the original data frame by person.\n\n# isolate those that started spells in SNAP and Adult Ed at the same time\n# they will have two rows, one for SNAP and one for Adult Ed\nall_three &lt;- cohort_co_enroll %&gt;%\n  group_by(person_key) %&gt;%\n  summarize(\n    n = n()\n  ) %&gt;%\n  filter(n &gt; 1) %&gt;%\n  ungroup() %&gt;%\n  select(-n) %&gt;%\n  mutate(program_name = \"TANF + SNAP + Adult ED Joint\")\n\n# identify those not co-enrolled in both programs and assign to appropriate group\nnot_three &lt;- cohort_co_enroll %&gt;%\n  # anti_join ignores all observations in all_three\n  anti_join(all_three, by = 'person_key') %&gt;%\n  mutate(\n    program_name = case_when(\n      program_key == 9 ~ \"TANF + SNAP\",\n      program_key == 12 ~ \"TANF + Adult ED Joint\",\n      is.na(program_key) ~ \"TANF\",\n      TRUE ~ \"missing\"\n    )\n  ) %&gt;%\n  # include only relevant columns\n  select(person_key, program_name)\n\n# combine rows from not_three and all_three since there is no overlap in groups\n# and they contain everyone from our cohort\nco_info &lt;- not_three %&gt;%\n  bind_rows(all_three)\n\n# join back to cohort_co_enroll\ncohort_co_enroll &lt;- cohort_co_enroll %&gt;%\n  inner_join(co_info, by = \"person_key\") %&gt;%\n  # limit to one row per person now that groups have been identified\n  # because those with more than one row were already accounted for in group assignments\n  distinct(person_key, .keep_all=TRUE) %&gt;%\n  select(-program_key)\n\nhead(cohort_co_enroll)\n\nWith our assignments added, we can take a look at the breakdown by co-enrollment group:\n\ncohort_co_enroll %&gt;% \n  group_by(program_name) %&gt;%\n  summarize(\n    n_inds = n_distinct(person_key)\n  )\n\nSince some of the groups are quite small, we can also think of the groups as an indicator tracking the presence of co-enrollment:\n\ncohort_co_enroll %&gt;%\n  mutate(co_enroll_ind = ifelse(str_detect(program_name, \"[+]\"), \"yes\", \"no\")) %&gt;%\n  count(co_enroll_ind)\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nRelative to the final treemap output in the previous notebook, does this finding surprise you? Remember that we are only looking at a subset of those in the original cross-section, and within that, are further limiting from concurrent participation to simultaneous co-enrollment at the start of the original TANF spell - some of the individuals who do not appear to be co-enrolled may have already been previously enrolled (and are still enrolled) in either SNAP or Adult Education at this time.\n\n\nWe can take this a step further by linking it back to our cohort_person data frame, which contains the rest of the information from the original TANF data. By doing so, we can build on our exploration in an earlier section by adding the co-enrollment presence indicator to our time on TANF distribution:\n\nNote: We purposely added the person_key column into cohort_person, even though it was unnecessary at the time, to allow for the linkage between the fact and original tables in R.\n\n\n# save as new data frame\ncohort_tot &lt;- cohort_person %&gt;%\n  inner_join(cohort_co_enroll, by = \"person_key\") %&gt;%\n  mutate(\n    co_enroll_ind = ifelse(str_detect(program_name, \"[+]\"), \"yes\", \"no\"),\n    tanf_spell_months = as.numeric(tanf_spell_months)\n  ) \n\ncohort_tot %&gt;%\n  ggplot(aes(x=tanf_spell_months, color = co_enroll_ind)) + \n  # using density plot instead of histogram\n  geom_density()\n\nInteresting! We can see a higher concentration of those co-enrolled in SNAP, Adult Education, or both, with shorter TANF spells. There may be more to check out here, and you are certainly encouraged to do so as an optional technical challenge.\n\n\n\n\n\n\nCheckpoint\n\n\n\nNow that we have demonstrated a use case of the enrollment by spell fact table, think about how your team may use this table in your project. Are there particular programs that you are interested in? How could you modify the code in this notebook to suit the time period, demographic group, and set of participants in which you are interested?",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Longitudinal Analysis</span>"
    ]
  },
  {
    "objectID": "04_longitudinal_analysis.html#saving-our-cohort-as-a-permanent-table",
    "href": "04_longitudinal_analysis.html#saving-our-cohort-as-a-permanent-table",
    "title": "Longitudinal Analysis",
    "section": "Saving our Cohort as a Permanent Table",
    "text": "Saving our Cohort as a Permanent Table\nSince we plan on working with our cohort in future analyses, we will save our final cohort data frame, cohort_tot, as a permanent table in the tr_e2e schema. The tr_e2e schema is available as a read/write schema, meaning that you can create permanent tables in the same schema, as long as you are in this workspace. You can also create permanent tables directly in SQL.\n\nYou are encouraged to save your analytic frame for your team project to the tr_e2e schema. To differentiate between groups, we ask that you add a prefix to the title that includes the class and state team information. For example, if a team from New York in Class 1 wanted to save a permanent table, they should save it to tr_e2e.class1_ny_INSERT_TABLE_NAME, with INSERT_TABLE_NAME replaced by a more specific table description.\n\n\nDBI::dbWriteTable(\n  conn = con, \n  name = 'tr_e2e.nb_cohort',\n  value = cohort_tot,\n)\n\nqry &lt;- \"GRANT SELECT ON TABLE tr_e2e.nb_cohort TO group db_t00113_rw\"",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Longitudinal Analysis</span>"
    ]
  },
  {
    "objectID": "04_longitudinal_analysis.html#tanf-reenrollment",
    "href": "04_longitudinal_analysis.html#tanf-reenrollment",
    "title": "Longitudinal Analysis",
    "section": "TANF Reenrollment",
    "text": "TANF Reenrollment\nA primary goal of TANF is to help individuals move toward self-sufficiency through its financial assistance and employment and training opportunities. In defining success as self-sufficiency, one possible measure could be return to TANF, with those returning seeking further assistance.\nWe can identify reenrollment in TANF for our population of interest by bringing back the other fact table capturing quarterly enrollment, tr_e2e.fact_person_quarterly_program_enrollment. Since our cohort is defined by a specific exit, 2019Q1, any existence of TANF participation (program_key = 10) in a future quarter is evidence of reenrollment. For a future inquiry, we will only return the earliest return relative to the end quarter defining our cohort.\n\nNote: We could also use the tanf_member table to identify re-enrollment. The fact table is more flexible though if you wanted to assess reentry, or even entry, into a suite of programs.\n\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\nselect fact.person_key, min(fact.enrollment_quarter_key) as earliest_return\nfrom tr_e2e.nb_cohort nc \njoin tr_e2e.fact_person_quarterly_program_enrollment fact on \n    (nc.person_key = fact.person_key and fact.enrollment_quarter_key &gt; nc.exit_year_quarter_key)\nwhere fact.program_key = 10 \ngroup by fact.person_key\n\"\n\ncohort_reentry &lt;- dbGetQuery(con, qry)\n\nhead(cohort_reentry)\n\n\n\n\nnc &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"nb_cohort\")) \n\nfact &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_quarterly_program_enrollment\")) %&gt;%\n  filter(program_key == 10)\n\ncohort_reentry &lt;- nc %&gt;%\n  inner_join(fact, by = \"person_key\") %&gt;%\n  filter(enrollment_quarter_key &gt; exit_year_quarter_key) %&gt;%\n  group_by(person_key) %&gt;%\n  summarize(\n    earliest_return = min(enrollment_quarter_key)\n  ) %&gt;% \n  ungroup() %&gt;%\n  collect()\n\nhead(cohort_reentry)\n\n\n\n\nWe can then join (using a left join) this information back to cohort_tot and evaluate reentry across the entire cohort.\n\ncohort_tot %&gt;%\n  left_join(cohort_reentry, by = \"person_key\") %&gt;% \n  mutate(\n    ever_return = ifelse(is.na(earliest_return), 'no', 'yes')\n  ) %&gt;%\n  group_by(ever_return) %&gt;%\n  summarize(\n    n_ppl = n_distinct(person_key)\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    perc = 100*n_ppl/sum(n_ppl)\n  )\n\nWe can even assess reenrollment by simultaneous co-enrollment at the start of their TANF spell defining the cohort:\n\ncohort_tot %&gt;%\n  left_join(cohort_reentry, by = \"person_key\") %&gt;% \n  mutate(\n    ever_return = ifelse(is.na(earliest_return), 'no', 'yes'),\n    co_enroll_ind = ifelse(str_detect(program_name, \"[+]\"), \"yes\", \"no\")\n  ) %&gt;%\n  group_by(ever_return,co_enroll_ind) %&gt;%\n  summarize(\n    n_ppl = n_distinct(person_key)\n  ) %&gt;%\n  ungroup() %&gt;%\n  group_by(co_enroll_ind) %&gt;%\n  mutate(\n    perc = 100*n_ppl/sum(n_ppl)\n  ) %&gt;%\n  filter(ever_return == 'no')\n\nFascinating! We see that within our cohort, those simultaneously co-enrolled in TANF and at least one of Adult Education or SNAP seem to return to TANF, at least within the available time period of the data, less often.\nIf we wanted to dig into the time of earliest re-enrollment, we can do so with the available data:\n\ncohort_tot %&gt;%\n  left_join(cohort_reentry, by = \"person_key\") %&gt;% \n  mutate(\n    time_elapsed = case_when(\n      is.na(earliest_return) ~ \"Did not return\",\n      earliest_return - exit_year_quarter_key &lt;= 4 ~ \"Returned Within a Year\",\n      earliest_return - exit_year_quarter_key &gt; 4 ~ \"Returned After a year\",\n      TRUE ~ \"missing\"\n    )\n  ) %&gt;%\n  group_by(time_elapsed) %&gt;%\n  summarize(\n    n_ppl = n_distinct(person_key)\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    perc = 100*n_ppl/sum(n_ppl)\n  ) %&gt;%\n  arrange(desc(perc))\n\nWe can see that of those that did return in our cohort, they often returned within a year of their exit. You are welcome to extend this work, perhaps by investigating the distribution between time_elapsed and another subgroup available in cohort_tot.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Longitudinal Analysis</span>"
    ]
  },
  {
    "objectID": "04_longitudinal_analysis.html#expanding-outcomes",
    "href": "04_longitudinal_analysis.html#expanding-outcomes",
    "title": "Longitudinal Analysis",
    "section": "Expanding Outcomes",
    "text": "Expanding Outcomes\nIn future notebooks, we will use this cohort perspective to answer questions around key metrics of employment and wages among program participants. Specifically, in the upcoming measurement notebook, we will examine indicators from the Fiscal Responsibility Act of 2023, including employment and wages 2 and 4 quarters after initial program exit. These three measures are circled in the image below.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Longitudinal Analysis</span>"
    ]
  },
  {
    "objectID": "05_measurement.html",
    "href": "05_measurement.html",
    "title": "Measuring Workforce Outcomes",
    "section": "",
    "text": "6 Introduction\nWelcome to the fifth notebook for Module 2 of this course, covering the construction of employment outcomes for a cohort. Up to this point in the course, most of our work with the Arkansas data has been focused on project scoping and development, culminating in the development of our cohort analytic frame and an initial longitudinal analysis in the previous notebook. In this notebook, we will extend our longitudinal analysis to track employment outcomes after introducing a new component of the class data model based on the Unemployment Insurance (UI) wage records. This analysis will help us address our same research topic consistent throughout the notebooks, which is aimed at identifying promising pathways for a specific set of TANF-enrolled individuals before COVID-imposed restrictions were enforced in the state.\nAs we’ve discussed in class, when we are analyzing administrative data not developed for research purposes - such as the UI wage records - it is important to create new measures that will help us answer our policy-relevant questions. When we say “measure”, we usually mean a person-level variable that we can use to compare outcomes for individuals in our cohort. Creating measures at the person level allows us to compare outcomes for different subgroups of individuals based on their characteristics and experiences. In fact, we have already developed this workflow in the previous notebook when we measured TANF reenrollment, and then subsequently investigated its distribution by our simultaneous co-enrollment indicator!\nHere, we will broaden our set of measures to focus on a suite of person-level outcomes that stem directly from the recent 2023 Fiscal Responsibility Act, which in part mandates the measurement of specific employment outcomes for TANF participants. These outcome measures are quite similar to the WIOA-based standards and will help describe our cohort’s employment experience and workforce outcomes after exiting TANF. For reference, we will construct the circled outcomes in the diagram below for our cohort of interest:\nWhile your group may choose to generate different measures based on your research question, the code displayed here should provide a good starting place for thinking about how to best create and analyze workforce-focused, person-level outcome measures.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Measuring Workforce Outcomes</span>"
    ]
  },
  {
    "objectID": "05_measurement.html#load-libraries",
    "href": "05_measurement.html#load-libraries",
    "title": "Measuring Workforce Outcomes",
    "section": "Load Libraries",
    "text": "Load Libraries\nWe will start by loading necessary packages not readily available in the base R setup.\n\nAs a reminder, every time you create a new R file, you should copy and run the following code snippet.\n\n\noptions(scipen = 999) # avoid scientific notation\nlibrary(RJDBC)\nlibrary(tidyverse) \nlibrary(lubridate) # working with dates\nlibrary(dbplyr)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Measuring Workforce Outcomes</span>"
    ]
  },
  {
    "objectID": "05_measurement.html#establish-database-connection",
    "href": "05_measurement.html#establish-database-connection",
    "title": "Measuring Workforce Outcomes",
    "section": "Establish Database Connection",
    "text": "Establish Database Connection\nNow, the following set of commands will set up a connection to the Redshift database:\n\ndbusr=Sys.getenv(\"DBUSER\")\ndbpswd=Sys.getenv(\"DBPASSWD\")\n\nurl &lt;- \"jdbc:redshift:iam://adrf-redshift11.cdy8ch2udktk.us-gov-west-1.redshift.amazonaws.com:5439/projects;loginToRp=urn:amazon:webservices:govcloud;ssl=true;AutoCreate=true;idp_host=adfs.adrf.net;idp_port=443;ssl_insecure=true;plugin_name=com.amazon.redshift.plugin.AdfsCredentialsProvider\"\n\ndriver &lt;- JDBC(\n  \"com.amazon.redshift.jdbc42.Driver\",\n  classPath = \"C:\\\\drivers\\\\redshift_withsdk\\\\redshift-jdbc42-2.1.0.12\\\\redshift-jdbc42-2.1.0.12.jar\",\n  identifier.quote=\"`\"\n)\n\ncon &lt;- dbConnect(driver, url, dbusr, dbpswd)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Measuring Workforce Outcomes</span>"
    ]
  },
  {
    "objectID": "05_measurement.html#renviron-file",
    "href": "05_measurement.html#renviron-file",
    "title": "Measuring Workforce Outcomes",
    "section": ".Renviron File",
    "text": ".Renviron File\nFor this code to work, you need to have an .Renviron file in your user folder (i.e. U:\\\\John.Doe.P00002) that contains the following:\nDBUSER='adrf\\John.Doe.P00002'\nDBPASSWD='xxxxxxxxxxxx'\nwhere John.Doe.P00002 is replaced with your username and xxxxxxxxxx is replaced with your password (both still in quotes!). DBUSER should now end with .T00113.\nA detailed video from the Foundations Module, “Introduction to RStudio,” demonstrating how to create an .Renviron file is available on the Resources page on class website in the subsection “Quick Links.”",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Measuring Workforce Outcomes</span>"
    ]
  },
  {
    "objectID": "05_measurement.html#employment-rate---2nd-quarter-after-exit",
    "href": "05_measurement.html#employment-rate---2nd-quarter-after-exit",
    "title": "Measuring Workforce Outcomes",
    "section": "Employment Rate - 2nd Quarter After Exit",
    "text": "Employment Rate - 2nd Quarter After Exit\nSince our data frame cohort_emp contains at least one record for everyone in our original cohort, we can isolate the denominator of our employment rate calculations - original cohort size - and bring it back in after finding the number of individuals employed in the 2nd quarter after TANF exit:\n\n# find denominator\ntotal_cohort &lt;- cohort_emp %&gt;%\n  summarize(\n    n_ppl = n_distinct(person_key)\n  ) %&gt;%\n  pull(n_ppl)\n\n# find numerator as n_distinct(person_key) and use to find employment rate\ncohort_emp %&gt;%\n  filter(relative_quarter == 2) %&gt;%\n  summarize(\n    quarter_2_emp_rate = n_distinct(person_key)*100/total_cohort\n  )",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Measuring Workforce Outcomes</span>"
    ]
  },
  {
    "objectID": "05_measurement.html#employment-rate---2nd-and-4th-quarter-after-exit",
    "href": "05_measurement.html#employment-rate---2nd-and-4th-quarter-after-exit",
    "title": "Measuring Workforce Outcomes",
    "section": "Employment Rate - 2nd and 4th Quarter After Exit",
    "text": "Employment Rate - 2nd and 4th Quarter After Exit\nWe can slightly modify our approach to find the percentage of individuals in our cohort work-eligible at exit in unsubsidized employment during both their 2nd and 4th quarters after exit, according to the UI wage records. To do so, after filtering for all observations in the 2nd and 4th quarters after TANF exit, we will isolate those who appear in both quarters, as indicated by the presence of multiple observations in the filtered data frame.\n\nNote: We have already accounted for the work-eligible restriction in our initial cohort construction.\n\n\ncohort_emp %&gt;%\n  filter(relative_quarter %in% c(2, 4)) %&gt;%\n  group_by(person_key) %&gt;%\n  summarize(\n    n = n()\n  ) %&gt;%\n  ungroup() %&gt;%\n  filter(n == 2) %&gt;%\n  summarize(\n    quarter_2_and_4_emp_rate = 100*n_distinct(person_key)/total_cohort\n  )\n\nAs a reference point, it might be helpful to see the 4th quarter employment rate in isolation. This calculation is quite similar to that of the 2nd quarter employment rate:\n\n# find numerator as n_distinct(person_key) and use to find employment rate\ncohort_emp %&gt;%\n  filter(relative_quarter == 4) %&gt;%\n  summarize(\n    quarter_4_emp_rate = n_distinct(person_key)*100/total_cohort\n  )\n\nInteresting! So according to our outcome measures here, it appears as though there is some transition between those employed in their 2nd and 4th quarters after exit. Let’s look further investigate this measure by our joint race/ethnicity variable, which requires a slightly different technique due to the groupings in our denominator:\n\n# recalculate denominator of number of people in cohort by race/ethnicity grouping\ncohort_by_eth &lt;- cohort_emp %&gt;%\n  group_by(eth_recode_person) %&gt;%\n  summarize(\n    n_total = n_distinct(person_key)\n  ) %&gt;% \n  ungroup()\n\ncohort_emp %&gt;%\n  filter(relative_quarter %in% c(2, 4)) %&gt;%\n  # include eth_recode_person in group_by\n  group_by(person_key, eth_recode_person) %&gt;%\n  summarize(\n    n = n()\n  ) %&gt;%\n  ungroup() %&gt;%\n  filter(n == 2) %&gt;%\n  group_by(eth_recode_person) %&gt;%\n  summarize(\n    n_ppl = n_distinct(person_key)\n  ) %&gt;%\n  ungroup() %&gt;%\n  # join to data frame with total counts to bring in denominaator\n  inner_join(cohort_by_eth, by = \"eth_recode_person\") %&gt;%\n  mutate(\n    quarter_2_and_4_emp_rate = 100*n_ppl/n_total\n  )\n\nWhile further investigation is required into the underlying dynamics that may be driving these outcomes, we can observe some interesting results here.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Measuring Workforce Outcomes</span>"
    ]
  },
  {
    "objectID": "05_measurement.html#median-earnings---2nd-quarter-after-exit",
    "href": "05_measurement.html#median-earnings---2nd-quarter-after-exit",
    "title": "Measuring Workforce Outcomes",
    "section": "Median Earnings - 2nd Quarter After Exit",
    "text": "Median Earnings - 2nd Quarter After Exit\nWe can also get a basic understanding of earnings with our final measure, which are tracked in cohort_emp as ui_quarterly_wages.\n\ncohort_emp %&gt;%\n  mutate(\n    ui_quarterly_wages = as.numeric(ui_quarterly_wages)\n  ) %&gt;%\n  filter(relative_quarter == 2) %&gt;%\n  summarize(\n    quarter_2_median_earnings = median(ui_quarterly_wages)\n  )\n\nIn interpreting this value, keep in mind that this median is calculated based on only those who appear in the UI wage records. Any individual in our cohort with missing or zero earnings according to the UI wage records in their second quarter after exit is not included in this calculation. We will briefly discuss techniques for dealing with missing data in the Missingness and Inference lecture. In the meantime, it is helpful to cross-reference this with our first measure tracking 2nd quarter post-exit employment rate.\nWe can extend this analysis by analyzing median earnings in the 2nd quarter after exit by our simultaneous co-enrollment indicator:\n\ncohort_emp %&gt;%\n  mutate(\n    ui_quarterly_wages = as.numeric(ui_quarterly_wages)\n  ) %&gt;%\n  filter(relative_quarter == 2) %&gt;%\n  group_by(co_enroll_ind) %&gt;%\n  summarize(\n    quarter_2_median_earnings = median(ui_quarterly_wages)\n  )\n\nAs we just discussed, it may be helpful to supplement this measure with our first one looking at the employment rate at this time:\n\n# recalculate denominator of number of people in cohort by co-enrollment grouping\ncohort_by_co_enroll &lt;- cohort_emp %&gt;%\n  group_by(co_enroll_ind) %&gt;%\n  summarize(\n    n_total = n_distinct(person_key)\n  ) %&gt;% \n  ungroup()\n\ncohort_emp %&gt;%\n  mutate(\n    ui_quarterly_wages = as.numeric(ui_quarterly_wages)\n  ) %&gt;%\n  filter(relative_quarter == 2) %&gt;%\n  group_by(co_enroll_ind) %&gt;%\n  # need to find numerator of number of people first before bringing in denominator\n  summarize(\n    quarter_2_median_earnings = median(ui_quarterly_wages),\n    n_ppl = n_distinct(person_key)\n  ) %&gt;%\n  inner_join(cohort_by_co_enroll, by = \"co_enroll_ind\") %&gt;%\n  mutate(\n    quarter_2_emp_rate = 100*n_ppl/n_total\n  ) %&gt;%\n  # ignore unnecessary columns\n  select(-c(n_ppl, n_total))\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nDoes anything surprise you about these results? Compare this to our TANF re-enrollment outcomes by co_enroll_ind. What further investigation would you like to carry out here?\nApplying this to your own project, in building employment outcomes, would it be worthwhile including some sort of employment or job stability measure? Or perhaps something else? Jot these ideas down in your project template.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Measuring Workforce Outcomes</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html",
    "href": "06_Presentation_prep.html",
    "title": "Presentation Preparation",
    "section": "",
    "text": "7 Introduction\nWelcome to the final notebook for this course, covering presentation preparation. Presentation preparation consists of two complementary tasks: (1) developing presentation-ready tables and visuals and (2) providing the necessary information to ensure these files will be approved in the export review process. By building on applied examples from past notebooks, you will be introduced to the necessary procedures for preparing different types of final output for presentation and export review. While it is not required to do so, we highly recommend disclosure proofing your data visualizations along with the underlying tabular data at the same time, as you will see demonstrated in the following sections. You may also export the underlying tabular data from the ADRF and construct visualizations outside the ADRF. This resource is intended to be a reference guide as you start to consider preparing and finalizing your outputs for export from the ADRF.\nWe will prepare the following tables and visuals in this notebook (click hyperlink to skip to section):",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#load-libraries",
    "href": "06_Presentation_prep.html#load-libraries",
    "title": "Presentation Preparation",
    "section": "Load Libraries",
    "text": "Load Libraries\nWe will start by loading necessary packages not readily available in the base R setup.\n\nAs a reminder, every time you create a new R file, you should copy and run the following code snippet.\n\n\noptions(scipen = 999) # avoid scientific notation\nlibrary(RJDBC)\nlibrary(tidyverse) \nlibrary(lubridate) # working with dates\nlibrary(dbplyr)\nlibrary(scales) # modify percentages (for heatmap)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#establish-database-connection",
    "href": "06_Presentation_prep.html#establish-database-connection",
    "title": "Presentation Preparation",
    "section": "Establish Database Connection",
    "text": "Establish Database Connection\nNow, the following set of commands will set up a connection to the Redshift database:\n\ndbusr=Sys.getenv(\"DBUSER\")\ndbpswd=Sys.getenv(\"DBPASSWD\")\n\nurl &lt;- \"jdbc:redshift:iam://adrf-redshift11.cdy8ch2udktk.us-gov-west-1.redshift.amazonaws.com:5439/projects;loginToRp=urn:amazon:webservices:govcloud;ssl=true;AutoCreate=true;idp_host=adfs.adrf.net;idp_port=443;ssl_insecure=true;plugin_name=com.amazon.redshift.plugin.AdfsCredentialsProvider\"\n\ndriver &lt;- JDBC(\n  \"com.amazon.redshift.jdbc42.Driver\",\n  classPath = \"C:\\\\drivers\\\\redshift_withsdk\\\\redshift-jdbc42-2.1.0.12\\\\redshift-jdbc42-2.1.0.12.jar\",\n  identifier.quote=\"`\"\n)\n\ncon &lt;- dbConnect(driver, url, dbusr, dbpswd)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#renviron-file",
    "href": "06_Presentation_prep.html#renviron-file",
    "title": "Presentation Preparation",
    "section": ".Renviron File",
    "text": ".Renviron File\nFor this code to work, you need to have an .Renviron file in your user folder (i.e. U:\\\\John.Doe.P00002) that contains the following:\nDBUSER='adrf\\John.Doe.P00002'\nDBPASSWD='xxxxxxxxxxxx'\nwhere John.Doe.P00002 is replaced with your username and xxxxxxxxxx is replaced with your password (both still in quotes!). DBUSER should now end with .T00113.\nA detailed video from the Foundations Module, “Introduction to RStudio,” demonstrating how to create an .Renviron file is available on the Resources page on class website in the subsection “Quick Links.”",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#saving-export-files",
    "href": "06_Presentation_prep.html#saving-export-files",
    "title": "Presentation Preparation",
    "section": "Saving Export Files",
    "text": "Saving Export Files\nWe will also create folders for you to save your export files. Organizing files into two separate folders (for export files and supporting documentation) will make the export process easier. First, we are going to pull your U:/ drive folder name and then create separate folders within for your export files. This code relies on a lot of string manipulation.\n\nYou can skip this code if you already have a preferred file storage method. For whatever reason, if the user_name object does not pull your user name, you can overwrite it with user_name &lt;- \"INSERT USER NAME\".\n\n\n# pull and check user name \nuser_name &lt;- substring(list.dirs(path = 'U:/', recursive = FALSE), 5)\n\n# run code to create directories\n# sprintf is a string manipulation function that enables us to use symbols as placeholders in R so we can interchange values in an expression\n# rather than rewriting all the queries, we can use sprintf to parameterize the queries, making them much more flexible\nmain_dir &lt;- (sprintf(\"U:\\\\%s\\\\ETA_Class_Exports\\\\\", user_name))\nfigures_dir &lt;- (sprintf(\"U:\\\\%s\\\\ETA_Class_Exports\\\\Output\\\\\", user_name))\ndata_dir &lt;- (sprintf(\"U:\\\\%s\\\\ETA_Class_Exports\\\\Data\\\\\", user_name))\n\n\ndir_list &lt;- c(main_dir, figures_dir, data_dir)\n\n## create directory for outputs if it doesn't already exist (won't overwrite anything)\nfor (dir in dir_list) {\n    if (dir.exists(file.path(dir)) == T){\n        print(sprintf(\"Output Directory %s Already Exists\", dir))\n    } else {\n        dir.create(file.path(dir))\n        print(sprintf(\"Created Output Directory %s\", dir))\n    }\n}",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#export-files",
    "href": "06_Presentation_prep.html#export-files",
    "title": "Presentation Preparation",
    "section": "Export Files",
    "text": "Export Files\nEach team is permitted to export up to 7 files. The guidelines for each file, supplemented with explanations and examples, are listed below. You do not need to memorize this section - it may be in your best interest to refer back to it as you prepare each file for export review.\n\nEach team is able to export up to 7 files (figures/tables).\n\nWe limit the number of files to export because reviewing export requests is a highly manual process, thus very time extensive. Along with the traditional ADRF review, it also needs to pass additional review from Arkansas, so each additional file will add more time to the review process. Also, for a 20-minute presentation, 7 files should be more than sufficient.\n\nEvery statistic for export must be based on at least 11 individuals.\n\nStatistics that are based on 0-10 individuals must be suppressed.\n\nCounts must to be rounded.\n\nCounts below 1000 must be rounded to the nearest ten.\nCounts greater than or equal to 1000 must be rounded to the nearest hundred.\n\nFor example, a count of 868 would be rounded to 870, and a count of 1868 would be rounded to 1900.\n\nWe ask for rounded counts to limit the possibility of complementary disclosure risk.\n\nReported wages must be rounded to the nearest hundred.\nReported averages must be rounded to the nearest tenth.\nPercentages and proportions must be rounded.\n\nThe same rounding rules applied to counts must be applied to both the numerator and denominator before finding the percentage/proportion.\nPercentages must then be rounded to the nearest percent.\nProportions must be rounded to the nearest hundredth.\n\nExact percentiles cannot be exported.\n\nExact percentiles cannot be exported because they may represent a true data point.\nInstead, for example, you may calculate a “fuzzy median,” by averaging the true 45th and 55th percentiles.\n\nIf you are calculating fuzzy wage percentiles, you will need to round to the nearest hundred after calculating the fuzzy percentile.\nIf you are calculating fuzzy percentiles for counts of individuals, you will need to round to the nearest 10 if the count is less than 1000 and to the nearest hundred if the count is greater than or equal to 1000.\n\n\nExact maxima and minima cannot be exported.\n\nMaxima and minima cannot be exported because they will correspond to a true data point.\nSuppress maximum and minimum values in general.\nYou may replace an exact maximum or minimum with a top-coded value or a fuzzy maximum or minimum value.\n\nFor example: If the maximum value for earnings is 154,325, it could be top-coded as ‘100,000+’. Another permissible approach using this example would be calculating a fuzzy maximum value, as shown in the box plot example.\n\n\nComplementary suppression\n\nIf your files include totals or your files are dependent on a preceding or subsequent file, you may need to be mindful of complementary disclosure risks - that is assessing if the file totals or the separate files, when read together, might disclose information about less than 11 individuals in the data in a way that a single, simpler file would not.\nTeam leads and export reviewers will work with you on implementing any necessary complementary suppression techniques. This is more likely to happen when exporting both totals and subtotals.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#supporting-documentation",
    "href": "06_Presentation_prep.html#supporting-documentation",
    "title": "Presentation Preparation",
    "section": "Supporting Documentation",
    "text": "Supporting Documentation\nAs mentioned above, you will need to provide additional information to accompany each of the files requested for export for them to be approved by the reviewers.\n\nUnderlying counts\nYou will need to provide a table with underlying counts of individuals for each statistic depicted in the file(s) requested for export. It is often easiest to have a corresponding counts file for each file requested for export - we will adhere to this approach in working through the examples in the notebook.\n\nYou will need to include both the rounded and the unrounded counts of individuals.\nIf percentages or proportions are to be exported, you must report both the rounded and the unrounded counts of individuals for the numerator and denominator.\n\n\n\nCode\nPlease provide the code written to create every file requested for export and the code generating the corresponding underlying counts. It is important for the export reviewers to have the code to better understand what exactly was done and replicate results. Thus, it is important to document every step of the analysis in your code file(s).",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#documentation-memo",
    "href": "06_Presentation_prep.html#documentation-memo",
    "title": "Presentation Preparation",
    "section": "Documentation Memo",
    "text": "Documentation Memo\nThe documentation memo is necessary to include in the export request, as it describes each file and potential relationships across files. An example documentation file pertaining to the outputs prepared in this notebook is available in the Notebooks subfolder in the P drive. A quick link is available here as well.\nBroadly, the following information should be detailed per file:\n\nThe source dataset(s) used to generate the output file. If a subset is used, describe the sample restrictions.\nProgram(s) that produced the file (e.g., R, Stata, Python, etc.)\nFile name containing underlying research sample counts for this file\nFile name(s) that contain supporting statistics required with the dataset\nFile name(s) containing the code used to create this file\nAny additional comments to help the reviewers to understand the file or its context.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#steps-for-export",
    "href": "06_Presentation_prep.html#steps-for-export",
    "title": "Presentation Preparation",
    "section": "Steps for Export",
    "text": "Steps for Export\nWe will adhere to the following steps in preparing this table for export:\n\nCreate columns containing the total counts of unique people - this has already been done (npersons).\nRedact values\n\nValues with individual counts below 11 must be removed.\n\nRound values\n\nCounts below 1000 rounded to the nearest ten\nCounts above or equal to 1000 rounded to the nearest hundred\nPercentages rounded to the nearest percent",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#preparation",
    "href": "06_Presentation_prep.html#preparation",
    "title": "Presentation Preparation",
    "section": "Preparation",
    "text": "Preparation\nWe have our data frame containing the information we wish to export. The next couple steps are done concurrently. We’ll apply the rounding rules and then the redaction rules. The resulting data frame contains all the information we need for the supporting documentation files.\n\nNote: We are replacing all values that do not satisfy our disclosure rules with NA. The final column, pct_rounded is the last column in the data frame.\n\n\nexport_1_data &lt;- export_1 %&gt;% \n  #applying rounding rules, if counts less than 1000 then round to nearest 10, else round to nearest 100\n  mutate(\n    npersons_rounded = ifelse(npersons &lt; 1000, round(npersons, -1), round(npersons, -2)),\n    #applying redaction rules and then rounding rules for percentages\n    pct_rounded = ifelse(npersons &lt; 11, NA, round(100*npersons_rounded/sum(npersons_rounded),0))\n  )\n\nexport_1_data\n\nThis data frame now has all of the necessary underlying information for export review. After applying export rules, we recommend comparing the disclosure-proofed output to the original, which may also reveal complementary disclosure issues. Here, since multiple rows of pct_rounded were redacted, we do not need to worry about complementary disclosure. Let’s save this data frame as a csv in our Data folder in our U: drive.\nAlthough this file will not be exported, it will be used by the export team to make sure the figure satisfies the export requirements.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#saving-output",
    "href": "06_Presentation_prep.html#saving-output",
    "title": "Presentation Preparation",
    "section": "Saving Output",
    "text": "Saving Output\nFor the code in this section to work, you will need a folder called “Data” to save the table using the code below, which was created at the beginning of the notebook.\n\n# saving underlying data for supporting documentation\nwrite_csv(export_1_data, sprintf('%s/export_1_data.csv', data_dir))\n\nNow that we have saved the underlying counts that we need for the final table, we will now save the final table for export in our Output folder. We do this after removing the non-rounded counts and percentages, as well as any unnecessary columns.\n\nexport_1_final &lt;- export_1_data %&gt;%\n  select(eth_recode_person, pct_rounded)\n\n# saving table for export review\nwrite_csv(export_1_final, sprintf('%s/export_1.csv', figures_dir))",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#steps-for-export-1",
    "href": "06_Presentation_prep.html#steps-for-export-1",
    "title": "Presentation Preparation",
    "section": "Steps for Export",
    "text": "Steps for Export\nWe will adhere to the following steps in preparing this table for export:\n\nCreate columns containing the total counts of unique people - again, already calculated\nRedact values\n\nValues with individual counts below 11 must be removed.\n\nRound values\n\nCounts below 1000 rounded to the nearest ten\nCounts above or equal to 1000 rounded to the nearest hundred\n\nCreate visual with disclosure-proofed values\n\nThis part is essiential! We need to make sure we are applying the appropriate values to the visual.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#preparation-1",
    "href": "06_Presentation_prep.html#preparation-1",
    "title": "Presentation Preparation",
    "section": "Preparation",
    "text": "Preparation\nWe will start by regenerating the underlying data frame, which connects our cohort to employment outcomes:\n\nSQL Querydbplyr query\n\n\n\nqry &lt;- \"\nSELECT nc.*, \n    wage.year_quarter_key as wage_year_quarter_key,\n    wage.ui_quarterly_wages,\n        --CAN CREATE NEW VARIABLE FOR WAGE QUARTER RELATIVE TO TANF EXIT \n    wage.year_quarter_key - nc.exit_year_quarter_key AS relative_quarter\nFROM tr_e2e.nb_cohort nc \nLEFT JOIN tr_e2e.fact_person_ui_wage wage ON\n    --include ui_quarterly_wages &gt; 0 in join clause to maintain structure of left join\n    (nc.person_key = wage.person_key AND wage.ui_quarterly_wages &gt; 0 AND\n        --add additional clause to limit wage record focus for within 5 quarters of exit \n        nc.exit_year_quarter_key &lt;= wage.year_quarter_key + 5 AND nc.exit_year_quarter_key &gt;= wage.year_quarter_key - 5\n    )\nORDER BY nc.person_key, relative_quarter\n\"\n\ncohort_emp &lt;- dbGetQuery(con, qry)\n\nhead(cohort_emp)\n\n\n\n\nnc &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"nb_cohort\"))\n\nwage &lt;- con %&gt;% \n  tbl(in_schema(schema = \"tr_e2e\",\n                table = \"fact_person_ui_wage\")) %&gt;%\n  filter(ui_quarterly_wages &gt; 0) %&gt;%\n  select(person_key, year_quarter_key, ui_quarterly_wages) %&gt;%\n  rename(wage_year_quarter_key = year_quarter_key) %&gt;%\n  # cannot join on computer variables, so need to create before join\n  mutate(\n    wage_year_quarter_key_high = wage_year_quarter_key + 5,\n    wage_year_quarter_key_low = wage_year_quarter_key - 5\n  )\n\ncohort_emp &lt;- nc %&gt;%\n  left_join(\n    wage, \n    # join_by supports inequality conditions (ex. greater than or equal to)\n    join_by(person_key, exit_year_quarter_key &lt;= wage_year_quarter_key_high, exit_year_quarter_key &gt;= wage_year_quarter_key_low)\n  ) %&gt;%\n  mutate(\n    relative_quarter = wage_year_quarter_key - exit_year_quarter_key\n  ) %&gt;%\n  select(-c(wage_year_quarter_key_low, wage_year_quarter_key_high)) %&gt;%\n  arrange(person_key, relative_quarter) %&gt;%\n  collect()\n\nhead(cohort_emp)\n\n\n\n\nOur next step is to take our data frame, cohort_emp, and structure it to fit our visual. We need to calculate the employment for all quarters relative to exit. Instead of filtering for specific relative_quarter values, as we did in the previous notebook, we will comment that code out to find employment rates for all of our quarters of interest.\n\n# find denominator\ntotal_cohort &lt;- cohort_emp %&gt;%\n  summarize(\n    n_ppl = n_distinct(person_key)\n  ) %&gt;%\n  pull(n_ppl)\n\nexport_2_data &lt;- cohort_emp %&gt;%\n  # filter(relative_quarter %in% c(2, 4)) %&gt;%\n  group_by(relative_quarter) %&gt;%\n  summarize(\n    n_people = n_distinct(person_key)\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(total_cohort = total_cohort) %&gt;%\n  # filter(n == 2) %&gt;%\n  mutate(\n    emp_rate = 100*n_people/total_cohort\n  ) \n\nexport_2_data\n\nWe will now complete steps 2 and 3 as listed above in tandem.\n\nexport_2_data &lt;- export_2_data %&gt;% \n  #applying rounding rules, if counts less than 1000 then round to nearest 10, else round to nearest 100\n  mutate(n_people_rounded = ifelse(n_people &lt; 1000, round(n_people, -1), round(n_people, -2)),\n         total_cohort_rounded = round(total_cohort, -1),\n         #applying redaction rules and then rounding rules for percentages\n         emp_rate_rounded = ifelse(n_people &lt; 11, NA, round(100*n_people_rounded/(total_cohort_rounded),0))) %&gt;%\n  # filter out relative_quarter of NA...by-product of join\n  filter(!is.na(relative_quarter))\n\nhead(export_2_data)\n\nSince this data frame contains all the underlying information we need for our supporting file, we will hold onto this data frame and eventually save this as a csv to submit with our export request.\nNow that we have all necessary information and prepared our underlying file, we can start to build the visual! If you would like a refresher on visualization in R, you can open the drop-down bar, “ggplot2 refresher,” below:\n\n\n\n\n\n\nggplot2 refresher\n\n\n\n\n\nRecall the structure of traditional ggplot2 syntax:\n\nStart with the ggplot() statement.\nThen, supply a dataset and aesthetic mapping with x pertaining to the variable on the x-axis, and so on, for example: ggplot(dataset, aes(x = ..., y = ...).\nFrom there, provide a geometry type for your plot, represented by geom_*, to convey the desired type of visualization. For example, geom_line() will plot a line, geom_point() will plot points (think scatterplot).\nFinally, add additional layers if necessary using +, which we will use to add other customization to the plot, including adding labels and titles.\nIf you like using the other tidyverse packages like dplyr, you can connect your data processing and summary workflow directly to ggplot() using the pipe operator %&gt;% .\nUse the ggsave() function directly after your ggplot() workflow to save the image to your project folder. For example, a complete workflow demonstrated on the publicly available mtcars dataset could resemble:\n\nlibrary(tidyverse)\nmtcars %&gt;%\n  ggplot(aes(x = cyl, y = mpg, color = factor(cyl), group = cyl)) + \n  geom_point()\n  \nggsave(filename = \"P:/my-project/my-team-folder/myplot.png\", dpi = \"print\")\n\n\n\nWe will start with a basic line plot, visualizing relative_quarter on the x-axis and emp_rate_rounded on the y-axis.\n\nexport_2_visual &lt;- export_2_data %&gt;% \n  ggplot(aes(x = relative_quarter, y = emp_rate_rounded)) +\n  geom_line() \n\nexport_2_visual\n\nWe have created our initial line graph, but it can be improved. Specifically, we can adjust the axes, add labels, adjust the line width, and select a different background theme.\n\nexport_2_visual &lt;- export_2_visual +\n  # adjust x axis\n  scale_x_continuous(\n    # add axis label\n    name = 'Quarters Relative to Exit',\n    # adjust ticks to include each quarter pre- and post-exit in the data frame\n    breaks=seq(-5, 5, 1)\n  ) + \n  # adjust y axis range to start at 0\n  ylim(0, 60) +\n  labs(\n      # Add a title that conveys the main takeaway of the graph\n      title = \"Employment Rate Declines After the First Quarter Post Exit\", \n      # cite the source of your data\n      caption = 'Source: Arkansas TANF and UI Wage Data',\n      y = 'Rounded Employment Rate'\n    ) +  \n  geom_line(size = 1.1) +\n  theme_classic()\n\nexport_2_visual\n\nIf we wanted to highlight specific values on the line, we can do so using geom_text(). Let’s say we wanted to highlight the employment rate at the quarter of TANF exit.\n\nNote: We could have taken a different approach to this visual, instead treating the y-axis as employment rate by quarter relative to it at exit.\n\n\nlabel_q0 &lt;- export_2_data %&gt;%\n  filter(relative_quarter == 0) %&gt;%\n  pull(emp_rate_rounded)\n\nexport_2_visual &lt;- export_2_visual +\n  geom_text(\n    x= 0, \n    # adjust to not overlap with line\n    y = label_q0 + 2,\n    # add context to label\n    label =  paste0('At exit: ', label_q0, '%', sep = ''),\n    check_overlap = TRUE\n  )\n\nexport_2_visual",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#saving-output-1",
    "href": "06_Presentation_prep.html#saving-output-1",
    "title": "Presentation Preparation",
    "section": "Saving Output",
    "text": "Saving Output\nWe can then save this file in our working directory.\n\n# saving visual for export review\nggsave(export_2_visual,\n       filename = sprintf('%s/export_2_line_plot.png', figures_dir),\n       dpi = \"print\",\n       width = 7, height = 5)\n\n# saving underlying data for supporting documentation\nwrite_csv(export_2_data, sprintf('%s/export_2_data.csv', data_dir))",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#steps-for-export-2",
    "href": "06_Presentation_prep.html#steps-for-export-2",
    "title": "Presentation Preparation",
    "section": "Steps for Export",
    "text": "Steps for Export\nThis export file is a bit different than the others. While we still have to show the underlying counts and round certain values, we also have to calculate the fuzzy min, max, and other percentiles in a box plot. As mentioned earlier in this notebook, we cannot export a true percentiles because it could represent a single data point. Instead, we will manually recreate the box plot using fuzzy input values based on the underlying data. In total, we will adhere to the following steps in preparing this table for export:\n\nCreate columns containing the total counts of unique people contributing to the distribution\nRecalculate our input values for the fuzzy box plot\nRedact values\n\nValues with individual counts below 11 must be removed.\n\nRound values\n\nCounts below 1000 rounded to the nearest ten\nCounts above or equal to 1000 rounded to the nearest hundred\n\nCalculate fuzzy input values for the box plot\n\nWe can do this by averaging the 45th and 55th percentiles\n\nCreate visual with disclosure proofed values\n\nThis part is essiential! We need to make sure we are applying the appropriate values to the visual.\n\n\nWe already have read in the base data frame we need to create this visual, cohort_emp in the Export 2 Section. This plot will display earnings distributions for our cohort in their second and fourth quarters after exit.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#preparation-2",
    "href": "06_Presentation_prep.html#preparation-2",
    "title": "Presentation Preparation",
    "section": "Preparation",
    "text": "Preparation\nFor reference, let’s create the initial true box plot:\n\ncohort_emp %&gt;%\n  mutate(\n    ui_quarterly_wages = as.numeric(ui_quarterly_wages),\n    # set quarter to factor so it is not treated as a numeric value\n    relative_quarter = as.factor(relative_quarter)\n  ) %&gt;%\n  filter(relative_quarter %in% c(2,4)) %&gt;%\n  ggplot(aes(x=relative_quarter, y=ui_quarterly_wages)) +\n  geom_boxplot()\n\nNow that we have an idea of what we want our visual to look like, we need to start preparing it for export. Keep in mind our final product will not look exactly like this. We will first calculate the fuzzy input values and then apply the rounding and redaction rules. Also, since the outliers, as represented by dots in each plot, reference individual values, we will not be able to include them in the disclosure-proofed version of the file. We define fuzzy percentiles as averages of the true percentiles five points away. For example, a fuzzy median (50th percentile) will be calculated by averaging the true 45th and 55th percentiles. The maximum and minimum values will be “fuzzified” using a similar approach, instead taking the average of the endpoint value and the percentile five points away.\nAs we create the adjusted input values for the box plot, we will also calculate the number of individuals contributing to each distribution, saving the counts in n_ppl.\n\n# steps 1 and 2 for export preparation\nexport_3_data &lt;- cohort_emp %&gt;%\n  mutate(\n    ui_quarterly_wages = as.numeric(ui_quarterly_wages), #transform wages to numeric to fit in our plot\n    relative_quarter = as.factor(relative_quarter) #make the quarter a factor so R treats it as a categorical variable\n  ) %&gt;% \n  # calculate values per quarter, our grouping variable \n  group_by(relative_quarter) %&gt;%\n  # ignore na wages here so we don't need to add an argument for each calculation below\n  filter(\n    !is.na(ui_quarterly_wages),\n    relative_quarter %in% c(2, 4)\n  ) %&gt;%\n  summarize(\n    n_ppl = n_distinct(social_security_number),\n    fuzzy_25 = (quantile(ui_quarterly_wages, .20) + quantile(ui_quarterly_wages, .30))/2,\n    true_25 = (quantile(ui_quarterly_wages, .25)),\n    fuzzy_50 = (quantile(ui_quarterly_wages, .45) + quantile(ui_quarterly_wages, .55))/2,\n    true_50 = (quantile(ui_quarterly_wages, .50)),\n    fuzzy_75 = (quantile(ui_quarterly_wages, .70) + quantile(ui_quarterly_wages, .80))/2,\n    true_75 = (quantile(ui_quarterly_wages, .75)),\n    fuzzy_min = (quantile(ui_quarterly_wages, 0) + quantile(ui_quarterly_wages, .05))/2,\n    true_min = quantile(ui_quarterly_wages, 0),\n    fuzzy_max = (quantile(ui_quarterly_wages, .95) + quantile(ui_quarterly_wages, 1))/2,\n    true_max = quantile(ui_quarterly_wages, 1)\n  )\n\nexport_3_data\n\nOur next step is to round the fuzzy input values and apply redaction rules if necessary. Before doing so, though, we recommend comparing the fuzzy and true values to make sure that the “fuzzied” box plot representation is not distorted too much relative to the true underlying distribution.\n\nexport_3_data &lt;- export_3_data %&gt;%\n  mutate(\n    fuzzy_min_rounded = ifelse(n_ppl &lt; 11, NA, round(fuzzy_min, -2)),\n    fuzzy_25_rounded = ifelse(n_ppl &lt; 11, NA, round(fuzzy_25, -2)),\n    fuzzy_50_rounded = ifelse(n_ppl &lt; 11, NA, round(fuzzy_50, -2)),\n    fuzzy_75_rounded = ifelse(n_ppl &lt; 11, NA, round(fuzzy_75, -2)),\n    fuzzy_max_rounded = ifelse(n_ppl &lt; 11, NA, round(fuzzy_max, -2))\n    )\n\nexport_3_data\n\nWe have everything we need to create our visual and create our supporting documentation file. Our next step is to create the visual using the rounded values. We will also add labels, denote the fuzzy median values (this time using annotate() instead of geom_text(), and adjust the theme.\n\n# 2nd quarter median\nq2_med &lt;- export_3_data %&gt;% \n  filter(relative_quarter == 2) %&gt;% \n  pull(fuzzy_50_rounded)\n\n# 2nd quarter factor\nq2_factor &lt;- export_3_data %&gt;% \n  filter(relative_quarter == 2) %&gt;% \n  pull(relative_quarter)\n\n# 4th quarter median\nq4_med &lt;- export_3_data %&gt;% \n  filter(relative_quarter == 4) %&gt;% \n  pull(fuzzy_50_rounded)\n\n# 4th quarter factor\nq4_factor &lt;- export_3_data %&gt;% \n  filter(relative_quarter == 4) %&gt;% \n  pull(relative_quarter)\n\nexport_3_visual &lt;- export_3_data %&gt;%\n  ggplot(aes(x=relative_quarter, ymin=fuzzy_min_rounded, lower = fuzzy_25_rounded, middle = fuzzy_50_rounded, upper = fuzzy_75_rounded, ymax = fuzzy_max_rounded)) +\n  geom_boxplot(stat = 'identity', width = 0.8) + \n  annotate(\n    \"text\", \n     x = q2_factor,\n    # adjust text height\n     y = q2_med + 400,\n     label = q2_med\n  ) +\n  annotate(\n    \"text\",\n     x = q4_factor,\n    # adjust text height\n     y = q4_med + 400,\n     label = q4_med\n  ) + \n  labs(\n    title = 'Exiters 4 Quarters after Exit Tend to Have Slightly Higher Wages than at \\n2 Quarters After Exit',\n    x='Quarter After TANF Exit',\n    y = 'Earnings',\n    caption = 'Source: Arkansas TANF and UI Wage Data'\n  ) +\n  theme_classic()\n\nexport_3_visual",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#saving-output-2",
    "href": "06_Presentation_prep.html#saving-output-2",
    "title": "Presentation Preparation",
    "section": "Saving Output",
    "text": "Saving Output\n\n# save the figure for export review\nggsave(export_3_visual,\n       filename = sprintf('%s/export_3_box_plot.png', figures_dir),\n       dpi = \"print\",\n       width = 7, height = 5)\n\n# save the underlying counts for supporting documentation\nwrite_csv(export_3_data, sprintf('%s/export_3_data.csv', data_dir))",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#steps-for-export-3",
    "href": "06_Presentation_prep.html#steps-for-export-3",
    "title": "Presentation Preparation",
    "section": "Steps for Export",
    "text": "Steps for Export\nWe’ll follow a similar set of steps as we did in working through the previous examples in this notebook.\n\nCreate columns containing the total counts of unique people\nRedact values\n\nValues with individual counts below 11 must be removed.\n\nRound values\n\nCounts below 1000 rounded to the nearest ten\nCounts above or equal to 1000 rounded to the nearest hundred\n\nCreate visual with disclosure proofed values\n\nThis part is essiential! We need to make sure we are applying the appropriate values to the visual.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#preparation-3",
    "href": "06_Presentation_prep.html#preparation-3",
    "title": "Presentation Preparation",
    "section": "Preparation",
    "text": "Preparation\nWe already have read in the base data frame we need to create this visual, cohort_emp, in the Export 2 section. As a reminder, cohort_emp is the linked version of our original cohort to employment outcomes and contains all records from the UI wage records for our cohort within a specific time range, with one record per person/quarter, where that information exists. Like that second export example, this plot will build on the example from the Measurement notebook to include information from five quarters prior to TANF exit all the way to five quarters after exit, instead of just focusing on quarters 2 and 4 after exit.\nLet’s first confirm the possible values for the relative_quarter variable. Any NA value means they were not in the wage records at all during this time frame.\n\ncohort_emp %&gt;% \n  distinct(relative_quarter) %&gt;%\n  arrange(relative_quarter)\n\nFor these individuals who did not match to our cohort, we will set the relative_quarter to 1, so that we will eventually be able to have one observation for each individual/quarter combination. There are other variables in cohort_emp we will use to differentiate between employed and not employed records.\n\ncohort_emp &lt;- cohort_emp %&gt;%\n  # set NA relative_quarters to 1\n  mutate(\n    relative_quarter = ifelse(is.na(relative_quarter), 1, relative_quarter)\n  )\n\n# confirm potential values of relative_quarter\ncohort_emp %&gt;% \n  distinct(relative_quarter) %&gt;%\n  arrange(relative_quarter)\n\nNow that we have all individuals, as well as instances of all desired relative_quarter values, we can leverage the tidyverse’s complete() function, which will add additional rows for any person/quarter combinations that do not currently exist. These additional rows will correspond to not employed as per our eventual patterns.\n\n# complete file\n# set ui_quarter_wages to NA to identify employment records\ncompleted &lt;- cohort_emp %&gt;% \n  complete(social_security_number, relative_quarter, fill=list(ui_quarterly_wages=NA))\n\n# see that n should be a multiple of n_dist\ncompleted %&gt;%\n  summarize(\n    n = n(),\n    n_inds = n_distinct(social_security_number),\n    # should have 11 rows per person\n    test = n_inds*11 == n\n  )\n\nNow that we have created completed, we just need to aggregate and manipulate the data frame so that each column is a quarter and each observation is an individual, with the corresponding columns indicating whether the individual was employed in the given quarter. To start, let’s create a variable wage_ind, which will be “yes” if the individual had greater than 0 earnings in the quarter, and “no” otherwise. Additionally, for each column included in the manipulation, we will change the quarter_number value from 1, 2, 3, 4 to Q1, Q2, Q3, Q4 and so on and refer to this new variable as quarter.\n\n# create wage_ind and quarter variables\npatterns &lt;- completed %&gt;%\n  mutate(\n    wage_ind = ifelse(ui_quarterly_wages &lt;= 0 | is.na(ui_quarterly_wages), \"no\", \"yes\"),\n    quarter = paste(\"Q\", relative_quarter, sep=\"\")\n  ) %&gt;%\n  select(social_security_number, relative_quarter, ui_quarterly_wages, wage_ind, quarter)\n\nhead(patterns)\n\nNow, we need to pivot the data frame so that each column is a value of quarter, with wage_ind values for the social_security_number values. To do so, we will use pivot_wider(), which allows us to take a tidy data frame (one observation per row) and “widen” it so that each column becomes values from what was previously a single column (quarter) and the rows are occupied by those from a corresponding column (wage_ind).\n\n# find most common employment patterns\npatterns_wide &lt;- patterns %&gt;%\n  select(social_security_number, quarter, wage_ind) %&gt;%\n  pivot_wider(names_from = quarter, values_from = wage_ind) %&gt;%\n  # after pivot can summarize by each quarter column to find amount of people per row\n  group_by(`Q-5`, `Q-4`, `Q-3`, `Q-2`, `Q-1`, Q0, Q1, Q2, Q3, Q4, Q5) %&gt;%\n  summarize(\n    ind_cnt = n_distinct(social_security_number)\n  ) %&gt;%\n  arrange(desc(ind_cnt)) %&gt;%\n  ungroup()\n\nhead(patterns_wide)\n\nBefore we can visualize this information, we need to apply the appropriate rounding and suppression rules.\n\nexport_4_data &lt;- patterns_wide %&gt;%\n  mutate(\n    n_ind_cnt_rounded = ifelse(ind_cnt &gt; 999, round(ind_cnt, digits = -2), round(ind_cnt, digits = -1)),\n    n_total = sum(ind_cnt),\n    n_total_rounded = ifelse(n_total &gt; 999, round(n_total, digits = -2), round(n_total, digits = -1)),\n    prop_rounded = ifelse(ind_cnt &lt; 11, NA, round(n_ind_cnt_rounded/n_total_rounded, digits = 2)), \n    percent_rounded = percent(prop_rounded)\n  ) %&gt;%\n  filter(!is.na(prop_rounded))\n\nexport_4_data\n\nWe are going to convert the data back into a long format using the pivot_longer() before we can use the data as an input to geom_tile(), the function for creating heatmaps in ggplot2. Before doing so, let’s save a vector of the rounded counts and percentages for each pattern for future reference in the visualization.\n\ncounts_percent_rounded &lt;- export_4_data %&gt;%\n  mutate(\n    counts_pcts = paste(export_4_data$n_ind_cnt_rounded, \"(\", export_4_data$percent_rounded,\")\")\n  ) %&gt;%\n  pull(counts_pcts)\n\n\n# create data frame so that each row corresponds to a pattern/quarter/employment status observation\n# seq_along() will create a vector to track each pattern\nexport_4_data_long &lt;- export_4_data %&gt;%\n  mutate(\n    Pattern = seq_along(1:nrow(export_4_data))\n  ) %&gt;%\n  select(starts_with(\"Q\"), Pattern) %&gt;% \n  pivot_longer(names_to = 'Quarter', values_to = 'Employed', -Pattern) \n\nhead(export_4_data_long)\n\nNow we are ready to create the visualization using the geom_tile() layer, and will add in all updates at once. Since we plan to use different color gradients, we call in scale_fill_brewer() to find a colorblind-friendly palette for visualization.\n\n# Full code for the plot\n\nlevels = ordered(1:11)  # specify in which order to add the rows from our wide table (called \"patterns\") \n                                        \n\nexport_4_data_long$Quarter &lt;- factor(export_4_data_long$Quarter, levels=c(\"Q-5\", \"Q-4\", \"Q-3\", \"Q-2\", \"Q-1\", \"Q0\", \"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\")) # we want to preserve the same ordering of rows as they are sorted in the visual from first to last\n\nexport_4_visual &lt;-export_4_data_long %&gt;%\n  # sort y-axis according to levels specified above\n  ggplot(aes(x = Quarter, y = ordered(Pattern, levels=rev(levels)))) +\n  # fill the table with value from Employed column, create black contouring\n  geom_tile(aes(fill = Employed), colour = 'black') +       \n   # specify a colorblind-friendly palette\n  scale_fill_brewer(\"Employed\", palette = \"Paired\") +     \n  # include x-axis labels on top of the plot\n  scale_x_discrete(position = 'top') +                                                           \n  labs(\n    # Label Y axis\n    y = \"Counts (Percentages)\",\n    # Label X axis\n    x = \"Quarter Relative to TANF Exit\" ,\n    # Add a title that reflects the main takeaway of the figure\n    title = \"The most common employment pattern of employment around TANF exit is \\nnever employed\",\n    # Cite the source of your data\n    caption = \"Source: Arkansas TANF and UI Wage Records\"\n  ) +\n  # rename the y-axis ticks to correspond to the counts from the table\n  scale_y_discrete(labels=rev(counts_percent_rounded)) +\n  # update theme\n  theme_classic()\n\nexport_4_visual\n\nThis is a great example of the limitations of small n sizes. Because the other patterns had counts less than 11, this visual can only display 2 patterns. When you are developing your visuals, the results you wish to show are limited by the disclosure rules.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#saving-output-3",
    "href": "06_Presentation_prep.html#saving-output-3",
    "title": "Presentation Preparation",
    "section": "Saving Output",
    "text": "Saving Output\n\n# save the figure for export review\nggsave(export_4_visual,\n       filename = sprintf('%s/export_4_heat_map.png', figures_dir),\n       dpi = \"print\",\n       width = 7, height = 5)\n\n# save the underlying counts for supporting documentation\nwrite_csv(export_4_data, sprintf('%s/export_4_data.csv', data_dir))",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#unit-testing-export-file-1",
    "href": "06_Presentation_prep.html#unit-testing-export-file-1",
    "title": "Presentation Preparation",
    "section": "Unit Testing Export File 1",
    "text": "Unit Testing Export File 1\nThe first export file contains the tabular output of race and ethnicity for our cohort. We want to make sure that we’ve applied the redaction rules correctly.\n\n# Define a unit test\ntest_that(\"Replace counts less than 11 with NA\", {\n  counts &lt;- export_1_data$npersons\n  # Expected result, we except to see rounded percentages with redaction applied\n  expected_stats &lt;- export_1_final$pct_rounded\n  # Apply the function\n  actual_result &lt;- check_redaction_rules_applied(counts, expected_stats)\n  # Assert that the result matches the expected result\n  expect_equal(actual_result, expected_stats)\n})\n\nOur first test passed! We confirmed that there aren’t any counts below 11 and that the rounding rules were applied. This is the only test we need to perform on this file.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#unit-testing-export-file-2",
    "href": "06_Presentation_prep.html#unit-testing-export-file-2",
    "title": "Presentation Preparation",
    "section": "Unit Testing Export File 2",
    "text": "Unit Testing Export File 2\nOur second export file is a line graph depicting employment rates. There are a few things we want to check. First we’ll check that the redaction rules were applied. Since we are visualizing the employment rates we’ll check that the appropriate redaction rules are applied.\n\ntest_that(\"Replace counts less than 11 with NA\", {\n  counts &lt;- export_2_data$n_people\n  # Expected result, we except to see rounded emp rates with redaction applied\n  expected_stats &lt;- export_2_data$n_people\n  # Apply the function\n  actual_result &lt;- check_redaction_rules_applied(export_2_data$n_people, export_2_data$n_people)\n  # Assert that the result matches the expected result\n  expect_equal(actual_result, expected_stats)\n})\n\nThis test passed so the redaction rules are applied correctly. Remember, unique counts less than 11 have to be redacted! Now we’ll test that the rounding rules are applied.\n\n#checking that the column n_people is rounded\ntest_that(\"Rounding rules are applied\", {\n  expect_true(check_rounding_of_counts(export_2_data$n_people, export_2_data\n                                       $n_people_rounded))\n})\n\n#checking that the column total_cohort is rounded\ntest_that(\"Rounding rules are applied for counts\", {\n  expect_true(check_rounding_of_counts(export_2_data$total_cohort, export_2_data\n                                       $total_cohort_rounded))\n})\n\n#checking that the column emp_rate_rounded is rounded\ntest_that(\"Rounding rules are applied for percentages\", {\n  expect_true(check_rounding_of_percents(export_2_data$n_people_rounded, export_2_data$total_cohort_rounded, export_2_data$emp_rate_rounded))\n})\n\nAll 3 tests passed.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#unit-testing-export-file-3",
    "href": "06_Presentation_prep.html#unit-testing-export-file-3",
    "title": "Presentation Preparation",
    "section": "Unit Testing Export File 3",
    "text": "Unit Testing Export File 3\nOur third export file is a box plot showing median earnings after exit. Our first check will be ensuring that the counts are greater than 11. Since we are using multiple columns in our visual we’ll check the column n_ppl to ensure the counts are 11 or greater. Alternatively we can use the other unit test than checks if the redaction rules are applied. For the expected stats we can choose one of the fuzzy percentile columns. Both options are below.\n\n# Define a test case, this test will fail\ntest_that(\"Columns values are not less than 11\", {\n  expect_true(check_column_values_less_than_11(export_3_data$n_ppl))\n})\n\ntest_that(\"Replace counts less than 11 with NA\", {\n  counts &lt;- export_3_data$n_ppl\n  # Expected result, we except to see rounded emp rates with redaction applied\n  expected_stats &lt;- export_3_data$fuzzy_25_rounded\n  # Apply the function\n  actual_result &lt;- check_redaction_rules_applied(counts, expected_stats)\n  # Assert that the result matches the expected result\n  expect_equal(actual_result, expected_stats)\n})\n\nBoth of these tests passed!\nNow we’ll check if the fuzzy percentiles have been rounded. The tests if the values in the _rounded columns are rounded to the nearest 100.\n\ntest_that(\"Wages are rounded to the nearest 100\", {\n  \n  # Filter columns with \"_rounded\" in their name\n  rounded_columns &lt;- export_3_data %&gt;%\n    select(contains(\"_rounded\"))\n  \n  # Check rounding to nearest 100 for each rounded column\n  expect_true(all(sapply(rounded_columns, check_rounding_of_wages)))\n})",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "06_Presentation_prep.html#unit-testing-export-file-4",
    "href": "06_Presentation_prep.html#unit-testing-export-file-4",
    "title": "Presentation Preparation",
    "section": "Unit Testing Export File 4",
    "text": "Unit Testing Export File 4\nOur fourth export file is a heat map showing employment patterns by quarter. As before our first check will be ensuring that the counts are greater than 11. Since we are using multiple columns in our visual we’ll check the column n_ppl to ensure the counts are 11 or greater.\n\ntest_that(\"Columns values are not less than 11\", {\n  expect_true(check_column_values_less_than_11(export_4_data$ind_cnt))\n})\n\nThis test passed. Now we’ll check that the rounding rules are applied.\n\ntest_that(\"Rounding rules are applied\", {\n  expect_true(check_rounding_of_counts(export_4_data$ind_cnt, export_4_data\n                                       $n_ind_cnt_rounded))\n})\n\n#checking that the column n_total is rounded\ntest_that(\"Rounding rules are applied for counts\", {\n  expect_true(check_rounding_of_counts(export_4_data$n_total, export_4_data\n                                       $n_total_rounded))\n})\n\n#checking that the percent column is rounded\ntest_that(\"Rounding rules are applied for percentages\", {\n  expect_true(check_rounding_of_percents(export_4_data$n_ind_cnt_rounded, export_4_data$n_total_rounded, export_4_data$prop_rounded, percent = 1, digits = 2))\n})\n\nAll of our export files passed the unit test meaning we’ve applied our redaction and rounding rules correctly. Depending on your output you may need to write a custom function and unit test to check your own export files.",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Presentation Preparation</span>"
    ]
  },
  {
    "objectID": "dimensional_model_creation_scripts.html",
    "href": "dimensional_model_creation_scripts.html",
    "title": "Dimensional Model Scripts",
    "section": "",
    "text": "01 DDL (Creating and Permissioning Tables) Scripts\n/*==============================================================*/\n/* DBMS name:      Amazon Redshift Database                     */\n/* Created on:     9/7/2023 12:14:46 PM                         */\n/*==============================================================*/\n\n\ndrop table FACT_Person_Program_Observation_Quarter;\n\ndrop table FACT_Person_Program_Outcome;\n\ndrop table FACT_Person_Program_Participation;\n\ndrop table FACT_Person_UI_Wage;\n\ndrop table FACT_Person_Quarterly_Program_Enrollment;\n\ndrop table DIM_CIP;\n\ndrop table DIM_County;\n\ndrop table DIM_Intake_Characteristics;\n\ndrop table DIM_Person;\n\ndrop table DIM_Program;\n\ndrop table DIM_State;\n\ndrop table DIM_Year_Quarter;\n\n\n/*==============================================================*/\n/* Table: DIM_CIP                                               */\n/*==============================================================*/\ncreate table if not exists DIM_CIP (\n   CIP_Key BIGINT not null,\n   Classification_Code CHAR(7) not null,\n   Classification_Name VARCHAR(300) not null,\n   Category_Name VARCHAR(300) not null,\n   Series_Name VARCHAR(300) not null,\n   Series_Short_Name VARCHAR(300) not null,\n   Major_Group_Code CHAR(2) not null,\n   Major_Group_Name VARCHAR(300) not null,\n   constraint DIM_CIP_PK_IDX primary key (CIP_Key),\n    unique (Classification_Code)\n);\n\n/*==============================================================*/\n/* Table: DIM_County                                            */\n/*==============================================================*/\ncreate table if not exists DIM_County (\n   County_Key BIGINT not null,\n   County_FIPS_Code CHAR(5) not null,\n   County_Name VARCHAR(150) not null,\n   Rural_Urban_Continuum VARCHAR(300) not null,\n   Local_Workforce_Development_Area VARCHAR(30) not null,\n   constraint DIM_COUNTY_PK_IDX primary key (County_Key),\n    unique (County_FIPS_Code)\n);\n\n/*==============================================================*/\n/* Table: DIM_Intake_Characteristics                            */\n/*==============================================================*/\ncreate table if not exists DIM_Intake_Characteristics (\n   Intake_Characteristics_Key BIGINT not null,\n   Highest_School_Grade_Completed_at_Program_Entry VARCHAR(2) not null,\n   Highest_Education_Level_Completed_at_Program_Entry VARCHAR(100) not null,\n   School_Status_at_Program_Entry VARCHAR(100) not null,\n   Employment_Status_at_Program_Entry VARCHAR(100) not null,\n   Long_Term_Unemployment_at_Program_Entry VARCHAR(3) not null,\n   Exhausting_TANF_Within_2_Yrs_at_Program_Entry VARCHAR(3) not null,\n   Foster_Care_Youth_Status_at_Program_Entry VARCHAR(3) not null,\n   Homeless_or_Runaway_at_Program_Entry VARCHAR(3) not null,\n   Ex_Offender_Status_at_Program_Entry VARCHAR(3) not null,\n   Low_Income_Status_at_Program_Entry VARCHAR(3) not null,\n   English_Language_Learner_at_Program_Entry VARCHAR(3) not null,\n   Low_Levels_of_Literacy_at_Program_Entry VARCHAR(3) not null,\n   Cultural_Barriers_at_Program_Entry VARCHAR(3) not null,\n   Single_Parent_at_Program_Entry VARCHAR(3) not null,\n   Displaced_Homemaker_at_Program_Entry VARCHAR(3) not null,\n   constraint DIM_INTAKE_CHARACTERISTICS_PK_IDX primary key (Intake_Characteristics_Key)\n);\n\n/*==============================================================*/\n/* Table: DIM_Person                                            */\n/*==============================================================*/\ncreate table if not exists DIM_Person (\n   Person_Key BIGINT not null,\n   Person_UID CHAR(64) not null,\n   Date_of_Birth DATE not null,\n   Gender VARCHAR(10) not null,\n   Ethnicity_American_Indian_or_Alaska_Native VARCHAR(3) not null,\n   Ethnicity_Asian VARCHAR(3) not null,\n   Ethnicity_Black_or_African_American VARCHAR(3) not null,\n   Ethnicity_Hispanic_or_Latino VARCHAR(3) not null,\n   Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander VARCHAR(3) not null,\n   Ethnicity_White VARCHAR(3) not null,\n   Ethnicity_Other VARCHAR(3) not null,\n   constraint DIM_PERSON_PK_IDX primary key (Person_Key),\n    unique (Person_UID)\n);\n\n/*==============================================================*/\n/* Table: DIM_Program                                           */\n/*==============================================================*/\ncreate table if not exists DIM_Program (\n   Program_Key INTEGER not null,\n   Program_Name VARCHAR(75) not null,\n   constraint DIM_PROGRAM_PK_IDX primary key (Program_Key),\n    unique (Program_Name)\n);\n\n/*==============================================================*/\n/* Table: DIM_State                                             */\n/*==============================================================*/\ncreate table if not exists DIM_State (\n   State_Key INTEGER not null,\n   State_FIPS_Code CHAR(2) not null,\n   State_Abbreviation CHAR(2) not null,\n   State_Name VARCHAR(50) not null,\n   constraint DIM_STATE_PK_IDX primary key (State_Key),\n    unique (State_FIPS_Code),\n    unique (State_Abbreviation)\n);\n\n/*==============================================================*/\n/* Table: DIM_Year_Quarter                                      */\n/*==============================================================*/\ncreate table if not exists DIM_Year_Quarter (\n   Year_Quarter_Key INTEGER not null,\n   Calendar_Year CHAR(4) not null,\n   Calendar_Quarter CHAR(1) not null,\n   Quarter_Start_Date DATE not null,\n   Quarter_End_Date DATE not null,\n   constraint DIM_YEAR_QUARTER_PK_IDX primary key (Year_Quarter_Key),\n    unique (Calendar_Year, Calendar_Quarter)\n);\n\n/*==============================================================*/\n/* Table: FACT_Person_Program_Observation_Quarter               */\n/*==============================================================*/\ncreate table if not exists FACT_Person_Program_Observation_Quarter (\n   Person_Program_Observation_Quarter_ID BIGINT not null identity,\n   Person_Key BIGINT not null,\n   Program_Key INTEGER not null,\n   Observation_Year_Quarter_Key INTEGER not null,\n   County_of_Residence_Key BIGINT not null,\n   State_of_Residence_Key INTEGER not null,\n   CIP_Classification_Key BIGINT not null,\n   Enrolled_Entire_Quarter VARCHAR(3) not null,\n   Enrolled_First_Month_of_Quarter VARCHAR(3) not null,\n   Enrolled_Second_Month_of_Quarter VARCHAR(3) not null,\n   Enrolled_Third_Month_of_Quarter VARCHAR(3) not null,\n   Gross_Monthly_Income DECIMAL(14,2),\n   Net_Monthly_Income DECIMAL(14,2),\n   Date_of_Most_Recent_Career_Service DATE,\n   Received_Training VARCHAR(3) not null,\n   Eligible_Training_Provider_Name VARCHAR(75) not null,\n   Eligible_Training_Provider_Program_of_Study VARCHAR(100) not null,\n   Date_Entered_Training_1 DATE,\n   Type_of_Training_Service_1 VARCHAR(100) not null,\n   Date_Entered_Training_2 DATE,\n   Type_of_Training_Service_2 VARCHAR(100) not null,\n   Date_Entered_Training_3 DATE,\n   Type_of_Training_Service_3 VARCHAR(100) not null,\n   Participated_in_Postsecondary_Education_During_Program_Participation VARCHAR(3) not null,\n   Received_Training_from_Private_Section_Operated_Program VARCHAR(3) not null,\n   Enrolled_in_Secondary_Education_Program VARCHAR(3) not null,\n   Date_Enrolled_in_Post_Exit_Education_or_Training_Program DATE,\n   Youth_2nd_Quarter_Placement VARCHAR(50),\n   Youth_4th_Quarter_Placement VARCHAR(50),\n   Other_Reason_for_Exit VARCHAR(50) not null,\n   Migrant_and_Seasonal_Farmworker_Status VARCHAR(50) not null,\n   Individual_with_a_Disability VARCHAR(3) not null,\n   Zip_Code_of_Residence CHAR(5) not null,\n   Higher_Education_Student_Level VARCHAR(100) not null,\n   Higher_Education_Enrollment_Status VARCHAR(100) not null,\n   Higher_Education_Tuition_Status VARCHAR(100) not null,\n   constraint FACT_PERSON_PROGRAM_OBSERVATION_QUARTER_PK_IDX primary key (Person_Program_Observation_Quarter_ID),\n    unique (Person_Key, Program_Key, Observation_Year_Quarter_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OBSERVATION_QUARTER__DIM_PERSON foreign key (Person_Key) \n      references DIM_Person (Person_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OBSERVATION_QUARTER__DIM_PROGRAM foreign key (Program_Key) \n      references DIM_Program (Program_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OBSERVATION_QUARTER__DIM_YEAR_QUARTER foreign key (Observation_Year_Quarter_Key) \n      references DIM_Year_Quarter (Year_Quarter_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OBSERVATION_QUARTER__DIM_COUNTY foreign key (County_of_Residence_Key) \n      references DIM_County (County_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OBSERVATION_QUARTER__DIM_STATE foreign key (State_of_Residence_Key) \n      references DIM_State (State_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OBSERVATION_QUARTER__DIM_CIP foreign key (CIP_Classification_Key) \n      references DIM_CIP (CIP_Key)\n);\n\n/*==============================================================*/\n/* Table: FACT_Person_Program_Outcome                           */\n/*==============================================================*/\ncreate table if not exists FACT_Person_Program_Outcome (\n   Person_Program_Outcomes_ID BIGINT not null identity,\n   Person_Key BIGINT not null,\n   Program_Key INTEGER not null,\n   Exit_Year_Quarter_Key INTEGER not null,\n   Employed_in_1st_Quarter_After_Exit_Quarter VARCHAR(30) not null,\n   Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter VARCHAR(50) not null,\n   Earnings_1st_Quarter_After_Exit_Quarter DECIMAL(9,2),\n   Employed_in_2nd_Quarter_After_Exit_Quarter VARCHAR(30) not null,\n   Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter VARCHAR(50) not null,\n   Earnings_2nd_Quarter_After_Exit_Quarter DECIMAL(9,2),\n   Employed_in_3rd_Quarter_After_Exit_Quarter VARCHAR(30) not null,\n   Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter VARCHAR(50) not null,\n   Earnings_3rd_Quarter_After_Exit_Quarter DECIMAL(9,2),\n   Employed_in_4th_Quarter_After_Exit_Quarter VARCHAR(30) not null,\n   Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter VARCHAR(50) not null,\n   Earnings_4th_Quarter_After_Exit_Quarter DECIMAL(9,2),\n   Employment_Related_to_Training VARCHAR(3),\n   Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter VARCHAR(3) not null,\n   Type_of_Recognized_Credential_1 VARCHAR(100) not null,\n   Type_of_Recognized_Credential_2 VARCHAR(100) not null,\n   Type_of_Recognized_Credential_3 VARCHAR(100) not null,\n   Date_Attained_Recognized_Credential_1 DATE,\n   Date_Attained_Recognized_Credential_2 DATE,\n   Date_Attained_Recognized_Credential_3 DATE,\n   Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level DATE,\n   Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript DATE,\n   Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript DATE,\n   Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone DATE,\n   Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression DATE,\n   Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment DATE,\n   Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment DATE,\n   Date_Attained_Graduate_or_Post_Graduate_Degree DATE,\n   constraint FACT_PERSON_PROGRAM_OUTCOME_PK_IDX primary key (Person_Program_Outcomes_ID),\n    unique (Person_Key, Program_Key, Exit_Year_Quarter_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OUTCOME__DIM_PERSON foreign key (Person_Key) \n      references DIM_Person (Person_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OUTCOME__DIM_PROGRAM foreign key (Program_Key) \n      references DIM_Program (Program_Key),\n   constraint FK_FACT_PERSON_PROGRAM_OUTCOME__DIM_YEAR_QUARTER foreign key (Exit_Year_Quarter_Key) \n      references DIM_Year_Quarter (Year_Quarter_Key)\n);\n\n/*==============================================================*/\n/* Table: FACT_Person_Program_Participation                     */\n/*==============================================================*/\ncreate table if not exists FACT_Person_Program_Participation (\n   Person_Program_Participation_ID BIGINT not null identity,\n   Person_Key BIGINT not null,\n   Intake_Characteristics_Key BIGINT not null,\n   Program_Key INTEGER not null,\n   Entry_Year_Quarter_Key INTEGER not null,\n   Exit_Year_Quarter_Key INTEGER not null,\n   County_of_Residence_Key BIGINT not null,\n   State_of_Residence_Key INTEGER not null,\n   CIP_Classification_Key BIGINT not null,\n   Gross_Monthly_Income DECIMAL(14,2),\n   Net_Monthly_Income DECIMAL(14,2),\n   Date_of_Most_Recent_Career_Service DATE,\n   Received_Training VARCHAR(3) not null,\n   Eligible_Training_Provider_Name VARCHAR(75) not null,\n   Eligible_Training_Provider_Program_of_Study VARCHAR(100) not null,\n   Date_Entered_Training_1 DATE,\n   Type_of_Training_Service_1 VARCHAR(100) not null,\n   Date_Entered_Training_2 DATE,\n   Type_of_Training_Service_2 VARCHAR(100) not null,\n   Date_Entered_Training_3 DATE,\n   Type_of_Training_Service_3 VARCHAR(100) not null,\n   Participated_in_Postsecondary_Education_During_Program_Participation VARCHAR(3) not null,\n   Received_Training_from_Private_Section_Operated_Program VARCHAR(3) not null,\n   Enrolled_in_Secondary_Education_Program VARCHAR(3) not null,\n   Date_Enrolled_in_Post_Exit_Education_or_Training_Program DATE,\n   Youth_2nd_Quarter_Placement VARCHAR(50),\n   Youth_4th_Quarter_Placement VARCHAR(50),\n   Incarcerated_at_Program_Entry VARCHAR(3) not null,\n   Date_Released_from_Incarceration DATE,\n   Other_Reason_for_Exit VARCHAR(50) not null,\n   Migrant_and_Seasonal_Farmworker_Status VARCHAR(50) not null,\n   Individual_with_a_Disability VARCHAR(3) not null,\n   Zip_Code_of_Residence CHAR(5) not null,\n   Higher_Education_Student_Level VARCHAR(100) not null,\n   Higher_Education_Enrollment_Status VARCHAR(100) not null,\n   Higher_Education_Tuition_Status VARCHAR(100) not null,\n   constraint FACT_PERSON_PROGRAM_PARTICIPATION_PK_IDX primary key (Person_Program_Participation_ID),\n    unique (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key),\n   constraint FK_FACT_PERSON_PROGRAM_PARTICIPATION__DIM_PROGRAM foreign key (Program_Key) \n      references DIM_Program (Program_Key),\n   constraint FK_FACT_PERSON_PROGRAM_PARTICIPATION__DIM_YEAR_QUARTER__ENTRY_YEAR foreign key (Entry_Year_Quarter_Key) \n      references DIM_Year_Quarter (Year_Quarter_Key),\n   constraint FK_FACT_PERSON_PROGRAM_PARTICIPATION__DIM_PERSON foreign key (Person_Key) \n      references DIM_Person (Person_Key),\n   constraint FK_FACT_PERSON_PROGRAM_PARTICIPATION__DIM_YEAR_QUARTER__EXIT_YEAR foreign key (Exit_Year_Quarter_Key) \n      references DIM_Year_Quarter (Year_Quarter_Key),\n   constraint FK_FACT_PERSON_PROGRAM_PARTICIPATION__DIM_INTAKE_CHARACTERISTICS foreign key (Intake_Characteristics_Key) \n      references DIM_Intake_Characteristics (Intake_Characteristics_Key),\n   constraint FK_FACT_PERSON_PROGRAM_PARTICIPATION__DIM_COUNTY foreign key (County_of_Residence_Key) \n      references DIM_County (County_Key),\n   constraint FK_FACT_PERSON_PROGRAM__FACT_PERSON_PROGRAM_PARTICIPATION__DIM_CIP_DIM_CIP foreign key (CIP_Classification_Key) \n      references DIM_CIP (CIP_Key),\n   constraint FK_FACT_PERSON_PROGRAM__FACT_PERSON_PROGRAM_PARTICIPATION__DIM_STATE_DIM_STATE foreign key (State_of_Residence_Key) \n      references DIM_State (State_Key)\n);\n\n/*==============================================================*/\n/* Table: FACT_Person_UI_Wage                                   */\n/*==============================================================*/\ncreate table if not exists FACT_Person_UI_Wage (\n   Person_UI_Wage_ID BIGINT not null identity,\n   Person_Key BIGINT not null,\n   Year_Quarter_Key INTEGER not null,\n   UI_Quarterly_Wages DECIMAL(10,0) not null,\n   constraint FACT_PERSON_UI_WAGE_PK_IDX primary key (Person_UI_Wage_ID),\n    unique (Person_Key, Year_Quarter_Key),\n   constraint FK_FACT_PERSON_UI_WAGE__DIM_PERSON foreign key (Person_Key) \n      references DIM_Person (Person_Key),\n   constraint FK_FACT_PERSON_UI_WAGE__DIM_YEAR_QUARTER foreign key (Year_Quarter_Key) \n      references DIM_Year_Quarter (Year_Quarter_Key)\n);\n\n/*==============================================================*/\n/* Table: FACT_Person_Quarterly_Program_Enrollment              */\n/*==============================================================*/\ncreate table if not exists FACT_Person_Quarterly_Program_Enrollment (\n   Person_Quarterly_Program_Enrollment_ID BIGINT not null identity,\n   Person_Key BIGINT not null,\n   Program_Key INTEGER not null,\n   Enrollment_Quarter_Key INTEGER not null,\n   Enrolled_Entire_Quarter VARCHAR(3) not null,\n   Enrolled_First_Month_of_Quarter VARCHAR(3) not null,\n   Enrolled_Second_Month_of_Quarter VARCHAR(3) not null,\n   Enrolled_Third_Month_of_Quarter VARCHAR(3) not null,\n   constraint PK_FACT_Person_Quarterly_Program_Enrollment primary key (Person_Quarterly_Program_Enrollment_ID),\n    unique (Person_Key, Program_Key, Enrollment_Quarter_Key),\n   constraint FK_FACT_PERSON_QUARTERLY_PROGRAM_ENROLLMENT_DIM_PROGRAM foreign key (Program_Key) \n      references DIM_Program (Program_Key),\n   constraint FK_FACT_PERSON_QUARTERLY_PROGRAM_ENROLLMENT_DIM_YEAR_QUARTER foreign key (Enrollment_Quarter_Key) \n      references DIM_Year_Quarter (Year_Quarter_Key),\n   constraint FK_FACT_PERSON_QUARTERLY_PROGRAM_ENROLLMENT_DIM_PERSON foreign key (Person_Key) \n      references DIM_Person (Person_Key)\n);\n\nGRANT SELECT ON TABLE DIM_Person TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE DIM_Person TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE DIM_Program TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE DIM_Program TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE DIM_Intake_Characteristics TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE DIM_Intake_Characteristics TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE DIM_Year_Quarter TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE DIM_Year_Quarter TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE DIM_County TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE DIM_County TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE FACT_Person_Program_Observation_Quarter TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE FACT_Person_Program_Observation_Quarter TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE FACT_Person_Program_Outcome TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE FACT_Person_Program_Outcome TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE FACT_Person_Program_Participation TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE FACT_Person_Program_Participation TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE FACT_Person_UI_Wage TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE FACT_Person_UI_Wage TO group db_t00113_rw;\n\nGRANT SELECT ON TABLE FACT_Person_Quarterly_Program_Enrollment TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, INSERT ON TABLE FACT_Person_Quarterly_Program_Enrollment TO group db_t00113_rw;",
    "crumbs": [
      "Dimensional Model Scripts",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dimensional Model Scripts</span>"
    ]
  },
  {
    "objectID": "dimensional_model_creation_scripts.html#load-scripts",
    "href": "dimensional_model_creation_scripts.html#load-scripts",
    "title": "Dimensional Model Scripts",
    "section": "02 Load Scripts",
    "text": "02 Load Scripts\n\nFACT Person Outcome Tables\n\nJOINT PIRL\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"Adult Education (JOINT)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.jointpirl_raw_data) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (Joint PIRL)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('Adult Education (JOINT)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.jointpirl_raw_data\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND ssn_valid_format = 1\n    AND adult_education_wioa = 1\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\nAdult Education\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"Adult Education (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (PIRL - Adult Education)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('Adult Education (WIOA)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.adult_education_wioa = 1\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\nAdult\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"Adult (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (PIRL - Adult)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('Adult (WIOA)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.adult_wioa IN (1, 2, 3)\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\nDislocated Worker\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"Dislocated Worker (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (PIRL - Dislocated Worker)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('Dislocated Worker (WIOA)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.dislocated_worker_wioa IN (1, 2, 3)\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\nJob Corps\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"Job Corps (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (PIRL - Job Corps)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('Job Corps (WIOA)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.job_corps_wioa = 1\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\nVocational Rehab\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"Vocational Rehabilitation (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (PIRL - Vocational Rehab)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('Vocational Rehabilitation (WIOA)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.vocational_rehabilitation_wioa IN (1, 2, 3)\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\nWagner Peyser\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"Wagner-Peyser Employment Service (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (PIRL - Wagner Peyser)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('Wagner-Peyser Employment Service (WIOA)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.wagner_peyser_employment_service_wioa = 1\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\nYouth Builder\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"YouthBuild (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (PIRL - Youth Build)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('YouthBuild (WIOA)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.youthbuild_wioa IS NOT NULL\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\nYouth\n\n/*\n  This script will load the the FACT_Person_Program_Outcome table with data for the \"Youth (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Outcome (PIRL - Youth)\nINSERT INTO FACT_Person_Program_Outcome (Person_Key, Program_Key, Exit_Year_Quarter_Key, Employed_in_1st_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n                                         Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n                                         Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n                                         Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n                                         Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n                                         Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n                                         Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n                                         Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n                                         Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n                                         Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n                                         Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n                                         Date_Attained_Graduate_or_Post_Graduate_Degree)\nWITH ctePirl (social_security_number, program_name, exit_date, Employed_in_1st_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n              Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n              Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n              Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n              Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n              Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n              Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n              Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n              Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n              Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n              Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n              Date_Attained_Graduate_or_Post_Graduate_Degree)\nAS\n(\n    SELECT  social_security_number,\n            CAST('Youth (WIOA)' AS VARCHAR(75)) AS program_name,\n            date_of_program_exit_wioa,\n            CASE\n                WHEN employed_in_1st_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_1st_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_1st_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_2nd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_2nd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_2nd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_3rd_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_3rd_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_3rd_quarter_after_exit_quarter_wioa, 0),\n            CASE\n                WHEN employed_in_4th_quarter_after_exit_quarter_wioa IN (1, 2, 3) THEN 'Yes'\n                ELSE 'No'\n            END,\n            CASE type_of_employment_match_4th_quarter_after_exit_quarter_wioa\n                WHEN 1 THEN 'UI Wage Data'\n                WHEN 2 THEN 'Federal Employment Records (OPM, USPS)'\n                WHEN 3 THEN 'Military Employment Records (DOD)'\n                WHEN 4 THEN 'Non UI verification'\n                WHEN 5 THEN 'Information not yet available'\n                WHEN 0 THEN 'Not employed'\n                ELSE ''\n            END,\n            COALESCE(earnings_4th_quarter_after_exit_quarter_wioa, 0),\n            CASE employment_related_to_training_2nd_quarter_after_exit_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE retention_with_the_same_employer_in_the_2nd_quarter_and_the_4th_quarter_wioa\n                WHEN 1 THEN 'Yes'\n                WHEN 0 THEN 'No'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_2_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            CASE type_of_recognized_credential_3_wioa\n                WHEN 1 THEN 'Secondary School Diploma/or equivalency'\n                WHEN 2 THEN 'AA or AS Diploma/Degree'\n                WHEN 3 THEN 'BA or BS Diploma/Degree'\n                WHEN 4 THEN 'Occupational Licensure'\n                WHEN 5 THEN 'Occupational Certificate'\n                WHEN 6 THEN 'Occupational Certification'\n                WHEN 7 THEN 'Other Recognized Diploma, Degree, or Certificate'\n                WHEN 0 THEN 'No recognized credential'\n                ELSE ''\n            END,\n            COALESCE(date_attained_recognized_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_2_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_recognized_credential_3_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_educational_functioning_level_efl_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_postsecondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_secondary_transcript_report_card_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_training_milestone_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_of_most_recent_measurable_skill_gains_skills_progression_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_completed_during_program_participation_an_education_or_training_program_leading_to_a_recognized_credential_or_employment, CAST('9999-01-01' AS DATE)),\n            COALESCE(date_attained_graduate_post_graduate_degree_wioa, CAST('9999-01-01' AS DATE))\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_exit_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND youth_wioa IN (1, 2, 3)\n),\ncteFactData\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            pirl.Employed_in_1st_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter,\n            pirl.Earnings_1st_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_2nd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_2nd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_3rd_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter,\n            pirl.Earnings_3rd_Quarter_After_Exit_Quarter,\n            pirl.Employed_in_4th_Quarter_After_Exit_Quarter,\n            pirl.Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n            pirl.Earnings_4th_Quarter_After_Exit_Quarter,\n            pirl.Employment_Related_to_Training,\n            pirl.Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter,\n            pirl.Type_of_Recognized_Credential_1,\n            pirl.Type_of_Recognized_Credential_2,\n            pirl.Type_of_Recognized_Credential_3,\n            pirl.Date_Attained_Recognized_Credential_1,\n            pirl.Date_Attained_Recognized_Credential_2,\n            pirl.Date_Attained_Recognized_Credential_3,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n            pirl.Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n            pirl.Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n            pirl.Date_Attained_Graduate_or_Post_Graduate_Degree\n    FROM ctePirl pirl\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        Employed_in_1st_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_1st_Quarter_After_Exit_Quarter, Earnings_1st_Quarter_After_Exit_Quarter,\n        Employed_in_2nd_Quarter_After_Exit_Quarter, Type_of_Employment_Match_2nd_Quarter_After_Exit_Quarter,\n        Earnings_2nd_Quarter_After_Exit_Quarter, Employed_in_3rd_Quarter_After_Exit_Quarter,\n        Type_of_Employment_Match_3rd_Quarter_After_Exit_Quarter, Earnings_3rd_Quarter_After_Exit_Quarter,\n        Employed_in_4th_Quarter_After_Exit_Quarter, Type_of_Employment_Match_4th_Quarter_After_Exit_Quarter,\n        Earnings_4th_Quarter_After_Exit_Quarter, Employment_Related_to_Training,\n        Retention_with_Same_Employer_2nd_Quarter_and_4th_Quarter, Type_of_Recognized_Credential_1,\n        Type_of_Recognized_Credential_2, Type_of_Recognized_Credential_3, Date_Attained_Recognized_Credential_1,\n        Date_Attained_Recognized_Credential_2, Date_Attained_Recognized_Credential_3,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Educational_Functional_Level,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Postsecondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Secondary_Transcript,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Training_Milestone,\n        Date_of_Most_Recent_Measurable_Skill_Gain_Skills_Progression,\n        Date_Enrolled_in_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Completed_an_Education_or_Training_Program_Leading_to_Credential_or_Employment,\n        Date_Attained_Graduate_or_Post_Graduate_Degree\nFROM cteFactData;\n\n\n\n\nFACT Person Program Observation Quarter Tables\n\nHigher Education\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Higher Education\" program.\n    Step 1\n        Try to remove duplicated higher education records by grouping on ssn, entry quarter, and exit quarter and selecting\n            the minium academic_year and miniumum term for each grouping.\n        The entry and exit quarters are calculated using academic_year and term.  Academic_year has to be adjusted to calendar year. \n    Step 2\n        Collect data for each record found in step 1.\n        The results are returned in the cteHigherEducation CTE.\n    Step 3\n        Lookup the dimension keys for each cteHigherEducation record.\n        The results are returned in the cteFactData CTE.\n    Step 4\n        The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (Higher Education)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH cteDeDuplicate (social_security_number, Observation_Year_Quarter_Key, academic_year, academic_term, qtr_first_month, qtr_second_month, qtr_third_month)\nAS\n(\n    SELECT  se.ssn_id AS social_security_number,\n            obs_qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            MIN(se.academic_year),\n            MIN(se.term) AS academic_term,\n            MAX(CASE WHEN se.term IN ('3', '7') THEN 'No' ELSE 'Yes' END) AS first_month_qtr,\n            CAST('Yes' AS CHAR(3)) AS second_month_qtr,\n            MAX(CASE WHEN se.term IN ('0', '4') THEN 'No' ELSE 'Yes' END) AS third_month_qtr\n    FROM ds_ar_dhe.student_enrollment_table se\n    INNER JOIN DIM_Year_Quarter obs_qtr\n        ON obs_qtr.calendar_year = CASE WHEN se.term IN ('1', '5') THEN CAST(CAST(se.academic_year AS INT) - 1 AS CHAR(4)) ELSE se.academic_year END\n        AND obs_qtr.calendar_quarter = CASE WHEN se.term IN ('0', '4') THEN '3' WHEN se.term IN ('1', '5') THEN '4' WHEN se.term IN ('2', '6') THEN '1' WHEN se.term IN ('3', '7') THEN '2' END\n    WHERE se.academic_year &gt;= '2011'\n    AND se.ssn_valid_format = 'Y'\n    AND se.term IN ('0', '1', '2', '3', '4', '5', '6', '7')\n    GROUP BY se.ssn_id, obs_qtr.Year_Quarter_Key\n),\ncteHigherEducation (social_security_number, program_name, Observation_Year_Quarter_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                    Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, County_FIPS_Code, state_abbreviation, cip_code, cip_detail,\n                    Participated_in_Postsecondary_Education_During_Program_Participation, Enrolled_in_Secondary_Education_Program,\n                    Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  cteDeDuplicate.social_security_number,\n            CAST('Higher Education' AS VARCHAR(75)) AS program_name,\n            cteDeDuplicate.Observation_Year_Quarter_Key,\n            CASE\n                WHEN cteDeDuplicate.qtr_first_month = 'Yes' AND cteDeDuplicate.qtr_second_month = 'Yes' AND cteDeDuplicate.qtr_third_month = 'Yes' THEN 'Yes'\n                ELSE 'No'\n            END AS Enrolled_Entire_Quarter,\n            cteDeDuplicate.qtr_first_month AS Enrolled_First_Month_of_Quarter,\n            cteDeDuplicate.qtr_second_month AS Enrolled_Second_Month_of_Quarter,\n            cteDeDuplicate.qtr_third_month AS Enrolled_Third_Month_of_Quarter,\n            COALESCE(se.geo_county, '') AS County_FIPS_Code,\n            COALESCE(se.geo_state, '') AS state_abbreviation,\n            COALESCE(dfy.cip_code, '') AS cip_code,\n            COALESCE(dfy.cip_detail, '') AS cip_detail,\n            CAST('Yes' AS CHAR(3)) AS Participated_in_Postsecondary_Education_During_Program_Participation,\n            CAST('Yes' AS CHAR(3)) AS Enrolled_in_Secondary_Education_Program,\n            COALESCE(rsl.descr, '') AS Higher_Education_Student_Level,\n            COALESCE(res.descr, '') AS Higher_Education_Enrollment_Status,\n            COALESCE(rts.descr, '') AS Higher_Education_Tuition_Status\n    FROM ds_ar_dhe.student_enrollment_table se\n    INNER JOIN cteDeDuplicate\n        ON se.ssn_id = cteDeDuplicate.social_security_number\n        AND se.academic_year = cteDeDuplicate.academic_year\n        and se.term = cteDeDuplicate.academic_term\n    LEFT JOIN ds_ar_dhe.degree_fice_year_Table dfy\n        ON se.fice_code = dfy.fice_code\n        AND se.academic_year = dfy.academic_year\n        AND se.major_1 = dfy.degree_code\n    LEFT JOIN ds_ar_dhe.refenrollstatus res\n        ON se.enroll_status = res.enrollstatusid\n    LEFT JOIN ds_ar_dhe.refstudentlevel rsl\n        ON se.student_level = rsl.countryid     -- note: The name of the PK for this table is probably a typo (i.e. incorrect)\n    LEFT JOIN ds_ar_dhe.reftuitionstatus rts\n        ON se.tuition_status = rts.tuitionstatusid\n    WHERE se.academic_year &gt;= '2011'\n    AND se.ssn_valid_format = 'Y'\n),\ncteFactData (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n             Participated_in_Postsecondary_Education_During_Program_Participation,  Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement,\n             Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\n AS\n (\n     SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = he.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = he.program_name\n            ) AS Program_Key,\n            --Observation Year Quarter Surrogate Key\n            he.Observation_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = he.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = he.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = CONCAT(he.cip_code, CONCAT(CAST('.' AS CHAR(1)), he.cip_detail))\n            ) AS CIP_Classification_Key,\n            --Measures\n            he.Enrolled_Entire_Quarter,\n            he.Enrolled_First_Month_of_Quarter,\n            he.Enrolled_Second_Month_of_Quarter,\n            he.Enrolled_Third_Month_of_Quarter,\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            CAST('9999-01-01' AS DATE) AS Date_of_Most_Recent_Career_Service,\n            CAST('' AS CHAR(1)) AS Received_Training,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Name,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Program_of_Study,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_1,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_1,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_2,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_2,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_3,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_3,\n            he.Participated_in_Postsecondary_Education_During_Program_Participation,\n            CAST('' AS CHAR(1)) AS Received_Training_from_Private_Section_Operated_Program,\n            he.Enrolled_in_Secondary_Education_Program,\n            CAST('9999-01-01' AS DATE) AS Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            CAST('' AS CHAR(1)) AS Youth_2nd_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Youth_4th_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Other_Reason_for_Exit,\n            CAST('' AS CHAR(1)) AS Migrant_and_Seasonal_Farmworker_Status,\n            CAST('' AS CHAR(1)) AS Individual_with_a_Disability,\n            CAST('' AS CHAR(1)) AS Zip_Code_of_Residence,\n            he.Higher_Education_Student_Level,\n            he.Higher_Education_Enrollment_Status,\n            he.Higher_Education_Tuition_Status\n    FROM cteHigherEducation he\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Observation_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status, \n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nJoint PIRL\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Adult Education (JOINT)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.jointpirl_raw_data) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (Joint PIRL)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n              Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Adult Education (JOINT)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa AS entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CAST('9999-01-01' AS DATE),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CAST('9999-01-01' AS DATE),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END\n    FROM ds_ar_dws.jointpirl_raw_data\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND ssn_valid_format = 1\n    AND adult_education_wioa = 1\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date between entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --County Surrogate Key\n            0 AS County_of_Residence_Key,  -- source data does not contain county of residence\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,     -- source data does not contain gross monthly income\n            0 AS Net_Monthly_Income,       -- source data does not contain net monthly income\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            CAST('' AS VARCHAR(5)) AS Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            pirl.entry_date,\n            pirl.exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,            \n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nPIRL - Adult Education\n\n/*\n  This script will load thefffflsfll FACT_Person_Program_Observation_Quarter table with data for the \"Adult Education (WIOA)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (PIRL - adult education)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Adult Education (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, GETDATE()) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.adult_education_wioa = 1\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement,  Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            entry_date,\n            exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,\n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nPIRL - Adult\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Adult (WIOA)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (PIRL - adult)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Adult (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, GETDATE()) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.adult_wioa IN (1, 2, 3)\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement,  Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            entry_date,\n            exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,\n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nPIRL - Dislocated Worker\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Dislocated Worker (WIOA)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (PIRL - dislocated worker)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Dislocated Worker (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, GETDATE()) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.dislocated_worker_wioa IN (1, 2, 3)\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement,  Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            entry_date,\n            exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,\n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nPirl - Job Corps\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Job Corps (WIOA)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (PIRL - job corps)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Job Corps (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, GETDATE()) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.job_corps_wioa = 1\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement,  Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            entry_date,\n            exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,\n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nPIRL - Vocational Rehab\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Vocational Rehabilitation (WIOA)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (PIRL - vocational rehab)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Vocational Rehabilitation (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, GETDATE()) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.vocational_rehabilitation_wioa IN (1, 2, 3)\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement,  Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            entry_date,\n            exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,\n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nPIRL - Wagner Peyser\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Wagner-Peyser Employment Service (WIOA)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (PIRL - wagner peyser)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Wagner-Peyser Employment Service (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, GETDATE()) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.wagner_peyser_employment_service_wioa = 1\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement,  Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            entry_date,\n            exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,\n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nPIRL - Youth Build\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"YouthBuild (WIOA)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (PIRL - youth build)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('YouthBuild (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, GETDATE()) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND pirl.youthbuild_wioa IS NOT NULL\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement,  Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            entry_date,\n            exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,\n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nPIRL - Youth\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Youth (WIOA)\" program.\n    Step 1\n        The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n        Any reference values or boolean values are converted to text strings.\n    Step 2\n        The ctePirl data is then process in the cteFactData CTE which looks up the dimension keys.\n    Step 3\n        The cteFactData data is duplicated for each quarter in the range of entry_quarter and exit_quarter and returned in cteResults.\n    Step 4\n        The cteResults is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (PIRL - youth)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Youth (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, GETDATE()) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship'\n                WHEN '10' THEN 'Youth Occupational Skills Training'\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training'\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training'\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND youth_wioa IN (1, 2, 3)\n),\ncteFactData (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement,  Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status,\n             entry_date, exit_date)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status,\n            entry_date,\n            exit_date\n    FROM ctePirl pirl\n),\ncteResults (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n            Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n            Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation, \n            Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n            Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  COALESCE(Person_Key, 0),\n            COALESCE(Program_Key, 0),\n            qtr.Year_Quarter_Key AS Observation_Year_Quarter_Key,\n            COALESCE(County_of_Residence_Key, 0),\n            COALESCE(State_of_Residence_Key, 0),\n            COALESCE(CIP_Classification_Key, 0),\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (1, 4, 7, 10) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_First_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (2, 5, 8, 11) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteFactData.Entry_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.entry_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                WHEN qtr.Year_Quarter_Key = cteFactData.Exit_Year_Quarter_Key AND DATEPART(MONTH, cteFactData.exit_date) NOT IN (3, 6, 9, 12) THEN 'No'\n                ELSE 'Yes'\n            END AS Enrolled_Third_Month_of_Quarter,\n            Gross_Monthly_Income,\n            Net_Monthly_Income,\n            Date_of_Most_Recent_Career_Service,\n            Received_Training,\n            Eligible_Training_Provider_Name,\n            Eligible_Training_Provider_Program_of_Study,\n            Date_Entered_Training_1,\n            Type_of_Training_Service_1,\n            Date_Entered_Training_2,\n            Type_of_Training_Service_2,\n            Date_Entered_Training_3,\n            Type_of_Training_Service_3,\n            Participated_in_Postsecondary_Education_During_Program_Participation,\n            Received_Training_from_Private_Section_Operated_Program,\n            Enrolled_in_Secondary_Education_Program,\n            Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            Youth_2nd_Quarter_Placement,\n            Youth_4th_Quarter_Placement,\n            Other_Reason_for_Exit,\n            Migrant_and_Seasonal_Farmworker_Status,\n            Individual_with_a_Disability,\n            Zip_Code_of_Residence,\n            Higher_Education_Student_Level,\n            Higher_Education_Enrollment_Status,\n            Higher_Education_Tuition_Status\n    FROM cteFactData\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteFactData.Entry_Year_Quarter_Key AND cteFactData.Exit_Year_Quarter_Key\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        Observation_Year_Quarter_Key,\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        CASE\n            WHEN Enrolled_First_Month_of_Quarter = 'Yes' AND Enrolled_Second_Month_of_Quarter = 'Yes' AND Enrolled_Third_Month_of_Quarter = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteResults;\n\n\n\nSNAP\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Supplemental Nutrition Assistance Program (SNAP)\" program.\n    Step 1\n        Find unique eligible cases and associate each unique case with a entry quarter and an exit quarter.\n        The cert_start_date is used to determine the entry quarter and the cert_end_date is used to determine the exit quarter.\n        The results are returned in the cteSNAPEligibleCase common table expression (CTE).\n    Step 2\n        Sum gross_monthly_income and net_monthly_income grouping on case, ssn, start quarter and exit quarter.\n        The results are returned in the cteSNAPIncome CTE.\n    Step 3\n        Collect data for each case found in step 1 and supplement that data with the aggregated income values from step 2.\n        The results are returned in the cteSNAP CTE.\n    Step 4\n        Lookup the dimension keys for eacn cteSNap record.\n        The results are returned in the cteFactData CTE.\n    Step 5\n        The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (SNAP)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH cteSNAPEligibleCase (case_unit_id, year_qtr_key, start_file_date, end_file_date)\nAS\n(\n    SELECT  snap_case.case_unit_id,\n            obs_qtr.Year_Quarter_Key AS year_qtr_key,\n            MIN(file_month) AS start_file_date,\n            MAX(file_month) AS end_file_date\n    FROM ds_ar_dhs.snap_case\n    INNER JOIN DIM_Year_Quarter obs_qtr\n        ON snap_case.file_month BETWEEN obs_qtr.Quarter_Start_Date AND obs_qtr.Quarter_End_Date\n    WHERE DATEPART(YEAR, snap_case.file_month) &gt;= 2010\n    AND snap_case.snap_eligibility = 1\n    AND snap_case.file_month BETWEEN snap_case.cert_start_date AND snap_case.cert_end_date\n    GROUP BY snap_case.case_unit_id, obs_qtr.Year_Quarter_Key\n),\ncteSNAPIncome (case_unit_id, social_security_number, year_qtr_key, qtr_first_month, qtr_second_month,\n               qtr_third_month, gross_monthly_income, net_monthly_income, file_month)\nAS\n(\n    SELECT  sec.case_unit_id,\n            si.SSN AS social_security_number,\n            sec.year_qtr_key,\n            MAX(CASE WHEN DATEPART(MONTH, si.file_month) IN (1, 4, 7, 10) THEN 'Yes' ELSE 'No' END) AS qtr_first_month,\n            MAX(CASE WHEN DATEPART(MONTH, si.file_month) IN (2, 5, 8, 11) THEN 'Yes' ELSE 'No' END) AS qtr_second_month,\n            MAX(CASE WHEN DATEPART(MONTH, si.file_month) IN (3, 6, 9, 12) THEN 'Yes' ELSE 'No' END) AS qtr_third_month,\n            SUM(CASE WHEN si.gross_income_mo_indicator = 1 THEN si.gross_income_mo ELSE 0 END) AS gross_monthly_income,\n            SUM(CASE WHEN si.net_income_mo_indicator = 1 THEN si.net_income_mo ELSE 0 END) AS net_monthly_income,\n            MIN(si.file_month)\n    FROM cteSNAPEligibleCase sec\n    INNER JOIN ds_ar_dhs.snap_individual si\n        ON sec.case_unit_id = si.case_unit_id\n        AND si.file_month BETWEEN sec.start_file_date AND sec.end_file_date\n    WHERE si.valid_ssn_format = 1\n    AND si.ssn NOT IN (SELECT DISTINCT ssn FROM ds_ar_dhs.snap_individual GROUP BY ssn, file_month HAVING COUNT(*) &gt; 10)\n    GROUP BY sec.case_unit_id, si.SSN, sec.year_qtr_key\n),\ncteSNAP (social_security_number, program_name, year_qtr_key, state_abbreviation, Enrolled_Entire_Quarter,\n         Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter,\n         Gross_Monthly_Income, Net_Monthly_Income)\nAS\n(\n    SELECT DISTINCT\n            --LOOKUP VALUE FOR PERSON KEY\n            cteSNAPIncome.social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Supplemental Nutrition Assistance Program (SNAP)' AS VARCHAR(75)) AS program_name,\n            --OBSERVATION YEAR QUARTER KEY\n            cteSNAPIncome.year_qtr_key,\n            --LOOKUP VALUE FOR STATE KEY\n            snap.state AS state_abbreviation,\n            --Measures\n            CASE\n                WHEN cteSNAPIncome.qtr_first_month = 'Yes' AND cteSNAPIncome.qtr_second_month = 'Yes' AND cteSNAPIncome.qtr_third_month = 'Yes' THEN 'Yes'\n                ELSE 'No'\n            END AS Enrolled_Entire_Quarter,\n            cteSNAPIncome.qtr_first_month AS Enrolled_First_Month_of_Quarter,\n            cteSNAPIncome.qtr_second_month AS Enrolled_Second_Month_of_Quarter,\n            cteSNAPIncome.qtr_third_month AS Enrolled_Third_Month_of_Quarter,\n            CAST(cteSNAPIncome.gross_monthly_income AS DECIMAL(14,2)) AS Gross_Monthly_Income,\n            CAST(cteSNAPIncome.net_monthly_income AS DECIMAL(14,2)) AS Net_Monthly_Income\n    FROM cteSNAPIncome\n    INNER JOIN ds_ar_dhs.snap_individual snap\n        ON cteSNAPIncome.case_unit_id = snap.case_unit_id\n        AND cteSNAPIncome.social_security_number = snap.ssn\n        AND cteSNAPIncome.file_month = snap.file_month\n    WHERE DATEPART(YEAR, snap.file_month) &gt;= 2010\n),\ncteFactData (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2,\n             Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = snap.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = snap.program_name\n            ) AS Program_Key,\n            --Observation Year Quarter Surrogate Key\n            snap.year_qtr_key AS Observation_Year_Quarter_Key,\n            --County Surrogate Key\n            0 AS County_of_Residence_Key,   -- source data does not contain county of residence\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = snap.state_abbreviation\n            ) AS State_of_Residence_Key,    -- source data does not contain state of residence\n            --CIP Surrogate Key\n            0 AS CIP_Classification_Key,    -- source data does not contain CIP Classification\n            --Measures\n            snap.Enrolled_Entire_Quarter,\n            snap.Enrolled_First_Month_of_Quarter,\n            snap.Enrolled_Second_Month_of_Quarter,\n            snap.Enrolled_Third_Month_of_Quarter,\n            snap.Gross_Monthly_Income AS Gross_Monthly_Income,\n            snap.Net_Monthly_Income AS Net_Monthly_Income,\n            CAST('9999-01-01' AS DATE) AS Date_of_Most_Recent_Career_Service,\n            CAST('' AS CHAR(1)) AS Received_Training,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Name,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Program_of_Study,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_1,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_1,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_2,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_2,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_3,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_3,\n            CAST('' AS CHAR(1)) AS Participated_in_Postsecondary_Education_During_Program_Participation,\n            CAST('' AS CHAR(1)) AS Received_Training_from_Private_Section_Operated_Program,\n            CAST('' AS CHAR(1)) AS Enrolled_in_Secondary_Education_Program,\n            CAST('9999-01-01' AS DATE) AS Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            CAST('' AS CHAR(1)) AS Youth_2nd_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Youth_4th_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Other_Reason_for_Exit,\n            CAST('' AS CHAR(1)) AS Migrant_and_Seasonal_Farmworker_Status,\n            CAST('' AS CHAR(1)) AS Individual_with_a_Disability,\n            CAST('' AS CHAR(1)) AS Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM cteSNAP snap\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Observation_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nTANF\n\n/*\n  This script will load the the FACT_Person_Program_Observation_Quarter table with data for the \"Temporary Assistance for Needy Families (TANF)\" program.\n    Step 1\n        Get a list of exit records for each ssn and observation quarter.\n        The observation quarter is calculated from the reporting_month.\n        The results are returned in the cteTANFQuarter common table expression (CTE).\n    Step 2\n        Collect data for each record in cteTANFQuarter.\n        The results are returned in the cteTANF CTE.\n    Step 3\n        Lookup the dimension keys for each cteTANF record.\n        The results are returned in the cteFactData CTE.\n    Step 4\n        The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Observation Quarter (TANF)\nINSERT INTO FACT_Person_Program_Observation_Quarter (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key,\n                                                     CIP_Classification_Key, Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter,\n                                                     Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter, Gross_Monthly_Income, Net_Monthly_Income,\n                                                     Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n                                                     Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n                                                     Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n                                                     Participated_in_Postsecondary_Education_During_Program_Participation, \n                                                     Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                                     Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                                     Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n                                                     Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n                                                     Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nWITH cteTANFQuarter (social_security_number, year_qtr_key, qtr_first_month, qtr_second_month, qtr_third_month, reporting_month)\nAS\n(\n    SELECT  tanf_member.social_security_number,\n            qtr.Year_Quarter_Key,\n            MAX(CASE WHEN RIGHT(tanf_member.reporting_month, 2) IN ('01', '04', '07', '10') THEN 'Yes' ELSE 'No' END) AS qtr_first_month,\n            MAX(CASE WHEN RIGHT(tanf_member.reporting_month, 2) IN ('02', '05', '08', '11') THEN 'Yes' ELSE 'No' END) AS qtr_second_month,\n            MAX(CASE WHEN RIGHT(tanf_member.reporting_month, 2) IN ('03', '06', '09', '12') THEN 'Yes' ELSE 'No' END) AS qtr_third_month,\n            MIN(tanf_member.reporting_month)\n    FROM ds_ar_dhs.tanf_member\n    INNER JOIN DIM_Year_Quarter qtr\n        ON TO_DATE(CONCAT(tanf_member.reporting_month, CAST('01' AS CHAR(2))), 'YYYYMMDD') BETWEEN qtr.Quarter_Start_Date AND qtr.Quarter_End_Date\n    WHERE LEFT(tanf_member.reporting_month, 4) &gt;= '2010'\n    AND LEN(tanf_member.reporting_month) = 6\n    AND tanf_member.valid_ssn_format = 'Y'\n    GROUP BY tanf_member.social_security_number, qtr.Year_Quarter_Key\n),\ncteTANF (social_security_number, program_name, year_qtr_key, state_fips_code, Enrolled_Entire_Quarter,\n         Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter)\nAS\n(\n    SELECT DISTINCT\n            --LOOKUP VALUE FOR PERSON KEY\n            tanf_member.social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Temporary Assistance for Needy Families (TANF)' AS VARCHAR(75)) AS program_name,\n            --OBSERVATION YEAR QUARTER KEY\n            cteTANFQuarter.year_qtr_key,\n            --LOOKUP VALUE FOR STATE KEY\n            tanf_member.state_fips_code,\n            --Measures\n            CASE\n                WHEN cteTANFQuarter.qtr_first_month = 'Yes' AND cteTANFQuarter.qtr_second_month = 'Yes' AND cteTANFQuarter.qtr_third_month = 'Yes' THEN 'Yes'\n                ELSE 'No'\n            END AS Enrolled_Entire_Quarter,\n            cteTANFQuarter.qtr_first_month AS Enrolled_First_Month_of_Quarter,\n            cteTANFQuarter.qtr_second_month AS Enrolled_Second_Month_of_Quarter,\n            cteTANFQuarter.qtr_third_month AS Enrolled_Third_Month_of_Quarter\n    FROM cteTANFQuarter\n    INNER JOIN ds_ar_dhs.tanf_member\n        ON cteTANFQuarter.social_security_number = tanf_member.social_security_number\n        AND cteTANFQuarter.reporting_month = tanf_member.reporting_month\n    WHERE LEFT(tanf_member.reporting_month, 4) &gt;= '2010'\n    AND LEN(tanf_member.reporting_month) = 6\n    AND tanf_member.valid_ssn_format = 'Y'\n),\ncteFactData (Person_Key, Program_Key, Observation_Year_Quarter_Key, County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key,\n             Enrolled_Entire_Quarter, Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter,\n             Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name,\n             Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n             Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n             Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = tanf.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = tanf.program_name\n            ) AS Program_Key,\n            --Observation Year Quarter Surrogate Key\n            tanf.year_qtr_key AS Observation_Year_Quarter_Key,\n            --County Surrogate Key\n            0 AS County_of_Residence_Key,   -- source data does not contain county of residence\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_FIPS_Code = tanf.state_fips_code\n            ) AS State_of_Residence_Key,    -- source data does not contain state of residence\n            --CIP Surrogate Key\n            0 AS CIP_Classification_Key,    -- source data does not contain CIP Classification\n            --Measures\n            tanf.Enrolled_Entire_Quarter,\n            tanf.Enrolled_First_Month_of_Quarter,\n            tanf.Enrolled_Second_Month_of_Quarter,\n            tanf.Enrolled_Third_Month_of_Quarter,\n            0 AS Gross_Monthly_Income,      -- source data does not contain gross monthly income\n            0 AS Net_Monthly_Income,        -- source data does not contain net monthly income\n            CAST('9999-01-01' AS DATE) AS Date_of_Most_Recent_Career_Service,\n            CAST('' AS CHAR(1)) AS Received_Training,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Name,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Program_of_Study,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_1,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_1,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_2,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_2,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_3,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_3,\n            CAST('' AS CHAR(1)) AS Participated_in_Postsecondary_Education_During_Program_Participation,\n            CAST('' AS CHAR(1)) AS Received_Training_from_Private_Section_Operated_Program,\n            CAST('' AS CHAR(1)) AS Enrolled_in_Secondary_Education_Program,\n            CAST('9999-01-01' AS DATE) AS Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            CAST('' AS CHAR(1)) AS Youth_2nd_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Youth_4th_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Other_Reason_for_Exit,\n            CAST('' AS CHAR(1)) AS Migrant_and_Seasonal_Farmworker_Status,\n            CAST('' AS CHAR(1)) AS Individual_with_a_Disability,\n            CAST('' AS CHAR(1)) AS Zip_Code_of_Residence,\n            CAST('' AS CHAR(1)) AS Higher_Education_Student_Level,\n            CAST('' AS CHAR(1)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS CHAR(1)) AS Higher_Education_Tuition_Status\n    FROM cteTANF tanf\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Observation_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Enrolled_Entire_Quarter,\n        Enrolled_First_Month_of_Quarter,\n        Enrolled_Second_Month_of_Quarter,\n        Enrolled_Third_Month_of_Quarter,\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\n\nFACT Person Program Participation Tables\n\nHigher Education\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Higher Education\" program.\n    Step 1\n        Try to remove duplicated higher education records by grouping on ssn, entry quarter, and exit quarter and selecting\n            the minium academic_year and miniumum term for each grouping.\n        The entry and exit quarters are calculated using academic_year and term.  Academic_year has to be adjusted to calendar year. \n    Step 2\n        Collect data for each record found in step 1.\n        The results are returned in the cteHigherEducation CTE.\n    Step 3\n        Lookup the dimension keys for each cteHigherEducation record.\n        The results are returned in the cteFactData CTE.\n    Step 4\n        The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (Higher Education)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH cteDeDuplicate (social_security_number, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, academic_year, academic_term)\nAS\n(\n    SELECT  se.ssn_id AS social_security_number,\n            entry_qtr.Year_Quarter_Key AS Entry_Year_Quarter_Key,\n            exit_qtr.Year_Quarter_Key AS Exit_Year_Quarter_Key,\n            MIN(se.academic_year),\n            MIN(se.term) AS academic_term\n    FROM ds_ar_dhe.student_enrollment_table se\n    INNER JOIN DIM_Year_Quarter entry_qtr\n        ON entry_qtr.calendar_year = CASE WHEN se.term IN ('1', '5') THEN CAST(CAST(se.academic_year AS INT) - 1 AS CHAR(4)) ELSE se.academic_year END\n        AND entry_qtr.calendar_quarter = CASE WHEN se.term IN ('0', '4') THEN '3' WHEN se.term IN ('1', '5') THEN '3' WHEN se.term IN ('2', '6') THEN '1' WHEN se.term IN ('3', '7') THEN '2' END\n    INNER JOIN DIM_Year_Quarter exit_qtr\n        ON exit_qtr.calendar_year = CASE WHEN se.term IN ('1', '5') THEN CAST(CAST(se.academic_year AS INT) - 1 AS CHAR(4)) ELSE se.academic_year END\n        AND exit_qtr.calendar_quarter = CASE WHEN se.term IN ('0', '4') THEN '3' WHEN se.term IN ('1', '5') THEN '4' WHEN se.term IN ('2', '6') THEN '2' WHEN se.term IN ('3', '7') THEN '2' END\n    WHERE se.academic_year &gt;= '2011'\n    AND se.ssn_valid_format = 'Y'\n    AND se.term IN ('0', '1', '2', '3', '4', '5', '6', '7')\n    GROUP BY se.ssn_id, entry_qtr.Year_Quarter_Key, exit_qtr.Year_Quarter_Key\n),\ncteHigherEducation (social_security_number, program_name, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_FIPS_Code, state_abbreviation, cip_code, cip_detail,\n                    Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n                    Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n                    Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n                    Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n                    Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry, \n                    Participated_in_Postsecondary_Education_During_Program_Participation, Enrolled_in_Secondary_Education_Program, \n                    Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  cteDeDuplicate.social_security_number,\n            CAST('Higher Education' AS VARCHAR(75)) AS program_name,\n            cteDeDuplicate.Entry_Year_Quarter_Key,\n            cteDeDuplicate.Exit_Year_Quarter_Key,\n            COALESCE(se.geo_county, '') AS County_FIPS_Code,\n            COALESCE(se.geo_state, '') AS state_abbreviation,\n            COALESCE(dfy.cip_code, '') AS cip_code,\n            COALESCE(dfy.cip_detail, '') AS cip_detail,\n            CASE\n                WHEN se.student_level = '14' THEN '11'\n                WHEN se.student_level = '13' THEN ''\n                WHEN se.diploma_ged = 1 THEN ''\n                ELSE '12'\n            END AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE \n                WHEN se.student_level IN ('02','03','04') THEN 'Completed one of more years of postsecondary education'\n                WHEN se.student_level IN ('05', '06', '10') THEN 'Attained a Bachelor degree'\n                WHEN se.student_level IN ('07', '08', '09') THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN se.student_level IN ('13', '14') THEN ''\n                WHEN se.diploma_ged = 1 THEN 'Attained a secondary school equivalency'\n                ELSE 'Attained secondary school diploma'\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE\n                WHEN se.student_level IN ('13', '14') THEN 'In-school, secondary school or less'\n                WHEN se.student_level BETWEEN '01' AND '11' THEN 'In-school, Postsecondary school'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Employment_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Long_Term_Unemployment_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Foster_Care_Youth_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Homeless_or_Runaway_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Ex_Offender_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Low_Income_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS English_Language_Learner_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Low_Levels_of_Literacy_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Cultural_Barriers_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Single_Parent_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Displaced_Homemaker_at_Program_Entry,\n            CAST('Yes' AS CHAR(3)) AS Participated_in_Postsecondary_Education_During_Program_Participation,\n            CAST('Yes' AS CHAR(3)) AS Enrolled_in_Secondary_Education_Program,\n            COALESCE(rsl.descr, '') AS Higher_Education_Student_Level,\n            COALESCE(res.descr, '') AS Higher_Education_Enrollment_Status,\n            COALESCE(rts.descr, '') AS Higher_Education_Tuition_Status\n    FROM ds_ar_dhe.student_enrollment_table se\n    INNER JOIN cteDeDuplicate\n        ON se.ssn_id = cteDeDuplicate.social_security_number\n        AND se.academic_year = cteDeDuplicate.academic_year\n        and se.term = cteDeDuplicate.academic_term\n    LEFT JOIN ds_ar_dhe.degree_fice_year_Table dfy\n        ON se.fice_code = dfy.fice_code\n        AND se.academic_year = dfy.academic_year\n        AND se.major_1 = dfy.degree_code\n    LEFT JOIN ds_ar_dhe.refenrollstatus res\n        ON se.enroll_status = res.enrollstatusid\n    LEFT JOIN ds_ar_dhe.refstudentlevel rsl\n        ON se.student_level = rsl.countryid     -- note: The name of the PK for this table is probably a typo (i.e. incorrect)\n    LEFT JOIN ds_ar_dhe.reftuitionstatus rts\n        ON se.tuition_status = rts.tuitionstatusid\n    WHERE se.academic_year &gt;= '2011'\n    AND se.ssn_valid_format = 'Y'\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence,\n             Higher_Education_Student_Level, Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = he.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE he.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND he.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND he.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND he.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND he.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND he.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND he.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND he.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND he.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND he.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND he.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND he.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND he.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND he.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND he.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = he.program_name\n            ) AS Program_Key,\n            --Entry Year Quarter Surrogate Key\n            he.Entry_Year_Quarter_Key,\n            --Exit Year Quarter Surrogate Key\n            he.Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = he.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = he.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = CONCAT(he.cip_code, CONCAT(CAST('.' AS CHAR(1)), he.cip_detail))\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            CAST('9999-01-01' AS DATE) AS Date_of_Most_Recent_Career_Service,\n            CAST('' AS CHAR(1)) AS Received_Training,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Name,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Program_of_Study,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_1,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_1,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_2,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_2,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_3,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_3,\n            he.Participated_in_Postsecondary_Education_During_Program_Participation,\n            CAST('' AS CHAR(1)) AS Received_Training_from_Private_Section_Operated_Program,\n            he.Enrolled_in_Secondary_Education_Program,\n            CAST('9999-01-01' AS DATE) AS Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            CAST('' AS CHAR(1)) AS Youth_2nd_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Youth_4th_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Incarcerated_at_Program_Entry,\n            CAST('9999-01-01' AS DATE) AS Date_Released_from_Incarceration,\n            CAST('' AS CHAR(1)) AS Other_Reason_for_Exit,\n            CAST('' AS CHAR(1)) AS Migrant_and_Seasonal_Farmworker_Status,\n            CAST('' AS CHAR(1)) AS Individual_with_a_Disability,\n            CAST('' AS CHAR(1)) AS Zip_Code_of_Residence,\n            he.Higher_Education_Student_Level,\n            he.Higher_Education_Enrollment_Status,\n            he.Higher_Education_Tuition_Status\n    FROM cteHigherEducation he\n)\nSELECT DISTINCT\n        COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status, \n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nJOINT PIRL\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Adult Education (JOINT)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.jointpirl_raw_data) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (JOINT PIRL)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, state_abbreviation, cip_code, Highest_School_Grade_Completed_at_Program_Entry,\n              Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry, Employment_Status_at_Program_Entry,\n              Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry, Foster_Care_Youth_Status_at_Program_Entry,\n              Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry, Low_Income_Status_at_Program_Entry,\n              English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry, Cultural_Barriers_at_Program_Entry,\n              Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry, Date_of_Most_Recent_Career_Service, Received_Training,\n              Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1,\n              Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3,\n              Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n              Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement,\n              Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n              Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Adult Education (JOINT)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa AS entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CAST('9999-01-01' AS DATE),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CAST('9999-01-01' AS DATE),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END\n    FROM ds_ar_dws.jointpirl_raw_data\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND ssn_valid_format = 1\n    AND adult_education_wioa = 1\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date between entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --County Surrogate Key\n            0 AS County_of_Residence_Key,  -- source data does not contain county of residence\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,     -- source data does not contain gross monthly income\n            0 AS Net_Monthly_Income,       -- source data does not contain net monthly income\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            CAST('' AS VARCHAR(5)) AS Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nPIRL - Adult Education\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Adult Education (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (PIRL - adult education)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n              Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n              Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n              Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n              Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n              Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Adult Education (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND adult_education_wioa = 1\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nPIRL - Adult\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Adult (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (PIRL - adult)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n              Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n              Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n              Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n              Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n              Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Adult (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND adult_wioa IN (1, 2, 3)\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nPIRL - Dislocated Worker\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Dislocated Worker (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (PIRL - dislocated worker)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n              Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n              Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n              Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n              Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n              Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Dislocated Worker (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND dislocated_worker_wioa IN (1, 2, 3)\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nPIRL - Job Corps\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Job Corps (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (PIRL - job corps)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n              Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n              Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n              Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n              Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n              Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Job Corps (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND job_corps_wioa = 1\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nPIRL Vocational Rehab\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Vocational Rehabilitation (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (PIRL - vocational rehab)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n              Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n              Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n              Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n              Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n              Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Vocational Rehabilitation (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND vocational_rehabilitation_wioa IN (1, 2, 3)\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nPIRL Wagner Peyser\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Wagner-Peyser Employment Service (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (PIRL - wagner peyser)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n              Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n              Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n              Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n              Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n              Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Wagner-Peyser Employment Service (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND wagner_peyser_employment_service_wioa = 1\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nPIRL - Youth Build\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"YouthBuild (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (PIRL - youth build)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n              Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n              Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n              Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n              Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n              Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('YouthBuild (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND youthbuild_wioa IS NOT NULL\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nPIRL - Youth\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"YouthBuild (WIOA)\" program.\n  Step 1\n    The data is collected from the source table (ds_ar_dws.pirl) and returned in the ctePIRL comment table expression (CTE).\n    Any reference values or boolean values are converted to text strings.\n  Step 2\n    The ctePirl data is then process thru the cteFactData CTE which looks up the dimension keys.\n  Step 3\n    The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (PIRL - youth build)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH ctePirl (social_security_number, program_name, entry_date, exit_date, County_FIPS_Code, state_abbreviation, cip_code,\n              Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n              Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n              Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n              Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n              Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n              Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study,\n              Date_Entered_Training_1, Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2,\n              Date_Entered_Training_3, Type_of_Training_Service_3, Participated_in_Postsecondary_Education_During_Program_Participation,\n              Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program,\n              Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, Youth_4th_Quarter_Placement,\n              Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status,\n              Individual_with_a_Disability, Zip_Code_of_Residence)\nAS\n(\n    SELECT  --LOOKUP VALUE FOR PERSON KEY\n            social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('YouthBuild (WIOA)' AS VARCHAR(75)) AS program_name,\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            date_of_program_entry_wioa as entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            COALESCE(date_of_program_exit_wioa, CAST('9999-12-31' AS DATE)) AS exit_date,\n            --LOOKUP VALUES FOR COUNTY KEY\n            CASE\n                WHEN LEN(RTRIM(county_code_of_residence)) = 3 AND states.State_FIPS_Code IS NOT NULL\n                    THEN CAST(CONCAT(states.State_FIPS_Code, county_code_of_residence) AS VARCHAR(5))\n                ELSE ''\n            END AS County_FIPS_Code,\n            --LOOKUP VALUE FOR STATE KEY\n            COALESCE(state_code_of_residence_wioa, '') AS state_abbreviation,\n            --LOOKUP VALUE FOR CIP KEY\n            COALESCE(eligible_training_provider_cip_code_wioa, '') AS cip_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            COALESCE(highest_school_grade_completed_at_program_entry_wioa, '') AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE highest_educational_level_completed_at_program_entry_wioa\n                WHEN '1' THEN 'Attained secondary school diploma'\n                WHEN '2' THEN 'Attained a secondary school equivalency'\n                WHEN '3' THEN 'Successfully completed an Individualized Education Program (IEP)'\n                WHEN '4' THEN 'Completed one of more years of postsecondary education'\n                WHEN '5' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '6' THEN 'Attained an Associate degree'\n                WHEN '7' THEN 'Attained a Bachelor degree'\n                WHEN '8' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '0' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CASE school_status_at_program_entry_wioa\n                WHEN '1' THEN 'In-school, secondary school or less'\n                WHEN '2' THEN 'In-school, Alternative School'\n                WHEN '3' THEN 'In-school, Postsecondary school'\n                WHEN '4' THEN 'Not attending school or Secondary School Dropout'\n                WHEN '5' THEN 'Not attending school; secondary school graduate or has a recognized equivalent'\n                WHEN '6' THEN 'Not attending school; within age of compulsory school attendance'\n                ELSE ''\n            END AS School_Status_at_Program_Entry,\n            CASE employment_status_at_program_entry_wioa\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed, but Received Notice of Termination of Employment or Military Separation is pending'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '0' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CASE long_term_unemployed_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Long_Term_Unemployment_at_Program_Entry,\n            CASE exhausting_tanf_within_2_years_part_a_title_iv_of_the_social_security_act_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE foster_care_youth_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CASE homeless_participant_homeless_children_and_youths_or_runaway_youth_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Homeless_or_Runaway_at_Program_Entry,\n            CASE ex_offender_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Ex_Offender_Status_at_Program_Entry,\n            CASE low_income_status_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Income_Status_at_Program_Entry,\n            CASE english_language_learner_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS English_Language_Learner_at_Program_Entry,\n            CASE basic_skills_deficient_low_levels_of_literacy_at_program_entry\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Low_Levels_of_Literacy_at_Program_Entry,\n            CASE cultural_barriers_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Cultural_Barriers_at_Program_Entry,\n            CASE single_parent_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Single_Parent_at_Program_Entry,\n            CASE displaced_homemaker_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            COALESCE(date_of_most_recent_career_service_wioa, CAST('9999-01-01' AS DATE)),\n            CASE received_training_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(eligible_training_provider_name_training_service_1_wioa, ''),\n            CASE eligible_training_provider_program_of_study_by_potential_outcome\n                WHEN '1' THEN 'A program of study leading to an industry-recognized certificate or certification'\n                WHEN '2' THEN 'A program of study leading to a certificate of completion of a registered apprenticeship'\n                WHEN '3' THEN 'A program of study leading to a license recognized by the State involved or the Federal Government'\n                WHEN '4' THEN 'A program of study leading to an associate degree'\n                WHEN '5' THEN 'A program of study leading to a baccalaureate degree'\n                WHEN '6' THEN 'A program of study leading to a community college certificate of completion'\n                WHEN '7' THEN 'A program of study leading to a secondary school diploma or its equivalent'\n                WHEN '8' THEN 'A program of study leading to employment'\n                WHEN '9' THEN 'A program of study leading to  a measurable skills gain'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_1_wioa, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_1_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_2, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_2_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            COALESCE(date_entered_training_3, CAST('9999-01-01' AS DATE)),\n            CASE type_of_training_service_3_wioa\n                WHEN '01' THEN 'On the Job Training (non-WIOA Youth).'\n                WHEN '02' THEN 'Skill Upgrading'\n                WHEN '03' THEN 'Entrepreneurial Training (non-WIOA Youth)'\n                WHEN '04' THEN 'ABE or ESL (contextualized or other) in conjunction with Training'\n                WHEN '05' THEN 'Customized Training'\n                WHEN '06' THEN 'Occupational Skills Training (non-WIOA Youth)'\n                WHEN '07' THEN 'ABE or ESL NOT in conjunction with training (funded by Trade Adjustment Assistance only)'\n                WHEN '08' THEN 'Prerequisite Training'\n                WHEN '09' THEN 'Registered Apprenticeship '\n                WHEN '10' THEN 'Youth Occupational Skills Training                                                                                                            '\n                WHEN '11' THEN 'Other Non-Occupational-Skills Training   '\n                WHEN '12' THEN 'Job Readiness Training in conjunction with other training                                                   '\n                WHEN '00' THEN 'No Training Service'\n                ELSE ''\n            END,\n            CASE participated_in_postsecondary_education_during_program_participation_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE received_training_from_programs_operated_by_the_private_sector\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE enrolled_in_secondary_education_program_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_enrolled_in_post_exit_education_or_training_program_leading_to_a_recognized_postsecondary_credential_wioa, CAST('9999-01-01' AS DATE)),\n            CASE youth_2nd_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE youth_4th_quarter_placement_title_i_wioa\n                WHEN '1' THEN 'Occupational Skills Training'\n                WHEN '2' THEN 'Postsecondary Education'\n                WHEN '3' THEN 'Secondary Education'\n                WHEN '0' THEN 'No placement'\n                ELSE ''\n            END,\n            CASE incarcerated_at_program_entry_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(date_released_from_incarceration_wioa, CAST('9999-01-01' AS DATE)),\n            CASE other_reasons_for_exit_wioa\n                WHEN '01' THEN 'Institutionalized'\n                WHEN '02' THEN 'Health/Medical'\n                WHEN '03' THEN 'Deceased'\n                WHEN '05' THEN 'Foster Care'\n                WHEN '06' THEN 'Ineligible'\n                WHEN '07' THEN 'Criminal Offender'\n                WHEN '00' THEN 'No'\n                ELSE ''\n            END,\n            CASE migrant_and_seasonal_farmworker_status\n                WHEN '1' THEN 'Seasonal Farmworker Adult'\n                WHEN '2' THEN 'Migrant Farmworker Adult'\n                WHEN '3' THEN 'MSFW Youth'\n                WHEN '4' THEN 'Dependent Adult'\n                WHEN '5' THEN 'Dependent Youth'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            CASE individual_with_a_disability_wioa\n                WHEN '1' THEN 'Yes'\n                WHEN '0' THEN 'No'\n                ELSE ''\n            END,\n            COALESCE(zip_code_of_residence, '')\n    FROM ds_ar_dws.pirl\n    LEFT JOIN DIM_State states\n        ON pirl.state_code_of_residence_wioa = states.state_abbreviation\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND youthbuild_wioa IS NOT NULL\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = pirl.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE pirl.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND pirl.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND pirl.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND pirl.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND pirl.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND pirl.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND pirl.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND pirl.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND pirl.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND pirl.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND pirl.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND pirl.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND pirl.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND pirl.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND pirl.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = pirl.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE pirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE pirl.exit_date BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --Lookup County Surrogate Key\n            (\n                SELECT DIM_County.County_Key\n                FROM DIM_County\n                WHERE DIM_County.County_FIPS_Code = pirl.County_FIPS_Code\n            ) AS County_of_Residence_Key,\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = pirl.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --Lookup CIP Surrogate Key\n            (\n                SELECT DIM_CIP.CIP_Key\n                FROM DIM_CIP\n                WHERE DIM_CIP.Classification_Code = pirl.cip_code\n            ) AS CIP_Classification_Key,\n            --Measures\n            0 AS Gross_Monthly_Income,\n            0 AS Net_Monthly_Income,\n            pirl.Date_of_Most_Recent_Career_Service,\n            pirl.Received_Training,\n            pirl.Eligible_Training_Provider_Name,\n            pirl.Eligible_Training_Provider_Program_of_Study,\n            pirl.Date_Entered_Training_1,\n            pirl.Type_of_Training_Service_1,\n            pirl.Date_Entered_Training_2,\n            pirl.Type_of_Training_Service_2,\n            pirl.Date_Entered_Training_3,\n            pirl.Type_of_Training_Service_3,\n            pirl.Participated_in_Postsecondary_Education_During_Program_Participation,\n            pirl.Received_Training_from_Private_Section_Operated_Program,\n            pirl.Enrolled_in_Secondary_Education_Program,\n            pirl.Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            pirl.Youth_2nd_Quarter_Placement,\n            pirl.Youth_4th_Quarter_Placement,\n            pirl.Incarcerated_at_Program_Entry,\n            pirl.Date_Released_from_Incarceration,\n            pirl.Other_Reason_for_Exit,\n            pirl.Migrant_and_Seasonal_Farmworker_Status,\n            pirl.Individual_with_a_Disability,\n            pirl.Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM ctePirl pirl\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nSNAP\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Supplemental Nutrition Assistance Program (SNAP)\" program.\n    Step 1\n        Find unique eligible cases and associate each unique case with a entry quarter and an exit quarter.\n        The cert_start_date is used to determine the entry quarter and the cert_end_date is used to determine the exit quarter.\n        The results are returned in the cteSNAPEligibleCase common table expression (CTE).\n    Step 2\n        Sum gross_monthly_income and net_monthly_income grouping on case, ssn, start quarter and exit quarter.\n        The results are returned in the cteSNAPIncome CTE.\n    Step 3\n        Collect data for each case found in step 1 and supplement that data with the aggregated income values from step 2.\n        The results are returned in the cteSNAP CTE.\n    Step 4\n        Lookup the dimension keys for eacn cteSNap record.\n        The results are returned in the cteFactData CTE.\n    Step 5\n        The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (SNAP)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH cteSNAPEligibleCase (case_unit_id, entry_quarter_key, exit_quarter_key, entry_file_date, exit_file_date)\nAS\n(\n    SELECT  snap_case.case_unit_id,\n            entry_qtr.Year_Quarter_Key,\n            exit_qtr.Year_Quarter_Key,\n            MIN(file_month),\n            MAX(file_month)\n    FROM ds_ar_dhs.snap_case\n    INNER JOIN DIM_Year_Quarter entry_qtr\n        ON snap_case.cert_start_date BETWEEN entry_qtr.Quarter_Start_Date AND entry_qtr.Quarter_End_Date\n    INNER JOIN DIM_Year_Quarter exit_qtr\n        ON snap_case.cert_end_date BETWEEN exit_qtr.Quarter_Start_Date AND exit_qtr.Quarter_End_Date\n    WHERE DATEPART(YEAR, snap_case.file_month) &gt;= 2010\n    AND DATEPART(YEAR, snap_case.cert_end_date) &gt;= 2010\n    AND snap_case.snap_eligibility = 1\n    AND snap_case.file_month BETWEEN snap_case.cert_start_date AND snap_case.cert_end_date\n    GROUP BY snap_case.case_unit_id, entry_qtr.Year_Quarter_Key, exit_qtr.Year_Quarter_Key\n),\ncteSNAPIncome (case_unit_id, social_security_number, entry_quarter_key, exit_quarter_key, gross_monthly_income, net_monthly_income, file_month)\nAS\n(\n    SELECT  sec.case_unit_id,\n            si.SSN,\n            sec.entry_quarter_key,\n            sec.exit_quarter_key,\n            SUM(CASE WHEN si.gross_income_mo_indicator = 1 THEN si.gross_income_mo ELSE 0 END) AS gross_monthly_income,\n            SUM(CASE WHEN si.net_income_mo_indicator = 1 THEN si.net_income_mo ELSE 0 END) AS net_monthly_income,\n            MIN(si.file_month)\n    FROM cteSNAPEligibleCase sec\n    INNER JOIN ds_ar_dhs.snap_individual si\n        ON sec.case_unit_id = si.case_unit_id\n        AND si.file_month BETWEEN sec.entry_file_date AND sec.exit_file_date\n    WHERE si.valid_ssn_format = 1\n    AND si.ssn NOT IN (SELECT DISTINCT ssn FROM ds_ar_dhs.snap_individual GROUP BY ssn, file_month HAVING COUNT(*) &gt; 10)\n    GROUP BY sec.case_unit_id, si.SSN, sec.entry_quarter_key, sec.exit_quarter_key\n),\ncteSNAP (social_security_number, program_name, entry_quarter_key, exit_quarter_key, state_abbreviation,\n         Highest_School_Grade_Completed_at_Program_Entry, Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n         Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n         Foster_Care_Youth_Status_at_Program_Entry, Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry,\n         Low_Income_Status_at_Program_Entry, English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n         Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry,\n         Gross_Monthly_Income, Net_Monthly_Income)\nAS\n(\n    SELECT DISTINCT\n            --LOOKUP VALUE FOR PERSON KEY\n            cteSNAPIncome.social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Supplemental Nutrition Assistance Program (SNAP)' AS VARCHAR(75)) AS program_name,\n            --ENTRY YEAR QUARTER KEY\n            cteSNAPIncome.entry_quarter_key,\n            --EXIT YEAR QUARTER KEY\n            cteSNAPIncome.exit_quarter_key,\n            --LOOKUP VALUE FOR STATE KEY\n            snap.state AS state_abbreviation,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            CASE\n                WHEN snap.highest_ed = '1' THEN '0'\n                WHEN snap.highest_ed = '1G' THEN '1'\n                WHEN snap.highest_ed = '2G' THEN '2'\n                WHEN snap.highest_ed = '3G' THEN '3'\n                WHEN snap.highest_ed = '4G' THEN '4'\n                WHEN snap.highest_ed = '5G' THEN '5'\n                WHEN snap.highest_ed = '6G' THEN '6'\n                WHEN snap.highest_ed = '7G' THEN '7'\n                WHEN snap.highest_ed = '8G' THEN '8'\n                WHEN snap.highest_ed = '9G' THEN '9'\n                WHEN snap.highest_ed = '10G' THEN '10'\n                WHEN snap.highest_ed = '11G' THEN '11'\n                WHEN snap.highest_ed IN ('12G', '13', '14', '15', '16', '17', '18', '19', '20', '21') THEN '12'\n                ELSE ''\n            END AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE snap.highest_ed\n                WHEN '13' THEN 'Attained secondary school diploma'\n                WHEN '14' THEN 'Attained a secondary school equivalency'\n                WHEN '16' THEN 'Completed one of more years of postsecondary education'\n                WHEN '17' THEN 'Attained an Associate degree'\n                WHEN '18' THEN 'Attained a Bachelor degree'\n                WHEN '19' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '20' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '21' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '1' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS School_Status_at_Program_Entry,\n            CASE snap.employment\n                WHEN '1' THEN 'Employed'\n                WHEN '2' THEN 'Employed'\n                WHEN '3' THEN 'Employed'\n                WHEN '6' THEN 'Not in labor force'\n                WHEN '4' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Long_Term_Unemployment_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CASE\n                WHEN snap.relationship = '01' and snap.rel_child = '4' THEN 'Yes'\n                WHEN snap.relationship = '01' and snap.rel_child IN ('1', '2', '3') THEN 'No'\n                WHEN snap.relationship IN ('00', '02', '03', '04', '05', '06', '07') then 'No'\n                ELSE ''\n            END AS Foster_Care_Youth_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Homeless_or_Runaway_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Ex_Offender_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Low_Income_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS English_Language_Learner_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Low_Levels_of_Literacy_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Cultural_Barriers_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Single_Parent_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Displaced_Homemaker_at_Program_Entry,\n            --FACT MEASURES\n            CAST(cteSNAPIncome.gross_monthly_income AS DECIMAL(14,2)) AS Gross_Monthly_Income,\n            CAST(cteSNAPIncome.net_monthly_income AS DECIMAL(14,2)) AS Net_Monthly_Income\n    FROM cteSNAPIncome\n    INNER JOIN ds_ar_dhs.snap_individual snap\n        ON cteSNAPIncome.case_unit_id = snap.case_unit_id\n        AND cteSNAPIncome.social_security_number = snap.ssn\n        AND cteSNAPIncome.file_month = snap.file_month\n    WHERE DATEPART(YEAR, snap.file_month) &gt;= 2010\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = snap.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE snap.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND snap.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND snap.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND snap.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND snap.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND snap.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND snap.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND snap.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND snap.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND snap.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND snap.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND snap.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND snap.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND snap.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND snap.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = snap.program_name\n            ) AS Program_Key,\n            --Entry Year Quarter Surrogate Key\n            snap.entry_quarter_key AS Entry_Year_Quarter_Key,\n            --Exit Year Quarter Surrogate Key\n            snap.exit_quarter_key AS Exit_Year_Quarter_Key,\n            --County Surrogate Key\n            0 AS County_of_Residence_Key,   -- source data does not contain county of residence\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_Abbreviation = snap.state_abbreviation\n            ) AS State_of_Residence_Key,\n            --CIP Surrogate Key\n            0 AS CIP_Classification_Key,    -- source data does not contain CIP Classification\n            --Measures\n            snap.Gross_Monthly_Income AS Gross_Monthly_Income,\n            snap.Net_Monthly_Income AS Net_Monthly_Income,\n            CAST('9999-01-01' AS DATE) AS Date_of_Most_Recent_Career_Service,\n            CAST('' AS CHAR(1)) AS Received_Training,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Name,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Program_of_Study,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_1,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_1,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_2,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_2,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_3,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_3,\n            CAST('' AS CHAR(1)) AS Participated_in_Postsecondary_Education_During_Program_Participation,\n            CAST('' AS CHAR(1)) AS Received_Training_from_Private_Section_Operated_Program,\n            CAST('' AS CHAR(1)) AS Enrolled_in_Secondary_Education_Program,\n            CAST('9999-01-01' AS DATE) AS Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            CAST('' AS CHAR(1)) AS Youth_2nd_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Youth_4th_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Incarcerated_at_Program_Entry,\n            CAST('9999-01-01' AS DATE) AS Date_Released_from_Incarceration,\n            CAST('' AS CHAR(1)) AS Other_Reason_for_Exit,\n            CAST('' AS CHAR(1)) AS Migrant_and_Seasonal_Farmworker_Status,\n            CAST('' AS CHAR(1)) AS Individual_with_a_Disability,\n            CAST('' AS CHAR(1)) AS Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM cteSNAP snap\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\nTANF\n\n/*\n  This script will load the the FACT_Person_Program_Participation table with data for the \"Temporary Assistance for Needy Families (TANF)\" program.\n    Step 1\n        Get a list of exit records for each ssn and reporting_month.\n        Exit record will have tanf_end_of_spell = 'TRUE'.\n        We only want the records that have tanf_start_of_spell = 'FALSE' in this step.\n        The results are returned in the cteSpellEnd common table expression (CTE).\n    Step 2\n        Calculate TANF spells for each person by looking for record that have tanf_start_of_spell = 'TRUE'.\n        Records that have tanf_end_of_spell = 'FALSE' will be matched to the nearest exit data from Step 1.\n        Records that have tanf_end_of_spell = 'TRUE' will use the tanf_end_of_spell as the exit date.\n        The results are returned in the cteTANFSpell CTE.\n    Step 3\n        Collect data for each case found in step 2.\n        The results are returned in the cteTANF CTE.\n    Step 4\n        Lookup the dimension keys for each cteTANF record.\n        The results are returned in the cteFactData CTE.\n    Step 5\n        The cteFactData is inserted into the fact table.  Any keys that could not be found via the lookup are set to 0.\n*/\n\n-- FACT Person Program Participation (TANF)\nINSERT INTO FACT_Person_Program_Participation (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key,\n                                               County_of_Residence_Key, State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, \n                                               Net_Monthly_Income, Date_of_Most_Recent_Career_Service, Received_Training, Eligible_Training_Provider_Name, \n                                               Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1, Type_of_Training_Service_1, \n                                               Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n                                               Participated_in_Postsecondary_Education_During_Program_Participation, \n                                               Received_Training_from_Private_Section_Operated_Program, Enrolled_in_Secondary_Education_Program, \n                                               Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n                                               Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, \n                                               Other_Reason_for_Exit, Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability,\n                                               Zip_Code_of_Residence, Higher_Education_Student_Level, Higher_Education_Enrollment_Status, \n                                               Higher_Education_Tuition_Status)\nWITH cteSpellEnd (social_security_number, reporting_month)\nAS\n(\n    SELECT DISTINCT social_security_number, reporting_month\n    FROM ds_ar_dhs.tanf_member\n    WHERE tanf_start_of_spell = 'FALSE'\n    AND tanf_end_of_spell = 'TRUE'\n    AND LEFT(reporting_month, 4) &gt;= '2010'\n    AND LEN(tanf_member.reporting_month) = 6\n    AND valid_ssn_format = 'Y'\n),\ncteTANFSpell (social_security_number, entry_date, exit_date)\nAS\n(\n    SELECT  ts.social_security_number,\n            TO_DATE(CONCAT(ts.reporting_month, CAST('01' AS CHAR(2))), 'YYYYMMDD'),\n            CASE\n                WHEN MIN(cteSpellEnd.reporting_month) IS NULL THEN TO_DATE('9999-01-01', 'YYYYMMDD')\n                ELSE TO_DATE(CONCAT(MIN(cteSpellEnd.reporting_month), CAST('01' AS CHAR(2))), 'YYYYMMDD')\n            END\n    FROM ds_ar_dhs.tanf_member ts\n    LEFT JOIN cteSpellEnd\n        ON ts.social_security_number = cteSpellEnd.social_security_number\n        AND ts.reporting_month &lt; cteSpellEnd.reporting_month\n    WHERE ts.tanf_start_of_spell = 'TRUE'\n    AND ts.tanf_end_of_spell = 'FALSE'\n    AND LEFT(ts.reporting_month, 4) &gt;= '2010'\n    AND LEN(ts.reporting_month) = 6\n    AND ts.valid_ssn_format = 'Y'\n    GROUP BY ts.social_security_number, ts.reporting_month\n    UNION \n    SELECT  tm.social_security_number,\n            TO_DATE(CONCAT(tm.reporting_month, CAST('01' AS CHAR(2))), 'YYYYMMDD'),\n            TO_DATE(CONCAT(tm.reporting_month, CAST('01' AS CHAR(2))), 'YYYYMMDD')\n    FROM ds_ar_dhs.tanf_member tm\n    WHERE tm.tanf_start_of_spell = 'TRUE'\n    AND tm.tanf_end_of_spell = 'TRUE'\n    AND LEFT(tm.reporting_month, 4) &gt;= '2010'\n    AND LEN(tm.reporting_month) = 6\n    AND tm.valid_ssn_format = 'Y'\n),\ncteTANF (social_security_number, program_name, entry_date, exit_date, state_fips_code, Highest_School_Grade_Completed_at_Program_Entry,\n         Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry, Employment_Status_at_Program_Entry,\n         Long_Term_Unemployment_at_Program_Entry, Exhausting_TANF_Within_2_Yrs_at_Program_Entry, Foster_Care_Youth_Status_at_Program_Entry,\n         Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry, Low_Income_Status_at_Program_Entry,\n         English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry, Cultural_Barriers_at_Program_Entry,\n         Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry)\nAS\n(\n    SELECT DISTINCT\n            --LOOKUP VALUE FOR PERSON KEY\n            cteTANFSpell.social_security_number,\n            --LOOKUP VALUE FOR PROGRAM KEY\n            CAST('Temporary Assistance for Needy Families (TANF)' AS VARCHAR(75)),\n            --LOOKUP VALUE FOR ENTRY YEAR QUARTER KEY\n            cteTANFSpell.entry_date,\n            --LOOKUP VALUE FOR EXIT YEAR QUARTER KEY\n            cteTANFSpell.exit_date,\n            --LOOKUP VALUE FOR STATE KEY\n            tanf_member.state_fips_code,\n            --LOOKUP VALUES FOR INTAKE CHARACTERISTICS KEY\n            CASE\n                WHEN education_level IN ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12') THEN education_level\n                WHEN education_level IN ('13', '14', '15', '16') THEN '12'\n                WHEN education_level = '98' THEN '0'\n                ELSE ''\n            END AS Highest_School_Grade_Completed_at_Program_Entry,\n            CASE education_level\n                WHEN '12' THEN 'Attained secondary school diploma'\n                WHEN '16' THEN 'Attained a postsecondary technical or vocational certificate (non-degree)'\n                WHEN '13' THEN 'Attained an Associate degree'\n                WHEN '14' THEN 'Attained a Bachelor degree'\n                WHEN '15' THEN 'Attained a degree beyond a Bachelor degree'\n                WHEN '98' THEN 'No Educational Level Completed'\n                ELSE ''\n            END AS Highest_Education_Level_Completed_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS School_Status_at_Program_Entry,\n            CASE employment_status\n                WHEN '1' THEN 'Employed'\n                WHEN '3' THEN 'Not in labor force'\n                WHEN '2' THEN 'Unemployed'\n                ELSE ''\n            END AS Employment_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Long_Term_Unemployment_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Foster_Care_Youth_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Homeless_or_Runaway_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Ex_Offender_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Low_Income_Status_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS English_Language_Learner_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Low_Levels_of_Literacy_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Cultural_Barriers_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Single_Parent_at_Program_Entry,\n            CAST('' AS CHAR(1)) AS Displaced_Homemaker_at_Program_Entry\n    FROM cteTANFSpell\n    INNER JOIN ds_ar_dhs.tanf_member\n        ON cteTANFSpell.social_security_number = tanf_member.social_security_number\n        AND cteTANFSpell.entry_date = TO_DATE(CONCAT(tanf_member.reporting_month, CAST('01' AS CHAR(2))), 'YYYYMMDD')\n    WHERE tanf_member.tanf_start_of_spell = 'TRUE'\n    AND LEFT(tanf_member.reporting_month, 4) &gt;= '2010'\n    AND LEN(tanf_member.reporting_month) = 6\n),\ncteFactData (Person_Key, Intake_Characteristics_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key, County_of_Residence_Key,\n             State_of_Residence_Key, CIP_Classification_Key, Gross_Monthly_Income, Net_Monthly_Income, Date_of_Most_Recent_Career_Service,\n             Received_Training, Eligible_Training_Provider_Name, Eligible_Training_Provider_Program_of_Study, Date_Entered_Training_1,\n             Type_of_Training_Service_1, Date_Entered_Training_2, Type_of_Training_Service_2, Date_Entered_Training_3, Type_of_Training_Service_3, \n             Participated_in_Postsecondary_Education_During_Program_Participation, Received_Training_from_Private_Section_Operated_Program,\n             Enrolled_in_Secondary_Education_Program, Date_Enrolled_in_Post_Exit_Education_or_Training_Program, Youth_2nd_Quarter_Placement, \n             Youth_4th_Quarter_Placement, Incarcerated_at_Program_Entry, Date_Released_from_Incarceration, Other_Reason_for_Exit,\n             Migrant_and_Seasonal_Farmworker_Status, Individual_with_a_Disability, Zip_Code_of_Residence, Higher_Education_Student_Level,\n             Higher_Education_Enrollment_Status, Higher_Education_Tuition_Status)\nAS\n(\n    SELECT  --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = tanf.social_security_number\n            ) AS Person_Key,\n            --Lookup Intake Characteristics Surrogate Key\n            (\n                SELECT DIM_Intake_Characteristics.Intake_Characteristics_Key\n                FROM DIM_Intake_Characteristics\n                WHERE tanf.Highest_School_Grade_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_School_Grade_Completed_at_Program_Entry\n                AND tanf.Highest_Education_Level_Completed_at_Program_Entry = DIM_Intake_Characteristics.Highest_Education_Level_Completed_at_Program_Entry\n                AND tanf.School_Status_at_Program_Entry = DIM_Intake_Characteristics.School_Status_at_Program_Entry\n                AND tanf.Employment_Status_at_Program_Entry = DIM_Intake_Characteristics.Employment_Status_at_Program_Entry\n                AND tanf.Long_Term_Unemployment_at_Program_Entry = DIM_Intake_Characteristics.Long_Term_Unemployment_at_Program_Entry\n                AND tanf.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = DIM_Intake_Characteristics.Exhausting_TANF_Within_2_Yrs_at_Program_Entry\n                AND tanf.Foster_Care_Youth_Status_at_Program_Entry = DIM_Intake_Characteristics.Foster_Care_Youth_Status_at_Program_Entry\n                AND tanf.Homeless_or_Runaway_at_Program_Entry = DIM_Intake_Characteristics.Homeless_or_Runaway_at_Program_Entry\n                AND tanf.Ex_Offender_Status_at_Program_Entry = DIM_Intake_Characteristics.Ex_Offender_Status_at_Program_Entry\n                AND tanf.Low_Income_Status_at_Program_Entry = DIM_Intake_Characteristics.Low_Income_Status_at_Program_Entry\n                AND tanf.English_Language_Learner_at_Program_Entry = DIM_Intake_Characteristics.English_Language_Learner_at_Program_Entry\n                AND tanf.Low_Levels_of_Literacy_at_Program_Entry = DIM_Intake_Characteristics.Low_Levels_of_Literacy_at_Program_Entry\n                AND tanf.Cultural_Barriers_at_Program_Entry = DIM_Intake_Characteristics.Cultural_Barriers_at_Program_Entry\n                AND tanf.Single_Parent_at_Program_Entry = DIM_Intake_Characteristics.Single_Parent_at_Program_Entry\n                AND tanf.Displaced_Homemaker_at_Program_Entry = DIM_Intake_Characteristics.Displaced_Homemaker_at_Program_Entry\n            ) AS Intake_Characteristics_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = tanf.program_name\n            ) AS Program_Key,\n            --Lookup Entry Year Quarter Surrogate Key\n            (\n                SELECT entry_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter entry_qtr\n                WHERE tanf.entry_date between entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date      \n            ) AS Entry_Year_Quarter_Key,\n            --Lookup Exit Year Quarter Surrogate Key\n            (\n                SELECT exit_qtr.Year_Quarter_Key\n                FROM DIM_Year_Quarter exit_qtr\n                WHERE tanf.exit_date between exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n            ) AS Exit_Year_Quarter_Key,\n            --County Surrogate Key\n            0 AS County_of_Residence_Key,   -- source data does not contain county of residence\n            --Lookup State Surrogate Key\n            (\n                SELECT DIM_State.State_Key\n                FROM DIM_State\n                WHERE DIM_State.State_FIPS_Code = tanf.state_fips_code\n            ) AS State_of_Residence_Key,    -- source data does not contain state of residence\n            --CIP Surrogate Key\n            0 AS CIP_Classification_Key,    -- source data does not contain CIP Classification\n            --Measures\n            0 AS Gross_Monthly_Income,      -- source data does not contain gross monthly income\n            0 AS Net_Monthly_Income,        -- source data does not contain net monthly income\n            CAST('9999-01-01' AS DATE) AS Date_of_Most_Recent_Career_Service,\n            CAST('' AS CHAR(1)) AS Received_Training,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Name,\n            CAST('' AS CHAR(1)) AS Eligible_Training_Provider_Program_of_Study,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_1,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_1,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_2,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_2,\n            CAST('9999-01-01' AS DATE) AS Date_Entered_Training_3,\n            CAST('' AS CHAR(1)) AS Type_of_Training_Service_3,\n            CAST('' AS CHAR(1)) AS Participated_in_Postsecondary_Education_During_Program_Participation,\n            CAST('' AS CHAR(1)) AS Received_Training_from_Private_Section_Operated_Program,\n            CAST('' AS CHAR(1)) AS Enrolled_in_Secondary_Education_Program,\n            CAST('9999-01-01' AS DATE) AS Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n            CAST('' AS CHAR(1)) AS Youth_2nd_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Youth_4th_Quarter_Placement,\n            CAST('' AS CHAR(1)) AS Incarcerated_at_Program_Entry,\n            CAST('9999-01-01' AS DATE) AS Date_Released_from_Incarceration,\n            CAST('' AS CHAR(1)) AS Other_Reason_for_Exit,\n            CAST('' AS CHAR(1)) AS Migrant_and_Seasonal_Farmworker_Status,\n            CAST('' AS CHAR(1)) AS Individual_with_a_Disability,\n            CAST('' AS CHAR(1)) AS Zip_Code_of_Residence,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Student_Level,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Enrollment_Status,\n            CAST('' AS VARCHAR(100)) AS Higher_Education_Tuition_Status\n    FROM cteTANF tanf\n)\nSELECT  COALESCE(Person_Key, 0),\n        COALESCE(Intake_Characteristics_Key, 0),\n        COALESCE(Program_Key, 0),\n        COALESCE(Entry_Year_Quarter_Key, 0),\n        COALESCE(Exit_Year_Quarter_Key, 0),\n        COALESCE(County_of_Residence_Key, 0),\n        COALESCE(State_of_Residence_Key, 0),\n        COALESCE(CIP_Classification_Key, 0),\n        Gross_Monthly_Income,\n        Net_Monthly_Income,\n        Date_of_Most_Recent_Career_Service,\n        Received_Training,\n        Eligible_Training_Provider_Name,\n        Eligible_Training_Provider_Program_of_Study,\n        Date_Entered_Training_1,\n        Type_of_Training_Service_1,\n        Date_Entered_Training_2,\n        Type_of_Training_Service_2,\n        Date_Entered_Training_3,\n        Type_of_Training_Service_3,\n        Participated_in_Postsecondary_Education_During_Program_Participation,\n        Received_Training_from_Private_Section_Operated_Program,\n        Enrolled_in_Secondary_Education_Program,\n        Date_Enrolled_in_Post_Exit_Education_or_Training_Program,\n        Youth_2nd_Quarter_Placement,\n        Youth_4th_Quarter_Placement,\n        Incarcerated_at_Program_Entry,\n        Date_Released_from_Incarceration,\n        Other_Reason_for_Exit,\n        Migrant_and_Seasonal_Farmworker_Status,\n        Individual_with_a_Disability,\n        Zip_Code_of_Residence,\n        Higher_Education_Student_Level,\n        Higher_Education_Enrollment_Status,\n        Higher_Education_Tuition_Status\nFROM cteFactData;\n\n\n\n\nFACT Person Quarterly Program Enrollment Tables\n\nJOINT PIRL\n\n/*\nThis script will load the FACT Person Quarterly Program Enrollment table with data for the \"Adult Education (JOINT)\" program.\n    Step 1\n        People with program enrollments in the source table (ds_ar_dws.jointpirl_raw_data) are returned in the ctePIRL comment table expression (CTE).\n        Redundancy in the source data requires grouping  the enrollments for an individual and program entry date in order to determine\n        the correct program exit date.  The program exit date can be null is some situation and any null dates are converted to the \n        current date in step 2.\n        The results of this step are returned in the ctePIRL common table expression (CTE).\n    Step 2\n        The entry and exit dates in the ctePIRL CTE are converted to an entry quarter and an exit quarter.  If the exit date is null then\n        the current date is used as the exit date.\n        The results of this step are returned in the cteQuarterRange CTE.\n    Step 3\n        This step looks up the dimension keys for the person and program and expands the results to include every quarter between the entry\n        quarter and exit quarter (inclusive).  The minimm entry date or maximum exit date are used to calculate the\n        Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, and Enrolled_Third_Month_of_Quarter indicators for the first\n        and last quarters in the enrollment period.  All quarters between the entry and exit are assumed to include all months in the quarter.\n        The results will include all quarters for each enrollment period a person might have.\n        The results of this step are returned in the cteFactData CTE.\n    Step 4\n        The value of the Enrolled_Entire_Quarter indicator is calculated and the results inserted into the fact table.\n*/\n\n-- FACT Person Quarterly Program Enrollment (Joint PIRL)\nINSERT INTO FACT_Person_Quarterly_Program_Enrollment (Person_Key, Program_Key, Enrollment_Quarter_Key, Enrolled_Entire_Quarter,\n                                                      Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter)\nWITH ctePirl (social_security_number, entry_date, exit_date)\nAS\n(\n    SELECT social_security_number, date_of_program_entry_wioa, MAX(date_of_program_exit_wioa)\n    FROM ds_ar_dws.jointpirl_raw_data\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND ssn_valid_format = 1\n    AND adult_education_wioa = 1\n    GROUP BY social_security_number, date_of_program_entry_wioa\n),\ncteQuarterRange (social_security_number, entry_quarter_key, exit_quarter_key, min_entry_date, max_exit_date)\nAS\n(\n    SELECT  ctePirl.social_security_number,\n            entry_qtr.Year_Quarter_Key AS entry_quarter_key,\n            exit_qtr.Year_Quarter_Key AS exit_quarter_key,\n            MIN(ctePirl.entry_date) AS min_entry_date,\n            MAX(COALESCE(ctePirl.exit_date, GETDATE())) AS max_exit_date\n    FROM ctePirl\n    INNER JOIN DIM_Year_Quarter entry_qtr\n        ON ctePirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date     \n    INNER JOIN DIM_Year_Quarter exit_qtr\n        ON COALESCE(ctePirl.exit_date, GETDATE()) BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n    GROUP BY ctePirl.social_security_number, entry_qtr.Year_Quarter_Key, exit_qtr.Year_Quarter_Key\n),\ncteFactData (Person_Key, Program_Key, Enrollment_Year_Quarter_Key, Enrolled_First_Month_of_Quarter,\n             Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter)\nAS\n(\n    SELECT DISTINCT\n            --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = cteQuarterRange.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = 'Adult Education (JOINT)'\n            ) AS Program_Key,\n            qtr.Year_Quarter_Key,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteQuarterRange.entry_quarter_key AND DATEPART(MONTH, cteQuarterRange.min_entry_date) NOT IN (1, 4, 7, 10) THEN CAST('No' AS VARCHAR(3))\n                ELSE CAST('Yes' AS VARCHAR(3))\n            END AS Enrolled_Enrolled_First_Month_of_QuarterEntire_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteQuarterRange.entry_quarter_key AND DATEPART(MONTH, cteQuarterRange.min_entry_date) IN (3, 6, 9, 12) THEN CAST('No' AS VARCHAR(3))\n                WHEN qtr.Year_Quarter_Key = cteQuarterRange.exit_quarter_key AND DATEPART(MONTH, cteQuarterRange.max_exit_date) IN (1, 4, 7, 10) THEN CAST('No' AS VARCHAR(3))\n                ELSE CAST('Yes' AS VARCHAR(3))\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteQuarterRange.exit_quarter_key AND DATEPART(MONTH, cteQuarterRange.max_exit_date) NOT IN (3, 6, 9, 12) THEN CAST('No' AS VARCHAR(3))\n                ELSE CAST('Yes' AS VARCHAR(3))\n            END AS Enrolled_Third_Month_of_Quarter\n    FROM cteQuarterRange\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteQuarterRange.entry_quarter_key AND cteQuarterRange.exit_quarter_key\n)\nSELECT  Person_Key,\n        Program_Key,\n        Enrollment_Year_Quarter_Key,\n        CASE\n            WHEN MAX(Enrolled_First_Month_of_Quarter) = 'Yes' AND MAX(Enrolled_Second_Month_of_Quarter) = 'Yes' AND MAX(Enrolled_Third_Month_of_Quarter) = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        MAX(Enrolled_First_Month_of_Quarter),\n        MAX(Enrolled_Second_Month_of_Quarter),\n        MAX(Enrolled_Third_Month_of_Quarter)\nFROM cteFactData\nGROUP BY Person_Key, Program_Key, Enrollment_Year_Quarter_Key;\n\n\n\nPIRL\n\n/*\nThis script will load the FACT Person Quarterly Program Enrollment table with data for the PIRL (WIOA) programs.  This will include the\nfollowing programs:  Adult Education (WIOA),  Adult (WIOA), Dislocated Worker (WIOA), Job Corps (WIOA), Vocational Rehabilitation (WIOA),\n                     Wagner-Peyser Employment Service (WIOA), Youth (WIOA), YouthBuild (WIOA)\n    Step 1\n        People with program enrollments in the source table (ds_ar_dws.pirl) are returned in the ctePIRL comment table expression (CTE).\n        All of the programs enrollments are pull seperately and then unioned together. Redundancy in the source data requires grouping\n        the enrollments for an individual and program entry date in order to determine the correct program exit date.  The program exit\n        date can be null is some situation and any null dates are converted to the current date in step 2.\n        The results of this step are returned in the ctePIRL common table expression (CTE).\n    Step 2\n        The entry and exit dates in the ctePIRL CTE are converted to an entry quarter and an exit quarter.  If the exit date is null then\n        the current date is used as the exit date.\n        The results of this step are returned in the cteQuarterRange CTE.\n    Step 3\n        This step looks up the dimension keys for the person and program and expands the results to include every quarter between the entry\n        quarter and exit quarter (inclusive).  The minimm entry date or maximum exit date are used to calculate the\n        Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, and Enrolled_Third_Month_of_Quarter indicators for the first\n        and last quarters in the enrollment period.  All quarters between the entry and exit are assumed to include all months in the quarter.\n        The results will include all quarters for each enrollment period a person might have.\n        The results of this step are returned in the cteFactData CTE.\n    Step 4\n        The value of the Enrolled_Entire_Quarter indicator is calculated and the results inserted into the fact table.\n*/\n\n-- FACT Person Quarterly Program Enrollment (PIRL - adult education)\nINSERT INTO FACT_Person_Quarterly_Program_Enrollment (Person_Key, Program_Key, Enrollment_Quarter_Key, Enrolled_Entire_Quarter,\n                                                      Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter)\nWITH ctePirl (program_name, social_security_number, entry_date, exit_date)\nAS\n(\n    --Adult Education\n    SELECT  CAST('Adult Education (WIOA)' AS VARCHAR(75)) AS program_name,\n            social_security_number,\n            date_of_program_entry_wioa AS entry_date,\n            MAX(date_of_program_exit_wioa) AS exit_date\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND adult_education_wioa = 1\n    GROUP BY social_security_number, date_of_program_entry_wioa\n    UNION\n    -- Adult\n    SELECT  CAST('Adult (WIOA)' AS VARCHAR(75)) AS program_name,\n            social_security_number,\n            date_of_program_entry_wioa,\n            MAX(date_of_program_exit_wioa) AS exit_date\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND adult_wioa IN (1, 2, 3)\n    GROUP BY social_security_number, date_of_program_entry_wioa\n    UNION\n    --Dislocated Worker\n    SELECT  CAST('Dislocated Worker (WIOA)' AS VARCHAR(75)) AS program_name,\n            social_security_number,\n            date_of_program_entry_wioa,\n            MAX(date_of_program_exit_wioa) AS exit_date\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND dislocated_worker_wioa IN (1, 2, 3)\n    GROUP BY social_security_number, date_of_program_entry_wioa\n    UNION\n    --Job Corps\n    SELECT  CAST('Job Corps (WIOA)' AS VARCHAR(75)) AS program_name,\n            social_security_number,\n            date_of_program_entry_wioa,\n            MAX(date_of_program_exit_wioa) AS exit_date\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND job_corps_wioa = 1\n    GROUP BY social_security_number, date_of_program_entry_wioa\n    UNION\n    --Vocational Rehabilitation\n    SELECT  CAST('Vocational Rehabilitation (WIOA)' AS VARCHAR(75)) AS program_name,\n            social_security_number,\n            date_of_program_entry_wioa,\n            MAX(date_of_program_exit_wioa) AS exit_date\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND vocational_rehabilitation_wioa IN (1, 2, 3)\n    GROUP BY social_security_number, date_of_program_entry_wioa\n    UNION\n    --Wagner-Peyser Employment Service\n    SELECT  CAST('Wagner-Peyser Employment Service (WIOA)' AS VARCHAR(75)) AS program_name,\n            social_security_number,\n            date_of_program_entry_wioa,\n            MAX(date_of_program_exit_wioa) AS exit_date\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND wagner_peyser_employment_service_wioa = 1\n    GROUP BY social_security_number, date_of_program_entry_wioa\n    UNION\n    --Youth\n    SELECT  CAST('Youth (WIOA)' AS VARCHAR(75)) AS program_name,\n            social_security_number,\n            date_of_program_entry_wioa,\n            MAX(date_of_program_exit_wioa) AS exit_date\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND youth_wioa IN (1, 2, 3)\n    GROUP BY social_security_number, date_of_program_entry_wioa\n    UNION\n    --YouthBuild\n    SELECT  CAST('YouthBuild (WIOA)' AS VARCHAR(75)) AS program_name,\n            social_security_number,\n            date_of_program_entry_wioa,\n            MAX(date_of_program_exit_wioa) AS exit_date\n    FROM ds_ar_dws.pirl\n    WHERE DATEPART(year, date_of_program_entry_wioa) &gt;= 2010\n    AND valid_ssn_format = 'Y'\n    AND youthbuild_wioa IS NOT NULL\n    GROUP BY social_security_number, date_of_program_entry_wioa\n),\ncteQuarterRange (program_name, social_security_number, entry_quarter_key, exit_quarter_key, min_entry_date, max_exit_date)\nAS\n(\n    SELECT  ctePirl.program_name,\n            ctePirl.social_security_number,\n            entry_qtr.Year_Quarter_Key,\n            exit_qtr.Year_Quarter_Key,\n            MIN(ctePirl.entry_date) AS min_entry_date,\n            MAX(COALESCE(ctePirl.exit_date, GETDATE())) AS max_exit_date\n    FROM ctePirl\n    INNER JOIN DIM_Year_Quarter entry_qtr\n        ON ctePirl.entry_date BETWEEN entry_qtr.quarter_start_date AND entry_qtr.quarter_end_date     \n    INNER JOIN DIM_Year_Quarter exit_qtr\n        ON COALESCE(ctePirl.exit_date, GETDATE()) BETWEEN exit_qtr.quarter_start_date and exit_qtr.quarter_end_date\n    GROUP BY ctePirl.program_name, ctePirl.social_security_number, entry_qtr.Year_Quarter_Key, exit_qtr.Year_Quarter_Key\n),\ncteFactData (Person_Key, Program_Key, Enrollment_Year_Quarter_Key, Enrolled_First_Month_of_Quarter,\n             Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter)\nAS\n(\n    SELECT DISTINCT\n            --Lookup Person Surrogate Key\n            (\n                SELECT DIM_Person.Person_Key\n                FROM DIM_Person\n                WHERE DIM_Person.Person_UID = cteQuarterRange.social_security_number\n            ) AS Person_Key,\n            --Lookup Program Surrogate Key\n            (\n                SELECT DIM_Program.Program_Key\n                FROM DIM_Program\n                WHERE DIM_Program.Program_Name = cteQuarterRange.program_name\n            ) AS Program_Key,\n            qtr.Year_Quarter_Key,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteQuarterRange.entry_quarter_key AND DATEPART(MONTH, cteQuarterRange.min_entry_date) NOT IN (1, 4, 7, 10) THEN CAST('No' AS VARCHAR(3))\n                ELSE CAST('Yes' AS VARCHAR(3))\n            END AS Enrolled_Enrolled_First_Month_of_QuarterEntire_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteQuarterRange.entry_quarter_key AND DATEPART(MONTH, cteQuarterRange.min_entry_date) IN (3, 6, 9, 12) THEN CAST('No' AS VARCHAR(3))\n                WHEN qtr.Year_Quarter_Key = cteQuarterRange.exit_quarter_key AND DATEPART(MONTH, cteQuarterRange.max_exit_date) IN (1, 4, 7, 10) THEN CAST('No' AS VARCHAR(3))\n                ELSE CAST('Yes' AS VARCHAR(3))\n            END AS Enrolled_Second_Month_of_Quarter,\n            CASE\n                WHEN qtr.Year_Quarter_Key = cteQuarterRange.exit_quarter_key AND DATEPART(MONTH, cteQuarterRange.max_exit_date) NOT IN (3, 6, 9, 12) THEN CAST('No' AS VARCHAR(3))\n                ELSE CAST('Yes' AS VARCHAR(3))\n            END AS Enrolled_Third_Month_of_Quarter\n    FROM cteQuarterRange\n    INNER JOIN DIM_Year_Quarter qtr\n        ON qtr.Year_Quarter_Key BETWEEN cteQuarterRange.entry_quarter_key AND cteQuarterRange.exit_quarter_key\n)\nSELECT  Person_Key,\n        Program_Key,\n        Enrollment_Year_Quarter_Key,\n        CASE\n            WHEN MAX(Enrolled_First_Month_of_Quarter) = 'Yes' AND MAX(Enrolled_Second_Month_of_Quarter) = 'Yes' AND MAX(Enrolled_Third_Month_of_Quarter) = 'Yes' THEN 'Yes'\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        MAX(Enrolled_First_Month_of_Quarter),\n        MAX(Enrolled_Second_Month_of_Quarter),\n        MAX(Enrolled_Third_Month_of_Quarter)\nFROM cteFactData\nGROUP BY Person_Key, Program_Key, Enrollment_Year_Quarter_Key;\n\n\n\nSNAP\n\n/*\nThis script will load the FACT Person Quarterly Program Enrollment table with data for the \"Supplemental Nutrition Assistance Program (SNAP)\" program.\n    Step 1\n        Find file months were people had enrollments in the source tables (ds_ar_dhs.snap_case, ds_ar_dhs.snap_individual).\n        The file month's must be within the cert range of an eligible case to be included.\n        The results of this step are returned in the cteFileMonths common table expression (CTE).\n    Step 2\n        File months are mapped to their corresponding quarter and a qtr_month_flag is created to identify which months in the quarter were enrolled.\n        The qtr_month_flag is the decimal representation of a binary number where each bit in the binary represents a month.  The first (left most) bit is\n        used to represent the first month of the quarter and the third (right most) bit is used for the third month.  The results are grouped on person\n        and quarter and the binary month flags are summed together to create the qtr_month_flag which will have a decimal value between\n        1 (binary 001) and 7 (binary 111).\n        The results are returned in the cteSNAP CTE which should contain one record for each person and quarter that had an enrollment.\n    Step 3\n        This step looks up the dimension keys for the person and program.  The qtr_month_flag is used to calculate the Enrolled_Entire_Quarter, \n        Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, and Enrolled_Third_Month_of_Quarter indicators.  The results will include\n        all quarters for each enrollment period a person might have.\n        The results of this step are inserted into the fact table..\n*/\n\n-- FACT Person Quarterly Program Enrollment (SNAP)\nINSERT INTO FACT_Person_Quarterly_Program_Enrollment (Person_Key, Program_Key, Enrollment_Quarter_Key, Enrolled_Entire_Quarter,\n                                                      Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter)\nWITH cteFileMonths (social_security_number, file_month)\nAS\n(\n    SELECT DISTINCT snap_individual.SSN, snap_case.file_month\n    FROM ds_ar_dhs.snap_case\n    INNER JOIN ds_ar_dhs.snap_individual\n        ON snap_case.case_unit_id = snap_individual.case_unit_id\n        AND snap_case.file_month = snap_individual.file_month\n    WHERE snap_case.snap_eligibility = 1\n    AND DATEPART(YEAR, snap_case.file_month) &gt;= 2010\n    AND snap_case.file_month BETWEEN snap_case.cert_start_date AND snap_case.cert_end_date\n    AND snap_individual.valid_ssn_format = 1\n),\ncteSNAP (social_security_number, Enrollment_Quarter_Key, qtr_month_flag)\nAS\n(\n    SELECT  cteFileMonths.social_security_number,\n            qtr.Year_Quarter_Key,\n            --Decimal representation of a binary flag where the 1st, 2nd, and 3rd month of the quarter are identified as separate bits and added together to create a bitmask.\n            --Example 1: If only enrolled in the 2nd month of the quarter, then the 2nd bit will be turned on. [010 (binary) equals 2 (decimal)]\n            --Example 2: If enrolled in the 2nd and 3rd months of the quarter, then the 2nd and 3rd bits will be turned on.  [010 + 100 = 110 (binary) equals 6 (decimal)]\n            SUM(CASE\n                    WHEN DATEPART(MONTH, cteFileMonths.file_month) IN (1, 4, 7, 10) THEN 1  --equals 001 binary\n                    WHEN DATEPART(MONTH, cteFileMonths.file_month) IN (2, 5, 8, 11) THEN 2  --equals 010 binary\n                    WHEN DATEPART(MONTH, cteFileMonths.file_month) IN (3, 6, 9, 12) THEN 4  --equals 100 binary\n                END) AS qtr_month_flag\n    FROM cteFileMonths\n    INNER JOIN DIM_Year_Quarter qtr\n        ON cteFileMonths.file_month BETWEEN qtr.Quarter_Start_Date and qtr.Quarter_End_Date\n    GROUP BY cteFileMonths.social_security_number, qtr.Year_Quarter_Key\n)\nSELECT DISTINCT\n        --Lookup Person Surrogate Key\n        (\n            SELECT DIM_Person.Person_Key\n            FROM DIM_Person\n            WHERE DIM_Person.Person_UID = cteSNAP.social_security_number\n        ) AS Person_Key,\n        --Lookup Program Surrogate Key\n        (\n            SELECT DIM_Program.Program_Key\n            FROM DIM_Program\n            WHERE DIM_Program.Program_Name = 'Supplemental Nutrition Assistance Program (SNAP)'\n        ) AS Program_Key,\n        cteSNAP.Enrollment_Quarter_Key,\n        CASE\n            WHEN qtr_month_flag = 7 THEN 'Yes'  --[001 + 010 + 100 = 111 (binary) equals 7 (decimal)]\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        CASE\n            WHEN qtr_month_flag IN (1, 3, 5, 7) THEN 'Yes'  --If the first bit is on, then the 1st month had an enrollment. (001, 011, 101, 111)\n            ELSE 'No'\n        END AS Enrolled_First_Month_of_Quarter,\n        CASE\n            WHEN qtr_month_flag IN (2, 3, 6, 7) THEN 'Yes'  --If the second bit is on, then the 2nd month had an enrollment. (010, 011, 110, 111)\n            ELSE 'No'\n        END AS Enrolled_Second_Month_of_Quarter,\n        CASE\n            WHEN qtr_month_flag IN (4, 5, 6, 7) THEN 'Yes'  --If the third bit is on, then the 3rd month had an enrollment. (100, 101, 110, 111)\n            ELSE 'No'\n        END AS Enrolled_Third_Month_of_Quarter\nFROM cteSNAP;\n\n\n\nTANF\n\n/*\nThis script will load the FACT Person Quarterly Program Enrollment table with data for the \"Temporary Assistance for Needy Families (TANF)\" program.\n    Step 1\n        Find reporting months that only have a spell end record.\n        Data is returned in the cteSpellEnd common table expression (CTE).\n    Step 2\n        Find spell start and end months for each person.  If a record has both the start_of_spell and end_of_spell flags set to true then the entry and exit months\n        are set to the reporting_month.  If the record only has start_of_spell set to true, then the nearest reporting_month for the same person in cteSpellEnd is used\n        as the exit month.  Note that if there are two or more overlapping spell ranges with different end months, then one or more of the spells could have the wrong end month.\n        The results of this step are returned in the cteTANFSpell CTE.\n    Step 3\n        Reporting months are mapped to their corresponding quarter and a qtr_month_flag is created to identify which months in the quarter were enrolled.\n        The qtr_month_flag is the decimal representation of a binary number where each bit in the binary represents a month.  The first (left most) bit is\n        used to represent the first month of the quarter and the third (right most) bit is used for the third month.  The results are grouped on person\n        and quarter and the binary month flags are summed together to create the qtr_month_flag which will have a decimal value between\n        1 (binary 001) and 7 (binary 111).\n        The results are returned in the cteTANF CTE which should contain one record for each person and quarter that had an enrollment.\n    Step 4\n        This step looks up the dimension keys for the person and program.  The qtr_month_flag is used to calculate the Enrolled_Entire_Quarter, \n        Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, and Enrolled_Third_Month_of_Quarter indicators.  The results will include\n        all quarters for each enrollment period a person might have.\n        The results of this step are inserted into the fact table..\n*/\n\n-- FACT Person Quarterly Program Enrollment (TANF)\nINSERT INTO FACT_Person_Quarterly_Program_Enrollment (Person_Key, Program_Key, Enrollment_Quarter_Key, Enrolled_Entire_Quarter,\n                                                      Enrolled_First_Month_of_Quarter, Enrolled_Second_Month_of_Quarter, Enrolled_Third_Month_of_Quarter)\nWITH cteSpellEnd (social_security_number, reporting_month)\nAS\n(\n    --If the start of spell flag is off and the end of spell flag is on, then the reporting month is when the spell ended.\n    --These end of spell reporting months will be matched to spell starts in the cteTANFSpell query below. \n    SELECT DISTINCT social_security_number, reporting_month\n    FROM ds_ar_dhs.tanf_member\n    WHERE tanf_start_of_spell = 'FALSE'\n    AND tanf_end_of_spell = 'TRUE'\n    AND LEFT(reporting_month, 4) &gt;= '2010'\n    AND LEN(tanf_member.reporting_month) = 6\n    AND valid_ssn_format = 'Y'\n),\ncteTANFSpell (social_security_number, entry_month, exit_month)\nAS\n(\n    -- If the start and end of spell flags are both turned on, then the entry and exit months are the reporting month.\n    SELECT  tm.social_security_number, tm.reporting_month, tm.reporting_month\n    FROM ds_ar_dhs.tanf_member tm\n    WHERE tm.tanf_start_of_spell = 'TRUE'\n    AND tm.tanf_end_of_spell = 'TRUE'\n    AND LEFT(tm.reporting_month, 4) &gt;= '2010'\n    AND LEN(tm.reporting_month) = 6\n    AND tm.valid_ssn_format = 'Y'\n    UNION\n    --If the start of spell flag is on and the end of spell flag is off, then we have to find the nearest spell end in cteSpellEnd.\n    --WARNING: If there are two overlapping spells with different end months for the same person, then one of the spells could end up using the wrong end date.\n    --      Example 1: If spell #1 ran from February 2022 thru June 2022 and spell #2 ran from March 2022 thru September 2022 \n    --                 then spell #1 will be correct but spell #2 will incorrectly end in June 2022 rather than September 2022\n    --                    because June 2022 is the min date that is greater than March 2022.\n    --      Example 2: If spell #1 ran from February 2022 thru September 2022 and spell #2 ran from March 2022 thru June 2022 \n    --                 then spell #2 will be correct but spell #1 will incorrectly end in June 2022 rather than September 2022\n    --                    because June 2022 is the min date that is greater than March 2022.\n    SELECT  ts.social_security_number,\n            ts.reporting_month,\n            CASE\n                WHEN MIN(cteSpellEnd.reporting_month) IS NULL THEN CAST('999901' AS CHAR(6))\n                ELSE MIN(cteSpellEnd.reporting_month)\n            END\n    FROM ds_ar_dhs.tanf_member ts\n    LEFT JOIN cteSpellEnd\n        ON ts.social_security_number = cteSpellEnd.social_security_number\n        AND ts.reporting_month &lt; cteSpellEnd.reporting_month\n    WHERE ts.tanf_start_of_spell = 'TRUE'\n    AND ts.tanf_end_of_spell = 'FALSE'\n    AND LEFT(ts.reporting_month, 4) &gt;= '2010'\n    AND LEN(ts.reporting_month) = 6\n    AND ts.valid_ssn_format = 'Y'\n    GROUP BY ts.social_security_number, ts.reporting_month\n),\ncteTANF (social_security_number, Enrollment_Quarter_Key, qtr_month_flag)\nAS\n(\n    SELECT  cteTANFSpell.social_security_number,\n            qtr.Year_Quarter_Key,\n            --Decimal representation of a binary flag where the 1st, 2nd, and 3rd month of the quarter are identified as separate bits and added together to create a bitmask.\n            --Example 1: If only enrolled in the 2nd month of the quarter, then the 2nd bit will be turned on. [010 (binary) equals 2 (decimal)]\n            --Example 2: If enrolled in the 2nd and 3rd months of the quarter, then the 2nd and 3rd bits will be turned on.  [010 + 100 = 110 (binary) equals 6 (decimal)]\n            SUM(CASE \n                    WHEN RIGHT(tanf_member.reporting_month, 2) IN ('01', '04', '07', '10') THEN 1  --equals 001 binary\n                    WHEN RIGHT(tanf_member.reporting_month, 2) IN ('02', '05', '08', '11') THEN 2  --equals 010 binary\n                    WHEN RIGHT(tanf_member.reporting_month, 2) IN ('03', '06', '09', '12') THEN 4  --equals 100 binary\n                END) AS qtr_month_flag\n    FROM cteTANFSpell\n    INNER JOIN ds_ar_dhs.tanf_member\n        ON tanf_member.reporting_month BETWEEN cteTANFSpell.entry_month AND cteTANFSpell.exit_month\n    INNER JOIN DIM_Year_Quarter qtr\n        ON TO_DATE(CONCAT(tanf_member.reporting_month, CAST('01' AS CHAR(2))), 'YYYYMMDD') BETWEEN qtr.Quarter_Start_Date and qtr.Quarter_End_Date\n    GROUP BY cteTANFSpell.social_security_number, qtr.Year_Quarter_Key\n)\nSELECT DISTINCT\n        --Lookup Person Surrogate Key\n        (\n            SELECT DIM_Person.Person_Key\n            FROM DIM_Person\n            WHERE DIM_Person.Person_UID = cteTANF.social_security_number\n        ) AS Person_Key,\n        --Lookup Program Surrogate Key\n        (\n            SELECT DIM_Program.Program_Key\n            FROM DIM_Program\n            WHERE DIM_Program.Program_Name = 'Temporary Assistance for Needy Families (TANF)'\n        ) AS Program_Key,\n        cteTANF.Enrollment_Quarter_Key,\n        CASE\n            WHEN qtr_month_flag = 7 THEN 'Yes'  --[001 + 010 + 100 = 111 (binary) equals 7 (decimal)]\n            ELSE 'No'\n        END AS Enrolled_Entire_Quarter,\n        CASE\n            WHEN qtr_month_flag IN (1, 3, 5, 7) THEN 'Yes'  --If the first bit is on, then the 1st month had an enrollment. (001, 011, 101, 111)\n            ELSE 'No'\n        END AS Enrolled_First_Month_of_Quarter,\n        CASE\n            WHEN qtr_month_flag IN (2, 3, 6, 7) THEN 'Yes'  --If the second bit is on, then the 2nd month had an enrollment. (010, 011, 110, 111)\n            ELSE 'No'\n        END AS Enrolled_Second_Month_of_Quarter,\n        CASE\n            WHEN qtr_month_flag IN (4, 5, 6, 7) THEN 'Yes'  --If the third bit is on, then the 3rd month had an enrollment. (100, 101, 110, 111)\n            ELSE 'No'\n        END AS Enrolled_Third_Month_of_Quarter\nFROM cteTANF;\n\n\n\n\nFACT Person UI Wage Table\n\nUI Wage\n\n-- FACT Person UI Wage\nINSERT INTO FACT_Person_UI_Wage (Person_Key, Year_Quarter_Key, UI_Quarterly_Wages)\nSELECT p.Person_Key, qtr.Year_Quarter_Key, sum(lehd.employee_wage_amount)\nFROM ds_ar_dws.ui_wages_lehd lehd\nINNER JOIN DIM_Person p\n    ON lehd.employee_ssn = p.Person_UID\nINNER JOIN DIM_Year_Quarter qtr\n    ON lehd.reporting_period_year = qtr.Calendar_Year\n    AND lehd.reporting_period_quarter = qtr.Calendar_Quarter\nWHERE lehd.reporting_period_year &gt;= '2010'\nGROUP BY p.Person_Key, qtr.Year_Quarter_Key;\n\n\n\n\nDimension Tables\n\nDIM CIP\n\n-- Add \"REDACTED\" CIP dimension record (ONLY RUN ONCE)\n/*\nINSERT INTO DIM_CIP (CIP_Key, Classification_Code, Classification_Name, Category_Name,\n                     Series_Name, Series_Short_Name, Major_Group_Code, Major_Group_Name)\nVALUES (REDACTED, 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED');\n*/\n\n\n-- Add new CIP code dimension records\nINSERT INTO DIM_CIP (CIP_Key, Classification_Code, Classification_Name, Category_Name,\n                     Series_Name, Series_Short_Name, Major_Group_Code, Major_Group_Name)\nSELECT  mdm.CIP_ID, mdm.Classification_Code, mdm.Classification_Name, mdm.Category_Name,\n        mdm.Series_Name, mdm.Series_Short_Name, mdm.Major_Group_Code, mdm.Major_Group_Name\nFROM MDM_CIP mdm\nLEFT JOIN DIM_CIP dim\n    ON mdm.CIP_ID = dim.CIP_Key\nWHERE dim.CIP_Key IS NULL;\n\n-- Update changed CIP code dimension records\nUPDATE DIM_CIP\nSET Classification_Name = mdm.Classification_Name\n    Category_Name = mdm.Category_Name\n    Series_Name = mdm.Series_Name\n    Series_Short_Name = mdm.Series_Short_Name\n    Major_Group_Code = mdm.Major_Group_Code\n    Major_Group_Name = mdm.Major_Group_Name\nFROM MDM_CIP mdm\nINNER JOIN DIM_CIP dim\n    ON mdm.CIP_ID = dim.CIP_Key\nWHERE mdm.Classification_Name &lt;&gt; dim.Classification_Name\n    OR mdm.Category_Name &lt;&gt; dim.Category_Name\n    OR mdm.Series_Name &lt;&gt; dim.Series_Name\n    OR mdm.Series_Short_Name &lt;&gt; dim.Series_Short_Name\n    OR mdm.Major_Group_Code &lt;&gt; dim.Major_Group_Code\n    OR mdm.Major_Group_Name &lt;&gt; dim.Major_Group_Name;\n\n\n\nDIM COUNTRY\n\n-- Add \"REDACTED\" county dimension record (ONLY RUN ONCE)\n/*\nINSERT INTO DIM_County (County_Key, County_FIPS_Code, County_Name, Rural_Urban_Continuum, Local_Workforce_Development_Area)\nVALUES (REDACTED, 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED');\n*/\n\n-- Add new county dimension records\nINSERT INTO DIM_County (County_Key, County_FIPS_Code, County_Name, Rural_Urban_Continuum, Local_Workforce_Development_Area)\nSELECT  mdm.County_ID,\n        mdm.County_FIPS_Code,\n        mdm.County_Name,\n        mdm.Rural_Urban_Continuum,\n        mdm.Local_Workforce_Development_Area\nFROM MDM_County mdm\nLEFT JOIN DIM_County dim\n    ON mdm.County_ID = dim.County_Key\nWHERE dim.County_KEY IS NULL;\n\n-- Update changed county dimension records\nUPDATE DIM_County\nSET County_Name = county.name,\n    Rural_Urban_Continuum = ruc.name,\n    Local_Workforce_Development_Area = county.local_workforce_development_area\nFROM MDM_County mdm\nINNER JOIN DIM_County dim\n    ON mdm.County_ID = dim.County_Key\nWHERE mdm.County_Name &lt;&gt; dim.County_Name\n    OR mdm.Rural_Urban_Continuum &lt;&gt; dim.Rural_Urban_Continuum\n    OR mdm.Local_Workforce_Development_Area &lt;&gt; dim.Local_Workforce_Development_Area;\n\n\n\nDIM Intake Characteristics\n\n-- Add \"REDACTED\" Intake Characteristics dimension record (ONLY RUN ONCE)\n/*\nINSERT INTO DIM_Intake_Characteristics (Intake_Characteristics_Key, Highest_School_Grade_Completed_at_Program_Entry,\n                                Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n                                Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry,\n                                Exhausting_TANF_Within_2_Yrs_at_Program_Entry, Foster_Care_Youth_Status_at_Program_Entry,\n                                Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry, Low_Income_Status_at_Program_Entry,\n                                English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n                                Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry)\nVALUES (REDACTED, 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED');\n*/\n\n-- Add new Intake Characteristics records\nINSERT INTO DIM_Intake_Characteristics (Intake_Characteristics_Key, Highest_School_Grade_Completed_at_Program_Entry,\n                                Highest_Education_Level_Completed_at_Program_Entry, School_Status_at_Program_Entry,\n                                Employment_Status_at_Program_Entry, Long_Term_Unemployment_at_Program_Entry,\n                                Exhausting_TANF_Within_2_Yrs_at_Program_Entry, Foster_Care_Youth_Status_at_Program_Entry,\n                                Homeless_or_Runaway_at_Program_Entry, Ex_Offender_Status_at_Program_Entry, Low_Income_Status_at_Program_Entry,\n                                English_Language_Learner_at_Program_Entry, Low_Levels_of_Literacy_at_Program_Entry,\n                                Cultural_Barriers_at_Program_Entry, Single_Parent_at_Program_Entry, Displaced_Homemaker_at_Program_Entry)\nSELECT  mdm.Intake_Characteristics_Master_ID,\n        mdm.Highest_School_Grade_Completed_at_Program_Entry,\n        mdm.Highest_Education_Level_Completed_at_Program_Entry,\n        mdm.School_Status_at_Program_Entry,\n        mdm.Employment_Status_at_Program_Entry,\n        mdm.Long_Term_Unemployment_at_Program_Entry,\n        mdm.Exhausting_TANF_Within_2_Yrs_at_Program_Entry,\n        mdm.Foster_Care_Youth_Status_at_Program_Entry,\n        mdm.Homeless_or_Runaway_at_Program_Entry,\n        mdm.Ex_Offender_Status_at_Program_Entry,\n        mdm.Low_Income_Status_at_Program_Entry,\n        mdm.English_Language_Learner_at_Program_Entry,\n        mdm.Low_Levels_of_Literacy_at_Program_Entry,\n        mdm.Cultural_Barriers_at_Program_Entry,\n        mdm.Single_Parent_at_Program_Entry,\n        mdm.Displaced_Homemaker_at_Program_Entry\nFROM MDM_Intake_Characteristics_Master mdm\nLEFT JOIN DIM_Intake_Characteristics dim\n    ON mdm.Intake_Characteristics_Master_ID = dim.Intake_Characteristics_Key\nWHERE dim.Intake_Characteristics_Key IS NULL\nAND NOT(mdm.Highest_School_Grade_Completed_at_Program_Entry = ''\n        AND mdm.Highest_Education_Level_Completed_at_Program_Entry = ''\n        AND mdm.School_Status_at_Program_Entry = ''\n        AND mdm.Employment_Status_at_Program_Entry = ''\n        AND mdm.Long_Term_Unemployment_at_Program_Entry = ''\n        AND mdm.Exhausting_TANF_Within_2_Yrs_at_Program_Entry = ''\n        AND mdm.Foster_Care_Youth_Status_at_Program_Entry = ''\n        AND mdm.Homeless_or_Runaway_at_Program_Entry = ''\n        AND mdm.Ex_Offender_Status_at_Program_Entry = ''\n        AND mdm.Low_Income_Status_at_Program_Entry = ''\n        AND mdm.English_Language_Learner_at_Program_Entry = ''\n        AND mdm.Low_Levels_of_Literacy_at_Program_Entry = ''\n        AND mdm.Cultural_Barriers_at_Program_Entry = ''\n        AND mdm.Single_Parent_at_Program_Entry = ''\n        AND mdm.Displaced_Homemaker_at_Program_Entry = '');\n\n\n\nDIM Person\n\n-- Add \"blank\" person dimension record (ONLY RUN ONCE)\n/*\nINSERT INTO DIM_Person (Person_Key, Person_UID, Date_of_Birth, Gender, Ethnicity_American_Indian_or_Alaska_Native,\n                              Ethnicity_Asian, Ethnicity_Black_or_African_American, Ethnicity_Hispanic_or_Latino,\n                              Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander, Ethnicity_White, Ethnicity_Other)\nVALUES (REDACTED, 'REDACTED', CAST('9999-01-01' AS DATE), 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED', 'REDACTED');\n*/\n\n-- Add new person dimension records\nINSERT INTO DIM_Person (Person_Key, Person_UID, Date_of_Birth, Gender, Ethnicity_American_Indian_or_Alaska_Native,\n                   Ethnicity_Asian, Ethnicity_Black_or_African_American, Ethnicity_Hispanic_or_Latino,\n                   Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander, Ethnicity_White, Ethnicity_Other)\nSELECT  mdm.Person_Master_ID,\n        mdm.Person_UID,\n        mdm.Date_of_Birth,\n        mdm.Gender,\n        mdm.Ethnicity_American_Indian_or_Alaska_Native,\n        mdm.Ethnicity_Asian,\n        mdm.Ethnicity_Black_or_African_American,\n        mdm.Ethnicity_Hispanic_or_Latino,\n        mdm.Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander,\n        mdm.Ethnicity_White,\n        mdm.Ethnicity_Other\nFROM MDM_Person_Master mdm\nLEFT JOIN DIM_Person dim\n    ON mdm.Person_Master_ID = dim.Person_Key\nWHERE dim.Person_Key IS NULL;\n\n-- Update changed person dimension records\nUPDATE DIM_Person\nSET Date_of_Birth = mdm.Date_of_Birth,\n    Gender = mdm.Gender,\n    Ethnicity_American_Indian_or_Alaska_Native = mdm.Ethnicity_American_Indian_or_Alaska_Native,\n    Ethnicity_Asian = mdm.Ethnicity_Asian,\n    Ethnicity_Black_or_African_American = mdm.Ethnicity_Black_or_African_American,\n    Ethnicity_Hispanic_or_Latino = mdm.Ethnicity_Hispanic_or_Latino,\n    Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander = mdm.Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander,\n    Ethnicity_White = mdm.Ethnicity_White,\n    Ethnicity_Other = mdm.Ethnicity_Other\nFROM MDM_Person_Master mdm\nINNER JOIN DIM_Person dim\n    ON mdm.Person_Master_ID = dim.Person_Key\nWHERE (dim.Date_of_Birth &lt;&gt; mdm.Date_of_Birth\n    OR dim.Gender &lt;&gt; mdm.Gender\n    OR dim.Ethnicity_American_Indian_or_Alaska_Native &lt;&gt; mdm.Ethnicity_American_Indian_or_Alaska_Native\n    OR dim.Ethnicity_Asian &lt;&gt; mdm.Ethnicity_Asian\n    OR dim.Ethnicity_Black_or_African_American &lt;&gt; mdm.Ethnicity_Black_or_African_American\n    OR dim.Ethnicity_Hispanic_or_Latino &lt;&gt; mdm.Ethnicity_Hispanic_or_Latino\n    OR dim.Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander &lt;&gt; mdm.Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander\n    OR dim.Ethnicity_White &lt;&gt; mdm.Ethnicity_White\n    OR dim.Ethnicity_Other &lt;&gt; mdm.Ethnicity_Other);\n\n\n\nDIM Program\n\n-- Add new program dimension records\nINSERT INTO DIM_Program (Program_Key, Program_Name)\nSELECT  mdm.Program_ID,\n        mdm.Program_Name\nFROM MDM_Program mdm\nLEFT JOIN DIM_Program dim\n    ON mdm.Program_ID = dim.Program_Key\nWHERE dim.Program_Key IS NULL;\n\n\n\nDIM State\n\n-- Add \"blank\" State dimension record (ONLY RUN ONCE)\n/*\nINSERT INTO DIM_State (State_Key, State_FIPS_Code, State_Abbreviation, State_Name)\nVALUES (0, '', '', '');\n*/\n\nINSERT INTO DIM_State (State_Key, State_FIPS_Code, State_Abbreviation, State_Name)\nSELECT mdm.State_ID, mdm.State_FIPS_Code, mdm.State_Abbreviation, mdm.State_Name\nFROM MDM_State mdm\nLEFT JOIN DIM_State dim\n    ON mdm.State_ID = dim.State_Key\nWHERE dim.State_Key IS NULL;\n\n\n\nDIM Year Quarter\n\n-- Add new year/quarter dimension records\nINSERT INTO DIM_Year_Quarter (Year_Quarter_Key, Calendar_Year, Calendar_Quarter, Quarter_Start_Date, Quarter_End_Date)\nSELECT  mdm.Year_Quarter_ID,\n        mdm.Calendar_Year,\n        mdm.Calendar_Quarter,\n        mdm.Quarter_Start_Date,\n        mdm.Quarter_End_Date\nFROM MDM_Year_Quarter mdm\nLEFT JOIN DIM_Year_Quarter dim\n    ON mdm.Year_Quarter_ID = dim.Year_Quarter_Key\nWHERE dim.Year_Quarter_Key IS NULL;\n\n\n\nMDM Person Instance\n\n\n-- Person Instance (SNAP)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT ssn, NVL2(dob, dob, '1900-01-01'), \n       case sex when 'M' then 'Male'\n                when 'F' then 'Female'\n                when 'U' then 'Unknown'\n                when '99' then 'Missing'\n                when '88' then 'NC'\n                else ''\n        end,\n    CASE race_aian \n        WHEN '99' THEN 'MI'\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when '88' then 'NC'\n    END,\n    CASE race_asian \n        WHEN '99' THEN 'MI'\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when '88' then 'NC'\n    END,\n    CASE race_black \n        WHEN '99' THEN 'MI'\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when '88' then 'NC'\n    END,\n    CASE hispanic \n        WHEN '99' THEN 'MI'\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when '88' then 'NC'\n    END,\n    CASE race_nhpi\n        WHEN '99' THEN 'MI'\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when '88' then 'NC'\n    END,\n    CASE race_white \n        WHEN '99' THEN 'MI'\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when '88' then 'NC'\n    END,\n    CASE race_other \n        WHEN '99' THEN 'MI'\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when '88' then 'NC'\n    END,\n    'SNAP'\nFROM ds_ar_dhs.snap_individual;\n\n\n\n\n-- Person Instance (Graduated Student)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT ssn_id, '1900-01-01', \n       case gender when 'M' then 'Male'\n                when 'F' then 'Female'\n                when 'U' then 'Unknown'\n                else ''\n        end,\n    CASE amerind \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE asian \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE black \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE hispanic \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE hawaiian\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE white \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END, 'N/A',\n    'Graduated STudent'\nFROM ds_ar_dhe.graduated_student_table;\n\n-- Person Instance (Registration table)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT ssn_id, '1900-01-01', '','','','','','','','','Student Registration'\nFROM ds_ar_dhe.registration_table;\n\n-- Person Instance (UI Wages LEHD table)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT employee_ssn, '1900-01-01', '','','','','','','','','UI Wages LEHD'\nFROM ds_ar_dws.ui_wages_lehd;\n\n-- Person Instance (Student Enrollment table)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT ssn_id, (to_date(nvl2(date_of_birth, date_of_birth, '1900-01-01'), 'MMDDYYYY')), \n    case gender when 'M' then 'Male'\n                when 'F' then 'Female'\n                when 'U' then 'Unknown'\n                when 'O' then 'Other'\n                else ''\n        end,\n    CASE amerind \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE asian \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE black \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE hispanic \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE hawaiian\n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END,\n    CASE white \n        WHEN 'Y' THEN 'Yes'\n        WHEN 'N' THEN 'No'\n        when 'U' then 'UK'\n    END, 'N/A','Student Enrollment'\nFROM ds_ar_dhe.student_enrollment_table;\n\n\n-- Person Instance (PIRL table)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT social_security_number,nvl2(date_of_birth_wioa, date_of_birth_wioa, '1900-01-01'), \n    case sex_wioa when '1' then 'Male'\n                when '2' then 'Female'\n                when '9' then 'Unknown'\n                else ''\n        end,\n    CASE american_indian_alaska_native_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE asian_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE black_african_american_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE ethnicity_hispanic_latino_wioa \n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE native_hawaiian_other_pacific_islander_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE white_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END, 'N/A','PIRL'\n    FROM ds_ar_dws.pirl;\n\n-- Person Instance (PROMIS table)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT ssn, to_date(nvl2(birth_date, birth_date, '1900-01-01'), 'YYYYMMDD'), \n    case gender when '1' then 'Male'\n                when '2' then 'Female'\n                when '6' then 'Unknown'\n        end,\n    case race when '4' then 'Yes'\n              else ''\n    END,\n    CASE race  WHEN '3' THEN 'Yes'\n        else ''\n    END,\n    CASE race\n        WHEN '2' THEN 'Yes'\n        else ''\n    END,\n    CASE ethnicity \n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE race\n        WHEN '5' THEN 'Yes'\n        else ''\n    END,\n    CASE race\n        WHEN '1' THEN 'Yes'\n        else ''\n    END, \n    case race \n        when '6' then '2+'\n        when '9' then 'UK'\n        else ''\n        end,'PROMIS'\n    FROM ds_ar_dws.promis ;\n\n-- Person Instance (TANF table)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT social_security_number, nvl2(date_of_birth , date_of_birth , '1900-01-01'), \n    case gender when '1' then 'Male'\n                when '2' then 'Female'\n                when '3' then 'Unknown'\n        end,\n    CASE ethnicity_american_indian_alaska_native\n        WHEN '1' THEN 'Yes'\n        WHEN '2' THEN 'No'\n        else ''\n    END,\n    CASE ethnicity_asian\n        WHEN '1' THEN 'Yes'\n        WHEN '2' THEN 'No'\n        else ''\n    END,\n    CASE ethnicity_black_african_american \n        WHEN '1' THEN 'Yes'\n        WHEN '2' THEN 'No'\n        else ''\n    END,\n    CASE ethnicity_hispanic_latino\n        WHEN '1' THEN 'Yes'\n        WHEN '2' THEN 'No'\n        else ''\n    END,\n    CASE ethnicity_native_hawaiian_pacific_islander\n        WHEN '1' THEN 'Yes'\n        WHEN '2' THEN 'No'\n        else ''\n    END,\n    CASE ethnicity_white\n        WHEN '1' THEN 'Yes'\n        WHEN '2' THEN 'No'\n        else ''\n    END, \n    'N/A','TANF'\n    FROM ds_ar_dhs.tanf_member  ;\n\n-- Person Instance (Joint PIRL table)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT NVL2(social_security_number, social_security_number, '' ),nvl2(date_of_birth_wioa, date_of_birth_wioa, '1900-01-01'), \n    case sex_wioa when '1' then 'Male'\n                when '2' then 'Female'\n                when '9' then 'Unknown'\n                when '3' then ''\n        end,\n    CASE american_indian_alaska_native_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n    END,\n    CASE asian_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n    END,\n    CASE black_african_american_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n    END,\n    CASE ethnicity_hispanic_latino_wioa \n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n    END,\n    CASE native_hawaiian_other_pacific_islander_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n    END,\n    CASE white_wioa\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n    END, 'N/A','Joint PIRL'\n    FROM ds_ar_dws.jointpirl_raw_data;\n\n-- Person Instance (Rapids Apprentice table)\nINSERT INTO tr_ar_wdqi_2023.mdm_person_instance (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, data_source)\nSELECT nvl2(ssn, ssn, ''),nvl2(dob, dob, '1900-01-01'), \n    case gender when 'M' then 'Male'\n                when 'F' then 'Female'\n                when 'U' then 'Unknown'\n                else ''\n        end,\n    CASE natindianind\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE asianind\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE africaamerind\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE ethnicind \n        WHEN '1' THEN 'Yes'\n        WHEN '2' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE nathawaiind\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END,\n    CASE wind\n        WHEN '1' THEN 'Yes'\n        WHEN '0' THEN 'No'\n        when '9' then 'UK'\n        else ''\n    END, 'N/A','RAPIDS Apprentice'\n    FROM ds_ar_osd.rapids_apprentice ;\n\n\n\nMDM Person Master\n\n--Person Master Load\nINSERT INTO tr_ar_wdqi_2023.mdm_person_master (person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other)\nselect * from (\nselect person_uid, date_of_birth, gender, \n                                                 ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n                                                 ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n                                                 ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n                                                 ethnicity_other, \n \nrow_number() over (partition by person_uid order by person_instance_id) as RowNbr \n\nfrom tr_ar_wdqi_2023.mdm_person_instance\n) mpi\n\nwhere RowNbr = 1\n\n--To verify the count of records\nselect count(*) from\n(select ssn_id  from ds_ar_dhe.graduated_student_table gst \nunion\nselect ssn_id  from ds_ar_dhe.registration_table rt \nunion\nselect ssn_id  from ds_ar_dhe.student_enrollment_table set2 \nunion\nselect ssn from ds_ar_dhs.snap_individual si \nunion\nselect social_security_number from ds_ar_dhs.tanf_member tm \nunion\nselect social_security_number from ds_ar_dws.jointpirl_raw_data jrd \nunion\nselect social_security_number from ds_ar_dws.pirl p \nunion\nselect ssn from ds_ar_dws.promis p2 \nunion\nselect employee_ssn from ds_ar_dws.ui_wages_lehd uwl \nunion\nselect ssn from ds_ar_osd.rapids_apprentice ra)\n\n\n\nMDM Person Traceability\n\ninsert Into tr_ar_wdqi_2023.mdm_person_traceability ( person_master_id, person_field_id, person_instance_id)\nselect mpm.person_master_id, '1' , mpi.person_instance_id  \nfrom tr_ar_wdqi_2023.mdm_person_master mpm \njoin tr_ar_wdqi_2023.mdm_person_instance mpi \non mpm.person_uid = mpi.person_uid\n\n\n\nPerson Master - Updated\n\nselect * from (\nselect person_uid, date_of_birth, gender, \n         ethnicity_american_indian_or_alaska_native, ethnicity_asian,\n         ethnicity_black_or_african_american, ethnicity_hispanic_or_latino,\n         ethnicity_native_hawaiian_or_other_pacific_islander, ethnicity_white,\n         ethnicity_other, (case when ((ethnicity_american_indian_or_alaska_native = 'Yes') or (ethnicity_american_indian_or_alaska_native = 'No')) then 1 else 0 end \n                                + case when ((ethnicity_asian = 'Yes') or (ethnicity_asian = 'No')) then 1 else 0 end \n                                + case when ((ethnicity_black_or_african_american = 'Yes') or (ethnicity_black_or_african_american = 'No')) then 1 else 0 end\n                                + case when ((ethnicity_hispanic_or_latino = 'Yes') or (ethnicity_hispanic_or_latino = 'No')) then 1 else 0 end\n                                + case when ((ethnicity_native_hawaiian_or_other_pacific_islander = 'Yes') or (ethnicity_native_hawaiian_or_other_pacific_islander = 'No')) then 1 else 0 end\n                                + case when ((ethnicity_white = 'Yes') or (ethnicity_white = 'No')) then 1 else 0 end\n                                + case when ((ethnicity_other = 'Yes') or (ethnicity_other = 'No')) then 1 else 0 end)\nas CountOfNonNulls,\n \nrow_number() over (partition by person_uid order by CountOfNonNulls desc) as RowNbr \n\nfrom tr_e2e.mdm_person_instance\n) mpi\n\nwhere RowNbr = 1\n\n\n\nperson_mastering\n\ncreate table if not exists tr_e2e.DIM_Person (\n   Person_Key BIGINT not null,\n   Person_UID CHAR(64) not null,\n   Date_of_Birth DATE,\n   Gender VARCHAR(10),\n   Ethnicity_American_Indian_or_Alaska_Native VARCHAR(3),\n   Ethnicity_Asian VARCHAR(3),\n   Ethnicity_Black_or_African_American VARCHAR(3),\n   Ethnicity_Hispanic_or_Latino VARCHAR(3),\n   Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander VARCHAR(3),\n   Ethnicity_White VARCHAR(3),\n   Ethnicity_Other VARCHAR(3),\n   constraint DIM_PERSON_PK_IDX primary key (Person_Key),\n    unique (Person_UID)\n);\n\nGRANT UPDATE, SELECT, DELETE, REFERENCES ON TABLE tr_e2e.DIM_Person TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, REFERENCES ON TABLE tr_e2e.DIM_Person TO group db_t00113_rw;\n\n-- Add \"blank\" person dimension record (ONLY RUN ONCE)\n/*INSERT INTO tr_e2e.DIM_Person (Person_Key, Person_UID, Date_of_Birth, Gender, Ethnicity_American_Indian_or_Alaska_Native,\n                              Ethnicity_Asian, Ethnicity_Black_or_African_American, Ethnicity_Hispanic_or_Latino,\n                              Ethnicity_Native_Hawaiian_or_Other_Pacific_Islander, Ethnicity_White, Ethnicity_Other)\nVALUES (REDACTED, '', CAST('9999-01-01' AS DATE), REDACTED, REDACTED, REDACTED, REDACTED, REDACTED, REDACTED, REDACTED, REDACTED); */\n\ninsert into tr_e2e.dim_person( \n    person_key,\n    person_uid, \n    gender, \n    date_of_birth, \n    ethnicity_american_indian_or_alaska_native,\n    ethnicity_asian,\n    ethnicity_black_or_african_american,\n    ethnicity_hispanic_or_latino,\n    ethnicity_native_hawaiian_or_other_pacific_islander,\n    ethnicity_white,\n    ethnicity_other\n)\nwith gender_tab as (\n    select person_uid, gender, count(*) as cnt, row_number() over (partition by person_uid order by count(*) desc,\n        --breaking ties when highest count is same for multiple gender values \n        --in future, would prefer to break tie by recency of observation, but not tracked in person_instance \n        case when gender = 'Other' then 1\n        when gender = 'Female' then 2\n        when gender = 'Male' then 3\n        else 4 end\n    ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where gender not in ('', 'Unknown', 'Missing')\n    group by person_uid, gender\n),\ngender_tab2 as (\n    select * \n    from gender_tab \n    where rn = 1\n),\ndob_tab as (\n    select person_uid, date_of_birth, count(*) as cnt, \n        --in ties of number of observations, order by date of birth \n        row_number() over (partition by person_uid order by count(*) desc, date_of_birth) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where date_of_birth != '1900-01-01'\n    group by person_uid, date_of_birth \n),\ndob_tab2 as ( \n    select * \n    from dob_tab \n    where rn = 1\n),\neth_aian_tab as (\n    select person_uid, ethnicity_american_indian_or_alaska_native, count(*) as cnt, \n        --in ties of number of observations, prioritize yes over no \n        row_number() over (partition by person_uid order by count(*) desc, \n            case when ethnicity_american_indian_or_alaska_native = 'Yes' then 1 \n            when ethnicity_american_indian_or_alaska_native = 'No' then 2 \n            else 3 end\n        ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where ethnicity_american_indian_or_alaska_native not in ('', 'MI', 'UK')\n    group by person_uid, ethnicity_american_indian_or_alaska_native \n),\neth_aian_tab2 as ( \n    select * \n    from eth_aian_tab \n    where rn = 1\n),\neth_asian_tab as (\n    select person_uid, ethnicity_asian, count(*) as cnt, \n        --in ties of number of observations, prioritize yes over no \n        row_number() over (partition by person_uid order by count(*) desc, \n            case when ethnicity_asian = 'Yes' then 1 \n            when ethnicity_asian = 'No' then 2 \n            else 3 end\n        ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where ethnicity_asian not in ('', 'MI', 'UK')\n    group by person_uid, ethnicity_asian  \n),\neth_asian_tab2 as ( \n    select *\n    from eth_asian_tab \n    where rn = 1\n),\neth_baa_tab as (\n    select person_uid, ethnicity_black_or_african_american, count(*) as cnt, \n        --in ties of number of observations, prioritize yes over no \n        row_number() over (partition by person_uid order by count(*) desc, \n            case when ethnicity_black_or_african_american = 'Yes' then 1 \n            when ethnicity_black_or_african_american = 'No' then 2 \n            else 3 end\n        ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where ethnicity_asian not in ('', 'MI', 'UK')\n    group by person_uid, ethnicity_black_or_african_american  \n),\neth_baa_tab2 as ( \n    select * \n    from eth_baa_tab \n    where rn = 1\n),\neth_hl_tab as (\n    select person_uid, ethnicity_hispanic_or_latino, count(*) as cnt, \n        --in ties of number of observations, prioritize yes or no \n        row_number() over (partition by person_uid order by count(*) desc, \n            case when ethnicity_hispanic_or_latino = 'Yes' then 1 \n            when ethnicity_hispanic_or_latino = 'No' then 2 \n            else 3 end\n        ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where ethnicity_hispanic_or_latino not in ('', 'MI', 'UK')\n    group by person_uid, ethnicity_hispanic_or_latino \n),\neth_hl_tab2 as ( \n    select *\n    from eth_hl_tab \n    where rn = 1\n),\neth_nhpi_tab as (\n    select person_uid, ethnicity_native_hawaiian_or_other_pacific_islander, count(*) as cnt, \n        --in ties of number of observations, prioritize yes or no\n        row_number() over (partition by person_uid order by count(*) desc, \n            case when ethnicity_native_hawaiian_or_other_pacific_islander = 'Yes' then 1 \n            when ethnicity_native_hawaiian_or_other_pacific_islander = 'No' then 2 \n            else 3 end\n        ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where ethnicity_native_hawaiian_or_other_pacific_islander not in ('', 'MI', 'UK')\n    group by person_uid, ethnicity_native_hawaiian_or_other_pacific_islander \n),\neth_nhpi_tab2 as ( \n    select *\n    from eth_nhpi_tab \n    where rn = 1\n),\neth_white_tab as (\n    select person_uid, ethnicity_white, count(*) as cnt, \n        --in ties of number of observations, prioritize yes or no \n        row_number() over (partition by person_uid order by count(*) desc, \n            case when ethnicity_white = 'Yes' then 1 \n            when ethnicity_white = 'No' then 2 \n            else 3 end\n        ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where ethnicity_white not in ('', 'MI', 'UK')\n    group by person_uid, ethnicity_white  \n),\neth_white_tab2 as (\n    select * \n    from eth_white_tab \n    where rn = 1\n),\neth_other_tab as ( \n    select person_uid, ethnicity_other, count(*) as cnt, \n        --in ties of number of observations, prioritize yes or no \n        row_number() over (partition by person_uid order by count(*) desc, \n            case when ethnicity_other = '2+' then 1 \n            when ethnicity_other = 'No' then 2 \n            else 3 end\n        ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where ethnicity_other not in ('', 'NC', 'N/A')\n    group by person_uid, ethnicity_other\n),\neth_other_tab2 as (\n    select *\n    from eth_other_tab \n    where rn = 1\n),\nunique_ppl as (\n    select distinct person_uid \n    from tr_e2e.mdm_person_instance mpi2 \n), \ngd as (\n    select coalesce(gt.person_uid, dt.person_uid) as person_uid, \n        gt.gender,\n        dt.date_of_birth\n    from gender_tab2 gt \n    full outer join dob_tab2 dt on (gt.person_uid = dt.person_uid)\n),\ngda as (\n    select coalesce(eat.person_uid, gd.person_uid) as person_uid, \n    gd.gender, \n    gd.date_of_birth, \n    eat.ethnicity_american_indian_or_alaska_native \n    from eth_aian_tab2 eat\n    full outer join gd on gd.person_uid = eat.person_uid\n),\ngdaa as (\n    select coalesce(east.person_uid, gda.person_uid) as person_uid, \n    gda.gender, \n    gda.date_of_birth, \n    gda.ethnicity_american_indian_or_alaska_native,\n    east.ethnicity_asian\n    from eth_asian_tab2 east\n    full outer join gda on gda.person_uid = east.person_uid\n),\ngdaab as (\n    select coalesce(ebt.person_uid, gdaa.person_uid) as person_uid, \n    gdaa.gender, \n    gdaa.date_of_birth, \n    gdaa.ethnicity_american_indian_or_alaska_native,\n    gdaa.ethnicity_asian,\n    ebt.ethnicity_black_or_african_american\n    from gdaa \n    full outer join eth_baa_tab2 ebt on (gdaa.person_uid = ebt.person_uid)\n),\ngdaabh as (\n    select coalesce(eht.person_uid, gdaab.person_uid) as person_uid, \n    gdaab.gender, \n    gdaab.date_of_birth, \n    gdaab.ethnicity_american_indian_or_alaska_native,\n    gdaab.ethnicity_asian,\n    gdaab.ethnicity_black_or_african_american,\n    eht.ethnicity_hispanic_or_latino\n    from gdaab\n    full outer join eth_hl_tab2 eht on (gdaab.person_uid = eht.person_uid)\n),\ngdaabhn as (\n    select coalesce(ent.person_uid, gdaabh.person_uid) as person_uid, \n    gdaabh.gender, \n    gdaabh.date_of_birth, \n    gdaabh.ethnicity_american_indian_or_alaska_native,\n    gdaabh.ethnicity_asian,\n    gdaabh.ethnicity_black_or_african_american,\n    gdaabh.ethnicity_hispanic_or_latino,\n    ent.ethnicity_native_hawaiian_or_other_pacific_islander\n    from gdaabh\n    full outer join eth_nhpi_tab2 ent on (gdaabh.person_uid = ent.person_uid)\n),\ngdaabhnw as ( \n    select coalesce(ewt.person_uid, gdaabhn.person_uid) as person_uid, \n    gdaabhn.gender, \n    gdaabhn.date_of_birth, \n    gdaabhn.ethnicity_american_indian_or_alaska_native,\n    gdaabhn.ethnicity_asian,\n    gdaabhn.ethnicity_black_or_african_american,\n    gdaabhn.ethnicity_hispanic_or_latino,\n    gdaabhn.ethnicity_native_hawaiian_or_other_pacific_islander,\n    ewt.ethnicity_white\n    from gdaabhn\n    full outer join eth_white_tab2 ewt on (gdaabhn.person_uid = ewt.person_uid)\n),\ngdaabhnwo as ( \n    select coalesce(eot.person_uid, gdaabhnw.person_uid) as person_uid, \n    gdaabhnw.gender, \n    gdaabhnw.date_of_birth, \n    gdaabhnw.ethnicity_american_indian_or_alaska_native,\n    gdaabhnw.ethnicity_asian,\n    gdaabhnw.ethnicity_black_or_african_american,\n    gdaabhnw.ethnicity_hispanic_or_latino,\n    gdaabhnw.ethnicity_native_hawaiian_or_other_pacific_islander,\n    gdaabhnw.ethnicity_white,\n    eot.ethnicity_other\n    from gdaabhnw\n    full outer join eth_other_tab2 eot on (gdaabhnw.person_uid = eot.person_uid)\n),\nall_comb as (\n    select coalesce(up.person_uid, gdaabhnwo.person_uid) as person_uid, \n    gdaabhnwo.gender, \n    gdaabhnwo.date_of_birth, \n    gdaabhnwo.ethnicity_american_indian_or_alaska_native,\n    gdaabhnwo.ethnicity_asian,\n    gdaabhnwo.ethnicity_black_or_african_american,\n    gdaabhnwo.ethnicity_hispanic_or_latino,\n    gdaabhnwo.ethnicity_native_hawaiian_or_other_pacific_islander,\n    gdaabhnwo.ethnicity_white,\n    gdaabhnwo.ethnicity_other\n    from gdaabhnwo\n    full outer join unique_ppl up on (gdaabhnwo.person_uid = up.person_uid)\n),\nget_key as (\nselect mpm.person_master_id as person_key, all_comb.* \nfrom all_comb \ninner join tr_e2e.mdm_person_master mpm on mpm.person_uid = all_comb.person_uid\n)\nselect * from get_key \n\n\n\n--testing protocol - develop logic and test for someone with multiple non-missing values to make sure it works\n--example below \n\nwith f as (\n    select person_uid, ethnicity_other, count(*) as cnt, \n        --in ties of number of observations, order by INSERT VARIABLE \n        row_number() over (partition by person_uid order by count(*) desc, \n            case when ethnicity_other = '2+' then 1 \n            when ethnicity_other = 'No' then 2 \n            else 3 end\n        ) as rn \n    from tr_e2e.mdm_person_instance mpi \n    where ethnicity_other not in ('', 'NC', 'N/A')\n    group by person_uid, ethnicity_other\n),\ndup as (\n    select person_uid from tr_e2e.mdm_person_instance mpi where ethnicity_other not in ('', 'NC', 'N/A')\n    group by person_uid having count(distinct(ethnicity_other)) &gt; 1\n    limit 1\n)\nselect * from f where person_uid in (select distinct person_uid from dup)\n\n\n\n\nColeridge Initiative Adjustments\n\nnew_fact_populate\n\nselect distinct person_key, program_key, entry_year_quarter_key, max(exit_year_quarter_key) as exit_year_quarter_key\nfrom tr_e2e.fact_person_program_participation fppp \nwhere program_key != 11\ngroup by person_key, program_key, entry_year_quarter_key\norder by person_key, program_key, entry_year_quarter_key \n\n\n\nnew_fact_table_creation\n\ncreate table if not exists tr_e2e.FACT_Person_Program_Start_End (\n   Person_Program_Start_End_ID BIGINT not null identity,\n   Person_Key BIGINT not null,\n   Program_Key INTEGER not null,\n   Entry_Year_Quarter_Key INTEGER not null,\n   Exit_Year_Quarter_Key INTEGER not null,\n   constraint PK_FACT_Person_Program_Start_End_IDX primary key (Person_Program_Start_End_ID),\n    unique (Person_Key, Program_Key, Entry_Year_Quarter_Key, Exit_Year_Quarter_Key),\n   constraint FK_FACT_PERSON_Program_Start_End_DIM_PROGRAM foreign key (Program_Key) \n      references tr_e2e.DIM_Program (Program_Key),\n   constraint FK_FACT_PERSON_Program_Start_End_DIM_YEAR_QUARTER_Entry foreign key (Entry_Year_Quarter_Key) \n      references tr_e2e.DIM_Year_Quarter (Year_Quarter_Key),\n   constraint FK_FACT_PERSON_Program_Start_End_DIM_PERSON foreign key (Person_Key) \n      references tr_e2e.DIM_Person (Person_Key),\n   constraint FK_FACT_PERSON_Program_Start_End_DIM_YEAR_QUARTER__EXIT_YEAR foreign key (Exit_Year_Quarter_Key) \n      references tr_e2e.DIM_Year_Quarter (Year_Quarter_Key)\n);\n\ninsert into tr_e2e.fact_person_program_start_end( \n    person_key,\n    program_key,\n    entry_year_quarter_key,\n    exit_year_quarter_key \n)\nselect distinct person_key, program_key, entry_year_quarter_key, max(exit_year_quarter_key) as exit_year_quarter_key\nfrom tr_e2e.fact_person_program_participation fppp \nwhere program_key != 11\ngroup by person_key, program_key, entry_year_quarter_key\norder by person_key, program_key, entry_year_quarter_key \n\nGRANT UPDATE, SELECT, DELETE, REFERENCES ON TABLE tr_e2e.FACT_Person_Program_Start_End TO group ci_read_group;\nGRANT UPDATE, SELECT, DELETE, REFERENCES ON TABLE tr_e2e.FACT_Person_Program_Start_End TO group db_t00113_rw;\n\n\n\nupdate_fks\n\nalter table tr_e2e.fact_person_ui_wage \nadd constraint FK_FACT_PERSON_UI_WAGE__DIM_PERSON foreign key (Person_Key) \n      references tr_e2e.DIM_Person (Person_Key)",
    "crumbs": [
      "Dimensional Model Scripts",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dimensional Model Scripts</span>"
    ]
  },
  {
    "objectID": "installing_packages.html",
    "href": "installing_packages.html",
    "title": "Installing startup packages",
    "section": "",
    "text": "How to install ColeridgeInitiative R package\nWe have written a R package to help users install fundamental packages needed for ADA and short course trainings. The package is called ColeridgeInitiative and can be installed from within RStudio.\nYou only have to install the package once and the functions will be available each time you use RStudio.\nTo install the package, at the Console in RStudio\nType the following:\ninstall.packages('P:/tr-foundation-module/packages/ColeridgeInitiative_0.1.0.tar.gz', type = 'source', repos = NULL)\nThe package will install and when it is finished , you should see:\nTo use the package, at the console, or in an R script, type\nlibrary(ColeridgeInitiative)",
    "crumbs": [
      "Supplemental",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing startup packages</span>"
    ]
  },
  {
    "objectID": "installing_packages.html#how-to-install-coleridgeinitiative-r-package",
    "href": "installing_packages.html#how-to-install-coleridgeinitiative-r-package",
    "title": "Installing startup packages",
    "section": "",
    "text": "Installing basic packages\nTo install the basic packages needed for the course, run the following command in the console:\ninstall_new()\nThis will take a minute or so, but when it is done, you should see the prompt returned to you\n\nNow you can use the packages as you would normally use them. For example. to load the dplyr package, simply type (at the console, or in a script)\nlibrary(dplyr)\nAnd the functions in that package will be available to you.",
    "crumbs": [
      "Supplemental",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing startup packages</span>"
    ]
  },
  {
    "objectID": "installing_packages.html#note",
    "href": "installing_packages.html#note",
    "title": "Installing startup packages",
    "section": "NOTE",
    "text": "NOTE\nWhen the foundations module is complete, you will need to install this package again in the Module 2 workspace. At that time, to install the package, modify the installation command to:\ninstall.packages('P:/tr-enrollment-to-employment/packages/ColeridgeInitiative_0.1.0.tar.gz', type = 'source', repos = NULL)\n\nGetting help\nIf this does not work for you, I recommend reaching out to your team lead or to the slack channel for your course.",
    "crumbs": [
      "Supplemental",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Installing startup packages</span>"
    ]
  }
]